import{_ as l,o as p,c as o,k as s,Q as n}from"./chunks/framework.c3fbb961.js";const f=JSON.parse('{"title":"附录:文档注释","description":"","frontmatter":{},"headers":[],"relativePath":"book/Appendix-Javadoc.md","filePath":"book/Appendix-Javadoc.md"}'),e={name:"book/Appendix-Javadoc.md"},t=n(`<p>[TOC]</p><h1 id="附录-文档注释" tabindex="-1">附录:文档注释 <a class="header-anchor" href="#附录-文档注释" aria-label="Permalink to &quot;附录:文档注释&quot;">​</a></h1><p>编写代码文档的最大问题可能是维护该文档。如果文档和代码是分开的，那么每次更改代码时更改文档都会变得很繁琐。解决方案似乎很简单：将代码链接到文档。最简单的方法是将所有内容放在同一个文件中。然而，要完成这完整的画面，您需要一个特殊的注释语法来标记文档，以及一个工具来将这些注释提取为有用的表单中。这就是Java所做的。</p><p>提取注释的工具称为Javadoc，它是 JDK 安装的一部分。它使用Java编译器中的一些技术来寻找特殊的注释标记。它不仅提取由这些标记所标记的信息，还提取与注释相邻的类名或方法名。通过这种方式，您就可以用最少的工作量来生成合适的程序文档。</p><p>Javadoc输出为一个html文件，您可以使用web浏览器查看它。对于Javadoc，您有一个简单的标准来创建文档，因此您可以期望所有Java libraries都有文档。</p><p>此外，您可以编写自己的Javadoc处理程序doclet，对于 Javadoc（例如，以不同的格式生成输出）。</p><p>以下是对Javadoc基础知识的介绍和概述。在 JDK 文档中可以找到完整的描述。</p><h2 id="句法规则" tabindex="-1">句法规则 <a class="header-anchor" href="#句法规则" aria-label="Permalink to &quot;句法规则&quot;">​</a></h2><p>所有Javadoc指令都发生在以 <strong>/</strong>** 开头(但仍然以 *<strong>/</strong> 结尾)的注释中。</p><p>使用Javadoc有两种主要方法:</p><p>嵌入HTML或使用“doc标签”。独立的doc标签是指令它以 <strong>@</strong> 开头，放在注释行的开头。(然而，前面的 ***** 将被忽略。)可能会出现内联doc标签</p><p>Javadoc注释中的任何位置，也可以，以一个 <strong>@</strong> 开头，但是被花括号包围。</p><p>有三种类型的注释文档，它们对应于注释前面的元素:类、字段或方法。也就是说，类注释出现在类定义之前，字段注释出现在字段定义之前，方法注释出现在方法定义之前。举个简单的例子:</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// javadoc/Documentation1.java </span></span>
<span class="line"><span style="color:#6A737D;">/** 一个类注释 */</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Documentation1</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#6A737D;">    /** 一个属性注释 */</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> i;</span></span>
<span class="line"><span style="color:#6A737D;">    /** 一个方法注释 */</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">f</span><span style="color:#E1E4E8;">() {}</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// javadoc/Documentation1.java </span></span>
<span class="line"><span style="color:#6A737D;">/** 一个类注释 */</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Documentation1</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#6A737D;">    /** 一个属性注释 */</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i;</span></span>
<span class="line"><span style="color:#6A737D;">    /** 一个方法注释 */</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">f</span><span style="color:#24292E;">() {}</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>Javadoc处理注释文档仅适用于 <strong>公共</strong> 和 <strong>受保护</strong> 的成员。</p><p>默认情况下，将忽略对 <strong>私有成员</strong> 和包访问成员的注释（请参阅<a href="/docs/book/07-Implementation-Hiding.html">&quot;隐藏实现&quot;</a>一章），并且您将看不到任何输出。</p><p>这是有道理的，因为仅客户端程序员的观点是，在文件外部可以使用 <strong>公共成员</strong> 和 <strong>受保护成员</strong> 。 您可以使用 <strong>-private</strong> 标志和包含 <strong>私人</strong> 成员。</p><p>要通过Javadoc处理前面的代码，命令是：</p><div class="language-cmd vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cmd</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">javadoc Documentation1.java</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">javadoc Documentation1.java</span></span></code></pre></div><p>这将产生一组HTML文件。 如果您在浏览器中打开index.html，您将看到结果与所有其他Java文档具有相同的标准格式，因此用户对这种格式很熟悉，并可以轻松地浏览你的类。</p><h2 id="内嵌-html" tabindex="-1">内嵌 HTML <a class="header-anchor" href="#内嵌-html" aria-label="Permalink to &quot;内嵌 HTML&quot;">​</a></h2><p>Javadoc传递未修改的HTML代码，用以生成的HTML文档。这使你可以充分利用HTML。但是，这样做的主要目的是让你格式化代码，例如：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// javadoc/Documentation2.java</span></span>
<span class="line"><span style="color:#6A737D;">/** &lt;pre&gt;</span></span>
<span class="line"><span style="color:#6A737D;">* System.out.println(new Date());</span></span>
<span class="line"><span style="color:#6A737D;">* &lt;/pre&gt;</span></span>
<span class="line"><span style="color:#6A737D;">*/</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Documentation2</span><span style="color:#E1E4E8;"> {}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// javadoc/Documentation2.java</span></span>
<span class="line"><span style="color:#6A737D;">/** &lt;pre&gt;</span></span>
<span class="line"><span style="color:#6A737D;">* System.out.println(new Date());</span></span>
<span class="line"><span style="color:#6A737D;">* &lt;/pre&gt;</span></span>
<span class="line"><span style="color:#6A737D;">*/</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Documentation2</span><span style="color:#24292E;"> {}</span></span></code></pre></div><p>您你也可以像在其他任何Web文档中一样使用HTML来格式化说明中的文字：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// javadoc/Documentation3.java</span></span>
<span class="line"><span style="color:#6A737D;">/** You can &lt;em&gt;even&lt;/em&gt; insert a list:</span></span>
<span class="line"><span style="color:#6A737D;">* &lt;ol&gt;</span></span>
<span class="line"><span style="color:#6A737D;">* &lt;li&gt; Item one</span></span>
<span class="line"><span style="color:#6A737D;">* &lt;li&gt; Item two</span></span>
<span class="line"><span style="color:#6A737D;">* &lt;li&gt; Item three</span></span>
<span class="line"><span style="color:#6A737D;">* &lt;/ol&gt;</span></span>
<span class="line"><span style="color:#6A737D;">*/</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Documentation3</span><span style="color:#E1E4E8;"> {}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// javadoc/Documentation3.java</span></span>
<span class="line"><span style="color:#6A737D;">/** You can &lt;em&gt;even&lt;/em&gt; insert a list:</span></span>
<span class="line"><span style="color:#6A737D;">* &lt;ol&gt;</span></span>
<span class="line"><span style="color:#6A737D;">* &lt;li&gt; Item one</span></span>
<span class="line"><span style="color:#6A737D;">* &lt;li&gt; Item two</span></span>
<span class="line"><span style="color:#6A737D;">* &lt;li&gt; Item three</span></span>
<span class="line"><span style="color:#6A737D;">* &lt;/ol&gt;</span></span>
<span class="line"><span style="color:#6A737D;">*/</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Documentation3</span><span style="color:#24292E;"> {}</span></span></code></pre></div><p>请注意，在文档注释中，Javadoc删除了行首的星号以及前导空格。 Javadoc重新格式化了所有内容，使其符合标准文档的外观。不要将诸如 &lt;h1&gt;或 &lt;hr&gt;之类的标题用作嵌入式HTML，因为Javadoc会插入自己的标题，后插入的标题将对其生成的文档产生干扰。</p><p>所有类型的注释文档（类，字段和方法）都可以支持嵌入式HTML。</p><h2 id="示例标签" tabindex="-1">示例标签 <a class="header-anchor" href="#示例标签" aria-label="Permalink to &quot;示例标签&quot;">​</a></h2><p>以下是一些可用于代码文档的Javadoc标记。在尝试使用Javadoc进行任何认真的操作之前，请查阅JDK文档中的Javadoc参考，以了解使用Javadoc的所有不同方法。</p><h3 id="see" tabindex="-1">@see <a class="header-anchor" href="#see" aria-label="Permalink to &quot;@see&quot;">​</a></h3><p>这个标签可以将其他的类连接到文档中，Javadoc 将使用 @see 标记超链接到其他文档中，形式为：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">see</span><span style="color:#E1E4E8;"> classname</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">see</span><span style="color:#E1E4E8;"> fully</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">qualified</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">classname</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">see</span><span style="color:#E1E4E8;"> fully</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">qualified</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">classname#method</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">name</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">see</span><span style="color:#24292E;"> classname</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">see</span><span style="color:#24292E;"> fully</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">qualified</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">classname</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">see</span><span style="color:#24292E;"> fully</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">qualified</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">classname#method</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">name</span></span></code></pre></div><p>每个都向生成的文档中添加超链接的“另请参阅”条目。 Javadoc 不会检查超链接的有效性。</p>`,33),c=s("a",{class:"header-anchor",href:"#","aria-label":'Permalink to "{@link package.class#member label}"'},"​",-1),r=[c],i=s("p",null,"和 @see 非常相似，不同之处在于它可以内联使用，并使用标签作为超链接文本，而不是“另请参阅”。",-1),y=s("a",{class:"header-anchor",href:"#-1","aria-label":'Permalink to "{@docRoot}"'},"​",-1),d=[y],E=s("p",null,"生成文档根目录的相对路径。对于显式超链接到文档树中的页面很有用。",-1),h=s("a",{class:"header-anchor",href:"#-2","aria-label":'Permalink to "{@inheritDoc}"'},"​",-1),u=[h],v=n(`<p>将文档从此类的最近基类继承到当前文档注释中。</p><h3 id="version" tabindex="-1">@version <a class="header-anchor" href="#version" aria-label="Permalink to &quot;@version&quot;">​</a></h3><p>其形式为：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">version</span><span style="color:#E1E4E8;"> version</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">information</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">version</span><span style="color:#24292E;"> version</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">information</span></span></code></pre></div><p>其中 version-information 是你认为适合包含的任何重要信息。当在Javadoc命令行上放置 -version 标志时，特别在生成的HTML文档中用于生成version信息。</p><h3 id="author" tabindex="-1">@author <a class="header-anchor" href="#author" aria-label="Permalink to &quot;@author&quot;">​</a></h3><p>其形式为：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">@author author-information</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">@author author-information</span></span></code></pre></div><p>author-information 大概率是你的名字，但是一样可以包含你的 email 地址或者其他合适的信息。当在 Javadoc 命令行上放置 -author 标志的时候，在生成的HTML文档中特别注明了作者信息。</p><p>你可以对作者列表使用多个作者标签，但是必须连续放置它们。所有作者信息都集中在生成的HTML中的单个段落中。</p><h3 id="since" tabindex="-1">@since <a class="header-anchor" href="#since" aria-label="Permalink to &quot;@since&quot;">​</a></h3><p>此标记指示此代码的版本开始使用特定功能。例如，它出现在HTML Java文档中，以指示功能首次出现的JDK版本。</p><h3 id="param" tabindex="-1">@param <a class="header-anchor" href="#param" aria-label="Permalink to &quot;@param&quot;">​</a></h3><p>这将生成有关方法参数的文档：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">param</span><span style="color:#E1E4E8;"> parameter</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">name description</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">param</span><span style="color:#24292E;"> parameter</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">name description</span></span></code></pre></div><p>其中parameter-name是方法参数列表中的标识符，description 是可以在后续行中继续的文本。当遇到新的文档标签时，说明被视为完成。@param 标签的可以任意使用，大概每个参数一个。</p><h3 id="return" tabindex="-1">@return <a class="header-anchor" href="#return" aria-label="Permalink to &quot;@return&quot;">​</a></h3><p>这记录了返回值：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> description</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> description</span></span></code></pre></div><p>其中description给出了返回值的含义。它可延续到后面的行内。</p><h3 id="throws" tabindex="-1">@throws <a class="header-anchor" href="#throws" aria-label="Permalink to &quot;@throws&quot;">​</a></h3><p>一个方法可以产生许多不同类型的异常，所有这些异常都需要描述。异常标记的形式为：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> fully</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">qualified</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">class</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">name description</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> fully</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">qualified</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">class</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">name description</span></span></code></pre></div><p>fully-qualified-class-name 给出明确的异常分类名称，并且 description （可延续到后面的行内）告诉你为什么这特定类型的异常会在方法调用后出现。</p><h3 id="deprecated" tabindex="-1">@deprecated <a class="header-anchor" href="#deprecated" aria-label="Permalink to &quot;@deprecated&quot;">​</a></h3><p>这表示已被改进的功能取代的功能。deprecated 标记表明你不再使用此特定功能，因为将来有可能将其删除。标记为@不赞成使用的方法会导致编译器在使用时发出警告。在Java 5中，@deprecated Javadoc 标记已被 @Deprecated 注解取代（在<a href="./.html">注解</a>一章中进行了描述）。</p><h2 id="文档示例" tabindex="-1">文档示例 <a class="header-anchor" href="#文档示例" aria-label="Permalink to &quot;文档示例&quot;">​</a></h2><p><strong>objects/HelloDate.java</strong> 是带有文档注释的例子。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// javadoc/HelloDateDoc.java</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> java.util.</span><span style="color:#79B8FF;">*</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#6A737D;">/** The first On Java 8 example program.</span></span>
<span class="line"><span style="color:#6A737D;"> * Displays a String and today&#39;s date.</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#F97583;">@author</span><span style="color:#6A737D;"> Bruce Eckel</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#F97583;">@author</span><span style="color:#6A737D;"> www.MindviewInc.com</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#F97583;">@version</span><span style="color:#6A737D;"> 5.0</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">HelloDateDoc</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#6A737D;">    /** Entry point to class &amp; application.</span></span>
<span class="line"><span style="color:#6A737D;">     * </span><span style="color:#F97583;">@param</span><span style="color:#6A737D;"> </span><span style="color:#FFAB70;">args</span><span style="color:#6A737D;"> array of String arguments</span></span>
<span class="line"><span style="color:#6A737D;">     * </span><span style="color:#F97583;">@throws</span><span style="color:#6A737D;"> </span><span style="color:#B392F0;">exceptions</span><span style="color:#6A737D;"> No exceptions thrown</span></span>
<span class="line"><span style="color:#6A737D;">     */</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] </span><span style="color:#FFAB70;">args</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Hello, it&#39;s: &quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Date</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#6A737D;">/* Output:</span></span>
<span class="line"><span style="color:#6A737D;">Hello, it&#39;s:</span></span>
<span class="line"><span style="color:#6A737D;">Tue May 09 06:07:27 MDT 2017</span></span>
<span class="line"><span style="color:#6A737D;">*/</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// javadoc/HelloDateDoc.java</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> java.util.</span><span style="color:#005CC5;">*</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#6A737D;">/** The first On Java 8 example program.</span></span>
<span class="line"><span style="color:#6A737D;"> * Displays a String and today&#39;s date.</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@author</span><span style="color:#6A737D;"> Bruce Eckel</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@author</span><span style="color:#6A737D;"> www.MindviewInc.com</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@version</span><span style="color:#6A737D;"> 5.0</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">HelloDateDoc</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#6A737D;">    /** Entry point to class &amp; application.</span></span>
<span class="line"><span style="color:#6A737D;">     * </span><span style="color:#D73A49;">@param</span><span style="color:#6A737D;"> </span><span style="color:#E36209;">args</span><span style="color:#6A737D;"> array of String arguments</span></span>
<span class="line"><span style="color:#6A737D;">     * </span><span style="color:#D73A49;">@throws</span><span style="color:#6A737D;"> </span><span style="color:#6F42C1;">exceptions</span><span style="color:#6A737D;"> No exceptions thrown</span></span>
<span class="line"><span style="color:#6A737D;">     */</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Hello, it&#39;s: &quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Date</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6A737D;">/* Output:</span></span>
<span class="line"><span style="color:#6A737D;">Hello, it&#39;s:</span></span>
<span class="line"><span style="color:#6A737D;">Tue May 09 06:07:27 MDT 2017</span></span>
<span class="line"><span style="color:#6A737D;">*/</span></span></code></pre></div><p>你可以在Java标准库的源代码中找到许多Javadoc注释文档的示例。</p>`,30);function D(g,a,A,m,b,k){return p(),o("div",null,[t,s("h3",{onLink:a[0]||(a[0]=()=>{}),"package.class#member":"",label:"",id:"",tabindex:"-1"},r,32),i,s("h3",{"on:docRoot":a[1]||(a[1]=()=>{}),id:"-1",tabindex:"-1"},d,32),E,s("h3",{"on:inheritDoc":a[2]||(a[2]=()=>{}),id:"-2",tabindex:"-1"},u,32),v])}const _=l(e,[["render",D]]);export{f as __pageData,_ as default};
