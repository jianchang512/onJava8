import{_ as s,o as n,c as a,Q as l}from"./chunks/framework.c3fbb961.js";const A=JSON.parse('{"title":"第二十二章 枚举","description":"","frontmatter":{},"headers":[],"relativePath":"book/22-Enumerations.md","filePath":"book/22-Enumerations.md"}'),p={name:"book/22-Enumerations.md"},o=l(`<p>[TOC]</p><h1 id="第二十二章-枚举" tabindex="-1">第二十二章 枚举 <a class="header-anchor" href="#第二十二章-枚举" aria-label="Permalink to &quot;第二十二章 枚举&quot;">​</a></h1><blockquote><p>关键字 enum 可以将一组具名的值的有限集合创建为一种新的类型，而这些具名的值可以作为常规的程序组件使用。这是一种非常有用的功能</p></blockquote><p>在<a href="./.html">初始化和清理 </a> 这章结束的时候，我们已经简单地介绍了枚举的概念。现在，你对 Java 已经有了更深刻的理解，因此可以更深入地学习 Java 中的枚举了。你将在本章中看到，使用 enum 可以做很多有趣的事情，同时，我们也会深入其他的 Java 特性，例如泛型和反射。在这个过程中，我们还将学习一些设计模式。</p><h2 id="基本-enum-特性" tabindex="-1">基本 enum 特性 <a class="header-anchor" href="#基本-enum-特性" aria-label="Permalink to &quot;基本 enum 特性&quot;">​</a></h2><p>我们已经在<a href="./.html">初始化和清理 </a> 这章章看到，调用 enum 的 values() 方法，可以遍历 enum 实例 .values() 方法返回 enum 实例的数组，而且该数组中的元素严格保持其在 enum 中声明时的顺序，因此你可以在循环中使用 values() 返回的数组。</p><p>创建 enum 时，编译器会为你生成一个相关的类，这个类继承自 Java.lang.Enum。下面的例子演示了 Enum 提供的一些功能：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// enums/EnumClass.java</span></span>
<span class="line"><span style="color:#6A737D;">// Capabilities of the Enum class</span></span>
<span class="line"><span style="color:#F97583;">enum</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Shrubbery</span><span style="color:#E1E4E8;"> { </span><span style="color:#79B8FF;">GROUND</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">CRAWLING</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">HANGING</span><span style="color:#E1E4E8;"> }</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">EnumClass</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] </span><span style="color:#FFAB70;">args</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;">(Shrubbery s </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> Shrubbery.</span><span style="color:#B392F0;">values</span><span style="color:#E1E4E8;">()) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">                    s </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot; ordinal: &quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> s.</span><span style="color:#B392F0;">ordinal</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">            System.out.</span><span style="color:#B392F0;">print</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">                    s.</span><span style="color:#B392F0;">compareTo</span><span style="color:#E1E4E8;">(Shrubbery.CRAWLING) </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot; &quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">            System.out.</span><span style="color:#B392F0;">print</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">                    s.</span><span style="color:#B392F0;">equals</span><span style="color:#E1E4E8;">(Shrubbery.CRAWLING) </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot; &quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">            System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(s </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> Shrubbery.CRAWLING);</span></span>
<span class="line"><span style="color:#E1E4E8;">            System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(s.</span><span style="color:#B392F0;">getDeclaringClass</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">            System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(s.</span><span style="color:#B392F0;">name</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">            System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;********************&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#6A737D;">// Produce an enum value from a String name:</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;">(String s </span><span style="color:#F97583;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#9ECBFF;">&quot;HANGING CRAWLING GROUND&quot;</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">split</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot; &quot;</span><span style="color:#E1E4E8;">)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            Shrubbery shrub </span><span style="color:#F97583;">=</span></span>
<span class="line"><span style="color:#E1E4E8;">                    Enum.</span><span style="color:#B392F0;">valueOf</span><span style="color:#E1E4E8;">(Shrubbery.class, s);</span></span>
<span class="line"><span style="color:#E1E4E8;">            System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(shrub);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// enums/EnumClass.java</span></span>
<span class="line"><span style="color:#6A737D;">// Capabilities of the Enum class</span></span>
<span class="line"><span style="color:#D73A49;">enum</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Shrubbery</span><span style="color:#24292E;"> { </span><span style="color:#005CC5;">GROUND</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">CRAWLING</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">HANGING</span><span style="color:#24292E;"> }</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">EnumClass</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">for</span><span style="color:#24292E;">(Shrubbery s </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> Shrubbery.</span><span style="color:#6F42C1;">values</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">            System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">                    s </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot; ordinal: &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> s.</span><span style="color:#6F42C1;">ordinal</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">            System.out.</span><span style="color:#6F42C1;">print</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">                    s.</span><span style="color:#6F42C1;">compareTo</span><span style="color:#24292E;">(Shrubbery.CRAWLING) </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot; &quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">            System.out.</span><span style="color:#6F42C1;">print</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">                    s.</span><span style="color:#6F42C1;">equals</span><span style="color:#24292E;">(Shrubbery.CRAWLING) </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot; &quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">            System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(s </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> Shrubbery.CRAWLING);</span></span>
<span class="line"><span style="color:#24292E;">            System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(s.</span><span style="color:#6F42C1;">getDeclaringClass</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">            System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(s.</span><span style="color:#6F42C1;">name</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">            System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;********************&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#6A737D;">// Produce an enum value from a String name:</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">for</span><span style="color:#24292E;">(String s </span><span style="color:#D73A49;">:</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#032F62;">&quot;HANGING CRAWLING GROUND&quot;</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">split</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot; &quot;</span><span style="color:#24292E;">)) {</span></span>
<span class="line"><span style="color:#24292E;">            Shrubbery shrub </span><span style="color:#D73A49;">=</span></span>
<span class="line"><span style="color:#24292E;">                    Enum.</span><span style="color:#6F42C1;">valueOf</span><span style="color:#24292E;">(Shrubbery.class, s);</span></span>
<span class="line"><span style="color:#24292E;">            System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(shrub);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>输出：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">GROUND ordinal: 0</span></span>
<span class="line"><span style="color:#e1e4e8;">-1 false false</span></span>
<span class="line"><span style="color:#e1e4e8;">class Shrubbery</span></span>
<span class="line"><span style="color:#e1e4e8;">GROUND</span></span>
<span class="line"><span style="color:#e1e4e8;">********************</span></span>
<span class="line"><span style="color:#e1e4e8;">CRAWLING ordinal: 1</span></span>
<span class="line"><span style="color:#e1e4e8;">0 true true</span></span>
<span class="line"><span style="color:#e1e4e8;">class Shrubbery</span></span>
<span class="line"><span style="color:#e1e4e8;">CRAWLING</span></span>
<span class="line"><span style="color:#e1e4e8;">********************</span></span>
<span class="line"><span style="color:#e1e4e8;">HANGING ordinal: 2</span></span>
<span class="line"><span style="color:#e1e4e8;">1 false false</span></span>
<span class="line"><span style="color:#e1e4e8;">class Shrubbery</span></span>
<span class="line"><span style="color:#e1e4e8;">HANGING</span></span>
<span class="line"><span style="color:#e1e4e8;">********************</span></span>
<span class="line"><span style="color:#e1e4e8;">HANGING</span></span>
<span class="line"><span style="color:#e1e4e8;">CRAWLING</span></span>
<span class="line"><span style="color:#e1e4e8;">GROUND</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">GROUND ordinal: 0</span></span>
<span class="line"><span style="color:#24292e;">-1 false false</span></span>
<span class="line"><span style="color:#24292e;">class Shrubbery</span></span>
<span class="line"><span style="color:#24292e;">GROUND</span></span>
<span class="line"><span style="color:#24292e;">********************</span></span>
<span class="line"><span style="color:#24292e;">CRAWLING ordinal: 1</span></span>
<span class="line"><span style="color:#24292e;">0 true true</span></span>
<span class="line"><span style="color:#24292e;">class Shrubbery</span></span>
<span class="line"><span style="color:#24292e;">CRAWLING</span></span>
<span class="line"><span style="color:#24292e;">********************</span></span>
<span class="line"><span style="color:#24292e;">HANGING ordinal: 2</span></span>
<span class="line"><span style="color:#24292e;">1 false false</span></span>
<span class="line"><span style="color:#24292e;">class Shrubbery</span></span>
<span class="line"><span style="color:#24292e;">HANGING</span></span>
<span class="line"><span style="color:#24292e;">********************</span></span>
<span class="line"><span style="color:#24292e;">HANGING</span></span>
<span class="line"><span style="color:#24292e;">CRAWLING</span></span>
<span class="line"><span style="color:#24292e;">GROUND</span></span></code></pre></div><p>ordinal() 方法返回一个 int 值，这是每个 enum 实例在声明时的次序，从 0 开始。可以使用==来比较 enum 实例，编译器会自动为你提供 equals() 和 hashCode() 方法。Enum 类实现了 Comparable 接口，所以它具有 compareTo() 方法。同时，它还实现了 Serializable 接口。</p><p>如果在 enum 实例上调用 getDeclaringClass() 方法，我们就能知道其所属的 enum 类。</p><p>name() 方法返回 enum 实例声明时的名字，这与使用 toString() 方法效果相同。valueOf() 是在 Enum 中定义的 static 方法，它根据给定的名字返回相应的 enum 实例，如果不存在给定名字的实例，将会抛出异常。</p><h3 id="将静态类型导入用于-enum" tabindex="-1">将静态类型导入用于 enum <a class="header-anchor" href="#将静态类型导入用于-enum" aria-label="Permalink to &quot;将静态类型导入用于 enum&quot;">​</a></h3><p>先看一看 <a href="./.html">初始化和清理 </a> 这章中 Burrito.java 的另一个版本：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// enums/SpicinessEnum.java</span></span>
<span class="line"><span style="color:#F97583;">package</span><span style="color:#E1E4E8;"> enums;</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">enum</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SpicinessEnum</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">NOT</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">MILD</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">MEDIUM</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">HOT</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">FLAMING</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#6A737D;">// enums/Burrito2.java</span></span>
<span class="line"><span style="color:#6A737D;">// {java enums.Burrito2}</span></span>
<span class="line"><span style="color:#F97583;">package</span><span style="color:#E1E4E8;"> enums;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> enums.SpicinessEnum.</span><span style="color:#79B8FF;">*</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Burrito2</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    SpicinessEnum degree;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Burrito2</span><span style="color:#E1E4E8;">(SpicinessEnum </span><span style="color:#FFAB70;">degree</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.degree </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> degree;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> String </span><span style="color:#B392F0;">toString</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;Burrito is &quot;</span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> degree;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] </span><span style="color:#FFAB70;">args</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Burrito2</span><span style="color:#E1E4E8;">(NOT));</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Burrito2</span><span style="color:#E1E4E8;">(MEDIUM));</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Burrito2</span><span style="color:#E1E4E8;">(HOT));</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// enums/SpicinessEnum.java</span></span>
<span class="line"><span style="color:#D73A49;">package</span><span style="color:#24292E;"> enums;</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">enum</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SpicinessEnum</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">NOT</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">MILD</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">MEDIUM</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">HOT</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">FLAMING</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6A737D;">// enums/Burrito2.java</span></span>
<span class="line"><span style="color:#6A737D;">// {java enums.Burrito2}</span></span>
<span class="line"><span style="color:#D73A49;">package</span><span style="color:#24292E;"> enums;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> enums.SpicinessEnum.</span><span style="color:#005CC5;">*</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Burrito2</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    SpicinessEnum degree;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Burrito2</span><span style="color:#24292E;">(SpicinessEnum </span><span style="color:#E36209;">degree</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.degree </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> degree;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> String </span><span style="color:#6F42C1;">toString</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;Burrito is &quot;</span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> degree;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Burrito2</span><span style="color:#24292E;">(NOT));</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Burrito2</span><span style="color:#24292E;">(MEDIUM));</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Burrito2</span><span style="color:#24292E;">(HOT));</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>输出为：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">Burrito is NOT</span></span>
<span class="line"><span style="color:#e1e4e8;">Burrito is MEDIUM</span></span>
<span class="line"><span style="color:#e1e4e8;">Burrito is HOT</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">Burrito is NOT</span></span>
<span class="line"><span style="color:#24292e;">Burrito is MEDIUM</span></span>
<span class="line"><span style="color:#24292e;">Burrito is HOT</span></span></code></pre></div><p>使用 static import 能够将 enum 实例的标识符带入当前的命名空间，所以无需再用 enum 类型来修饰 enum 实例。这是一个好的想法吗？或者还是显式地修饰 enum 实例更好？这要看代码的复杂程度了。编译器可以确保你使用的是正确的类型，所以唯一需要担心的是，使用静态导入会不会导致你的代码令人难以理解。多数情况下，使用 static import 还是有好处的，不过，程序员还是应该对具体情况进行具体分析。</p><p>注意，在定义 enum 的同一个文件中，这种技巧无法使用，如果是在默认包中定义 enum，这种技巧也无法使用（在 Sun 内部对这一点显然也有不同意见）。</p><h2 id="方法添加" tabindex="-1">方法添加 <a class="header-anchor" href="#方法添加" aria-label="Permalink to &quot;方法添加&quot;">​</a></h2><p>除了不能继承自一个 enum 之外，我们基本上可以将 enum 看作一个常规的类。也就是说我们可以向 enum 中添加方法。enum 甚至可以有 main() 方法。</p><p>一般来说，我们希望每个枚举实例能够返回对自身的描述，而不仅仅只是默认的 toString() 实现，这只能返回枚举实例的名字。为此，你可以提供一个构造器，专门负责处理这个额外的信息，然后添加一个方法，返回这个描述信息。看一看下面的示例：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// enums/OzWitch.java</span></span>
<span class="line"><span style="color:#6A737D;">// The witches in the land of Oz</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">enum</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">OzWitch</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// Instances must be defined first, before methods:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">WEST</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Miss Gulch, aka the Wicked Witch of the West&quot;</span><span style="color:#E1E4E8;">),</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">NORTH</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Glinda, the Good Witch of the North&quot;</span><span style="color:#E1E4E8;">),</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">EAST</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Wicked Witch of the East, wearer of the Ruby &quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#9ECBFF;">&quot;Slippers, crushed by Dorothy&#39;s house&quot;</span><span style="color:#E1E4E8;">),</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">SOUTH</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Good by inference, but missing&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> String description;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// Constructor must be package or private access:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">OzWitch</span><span style="color:#E1E4E8;">(String </span><span style="color:#FFAB70;">description</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.description </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> description;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> String </span><span style="color:#B392F0;">getDescription</span><span style="color:#E1E4E8;">() { </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> description; }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] </span><span style="color:#FFAB70;">args</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;">(OzWitch witch </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> OzWitch.</span><span style="color:#B392F0;">values</span><span style="color:#E1E4E8;">())</span></span>
<span class="line"><span style="color:#E1E4E8;">            System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">                    witch </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;: &quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> witch.</span><span style="color:#B392F0;">getDescription</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// enums/OzWitch.java</span></span>
<span class="line"><span style="color:#6A737D;">// The witches in the land of Oz</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">enum</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">OzWitch</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// Instances must be defined first, before methods:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">WEST</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Miss Gulch, aka the Wicked Witch of the West&quot;</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">NORTH</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Glinda, the Good Witch of the North&quot;</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">EAST</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Wicked Witch of the East, wearer of the Ruby &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#032F62;">&quot;Slippers, crushed by Dorothy&#39;s house&quot;</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">SOUTH</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Good by inference, but missing&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> String description;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// Constructor must be package or private access:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">OzWitch</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">description</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.description </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> description;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> String </span><span style="color:#6F42C1;">getDescription</span><span style="color:#24292E;">() { </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> description; }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">for</span><span style="color:#24292E;">(OzWitch witch </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> OzWitch.</span><span style="color:#6F42C1;">values</span><span style="color:#24292E;">())</span></span>
<span class="line"><span style="color:#24292E;">            System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">                    witch </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;: &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> witch.</span><span style="color:#6F42C1;">getDescription</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>输出为：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">WEST: Miss Gulch, aka the Wicked Witch of the West</span></span>
<span class="line"><span style="color:#e1e4e8;">NORTH: Glinda, the Good Witch of the North</span></span>
<span class="line"><span style="color:#e1e4e8;">EAST: Wicked Witch of the East, wearer of the Ruby</span></span>
<span class="line"><span style="color:#e1e4e8;">Slippers, crushed by Dorothy&#39;s house</span></span>
<span class="line"><span style="color:#e1e4e8;">SOUTH: Good by inference, but missing</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">WEST: Miss Gulch, aka the Wicked Witch of the West</span></span>
<span class="line"><span style="color:#24292e;">NORTH: Glinda, the Good Witch of the North</span></span>
<span class="line"><span style="color:#24292e;">EAST: Wicked Witch of the East, wearer of the Ruby</span></span>
<span class="line"><span style="color:#24292e;">Slippers, crushed by Dorothy&#39;s house</span></span>
<span class="line"><span style="color:#24292e;">SOUTH: Good by inference, but missing</span></span></code></pre></div><p>注意，如果你打算定义自己的方法，那么必须在 enum 实例序列的最后添加一个分号。同时，Java 要求你必须先定义 enum 实例。如果在定义 enum 实例之前定义了任何方法或属性，那么在编译时就会得到错误信息。</p><p>enum 中的构造器与方法和普通的类没有区别，因为除了有少许限制之外，enum 就是一个普通的类。所以，我们可以使用 enum 做许多事情（虽然，我们一般只使用普通的枚举类型）</p><p>在这个例子中，虽然我们有意识地将 enum 的构造器声明为 private，但对于它的可访问性而言，其实并没有什么变化，因为（即使不声明为 private）我们只能在 enum 定义的内部使用其构造器创建 enum 实例。一旦 enum 的定义结束，编译器就不允许我们再使用其构造器来创建任何实例了。</p><h3 id="覆盖-enum-的方法" tabindex="-1">覆盖 enum 的方法 <a class="header-anchor" href="#覆盖-enum-的方法" aria-label="Permalink to &quot;覆盖 enum 的方法&quot;">​</a></h3><p>覆盖 toSring() 方法，给我们提供了另一种方式来为枚举实例生成不同的字符串描述信息。 在下面的示例中，我们使用的就是实例的名字，不过我们希望改变其格式。覆盖 enum 的 toSring() 方法与覆盖一般类的方法没有区别：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// enums/SpaceShip.java</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> java.util.stream.</span><span style="color:#79B8FF;">*</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">enum</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SpaceShip</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">SCOUT</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">CARGO</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">TRANSPORT</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">CRUISER</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">BATTLESHIP</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">MOTHERSHIP</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> String </span><span style="color:#B392F0;">toString</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        String id </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">name</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        String lower </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> id.</span><span style="color:#B392F0;">substring</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">toLowerCase</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> id.</span><span style="color:#B392F0;">charAt</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> lower;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] </span><span style="color:#FFAB70;">args</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        Stream.</span><span style="color:#B392F0;">of</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">values</span><span style="color:#E1E4E8;">())</span></span>
<span class="line"><span style="color:#E1E4E8;">                .</span><span style="color:#B392F0;">forEach</span><span style="color:#E1E4E8;">(System.out</span><span style="color:#F97583;">::</span><span style="color:#E1E4E8;">println);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// enums/SpaceShip.java</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> java.util.stream.</span><span style="color:#005CC5;">*</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">enum</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SpaceShip</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">SCOUT</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">CARGO</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">TRANSPORT</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">CRUISER</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">BATTLESHIP</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">MOTHERSHIP</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> String </span><span style="color:#6F42C1;">toString</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        String id </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">name</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        String lower </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> id.</span><span style="color:#6F42C1;">substring</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">toLowerCase</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> id.</span><span style="color:#6F42C1;">charAt</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> lower;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        Stream.</span><span style="color:#6F42C1;">of</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">values</span><span style="color:#24292E;">())</span></span>
<span class="line"><span style="color:#24292E;">                .</span><span style="color:#6F42C1;">forEach</span><span style="color:#24292E;">(System.out</span><span style="color:#D73A49;">::</span><span style="color:#24292E;">println);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>输出为：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">Scout</span></span>
<span class="line"><span style="color:#e1e4e8;">Cargo</span></span>
<span class="line"><span style="color:#e1e4e8;">Transport</span></span>
<span class="line"><span style="color:#e1e4e8;">Cruiser</span></span>
<span class="line"><span style="color:#e1e4e8;">Battleship</span></span>
<span class="line"><span style="color:#e1e4e8;">Mothership</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">Scout</span></span>
<span class="line"><span style="color:#24292e;">Cargo</span></span>
<span class="line"><span style="color:#24292e;">Transport</span></span>
<span class="line"><span style="color:#24292e;">Cruiser</span></span>
<span class="line"><span style="color:#24292e;">Battleship</span></span>
<span class="line"><span style="color:#24292e;">Mothership</span></span></code></pre></div><p>toString() 方法通过调用 name() 方法取得 SpaceShip 的名字，然后将其修改为只有首字母大写的格式。</p><h2 id="switch-语句中的-enum" tabindex="-1">switch 语句中的 enum <a class="header-anchor" href="#switch-语句中的-enum" aria-label="Permalink to &quot;switch 语句中的 enum&quot;">​</a></h2><p>在 switch 中使用 enum，是 enum 提供的一项非常便利的功能。一般来说，在 switch 中只能使用整数值，而枚举实例天生就具备整数值的次序，并且可以通过 ordinal() 方法取得其次序（显然编译器帮我们做了类似的工作），因此我们可以在 switch 语句中使用 enum。</p><p>虽然一般情况下我们必须使用 enum 类型来修饰一个 enum 实例，但是在 case 语句中却不必如此。下面的例子使用 enum 构造了一个小型状态机：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// enums/TrafficLight.java</span></span>
<span class="line"><span style="color:#6A737D;">// Enums in switch statements</span></span>
<span class="line"><span style="color:#6A737D;">// Define an enum type:</span></span>
<span class="line"><span style="color:#F97583;">enum</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Signal</span><span style="color:#E1E4E8;"> { </span><span style="color:#79B8FF;">GREEN</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">YELLOW</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">RED</span><span style="color:#E1E4E8;">, }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">TrafficLight</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    Signal color </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Signal.RED;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">change</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">switch</span><span style="color:#E1E4E8;">(color) {</span></span>
<span class="line"><span style="color:#E1E4E8;">           </span><span style="color:#6A737D;">// Note you don&#39;t have to say Signal.RED</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// in the case statement:</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> RED</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> color </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Signal.GREEN;</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">break</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> GREEN</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> color </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Signal.YELLOW;</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">break</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> YELLOW</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> color </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Signal.RED;</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">break</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> String </span><span style="color:#B392F0;">toString</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;The traffic light is &quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> color;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] </span><span style="color:#FFAB70;">args</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        TrafficLight t </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">TrafficLight</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">7</span><span style="color:#E1E4E8;">; i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(t);</span></span>
<span class="line"><span style="color:#E1E4E8;">            t.</span><span style="color:#B392F0;">change</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// enums/TrafficLight.java</span></span>
<span class="line"><span style="color:#6A737D;">// Enums in switch statements</span></span>
<span class="line"><span style="color:#6A737D;">// Define an enum type:</span></span>
<span class="line"><span style="color:#D73A49;">enum</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Signal</span><span style="color:#24292E;"> { </span><span style="color:#005CC5;">GREEN</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">YELLOW</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">RED</span><span style="color:#24292E;">, }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TrafficLight</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    Signal color </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Signal.RED;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">change</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">switch</span><span style="color:#24292E;">(color) {</span></span>
<span class="line"><span style="color:#24292E;">           </span><span style="color:#6A737D;">// Note you don&#39;t have to say Signal.RED</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// in the case statement:</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> RED</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> color </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Signal.GREEN;</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">break</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> GREEN</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> color </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Signal.YELLOW;</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">break</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> YELLOW</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> color </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Signal.RED;</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">break</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> String </span><span style="color:#6F42C1;">toString</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;The traffic light is &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> color;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        TrafficLight t </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TrafficLight</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">for</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">7</span><span style="color:#24292E;">; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(t);</span></span>
<span class="line"><span style="color:#24292E;">            t.</span><span style="color:#6F42C1;">change</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>输出为：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">The traffic light is RED</span></span>
<span class="line"><span style="color:#e1e4e8;">The traffic light is GREEN</span></span>
<span class="line"><span style="color:#e1e4e8;">The traffic light is YELLOW</span></span>
<span class="line"><span style="color:#e1e4e8;">The traffic light is RED</span></span>
<span class="line"><span style="color:#e1e4e8;">The traffic light is GREEN</span></span>
<span class="line"><span style="color:#e1e4e8;">The traffic light is YELLOW</span></span>
<span class="line"><span style="color:#e1e4e8;">The traffic light is RED</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">The traffic light is RED</span></span>
<span class="line"><span style="color:#24292e;">The traffic light is GREEN</span></span>
<span class="line"><span style="color:#24292e;">The traffic light is YELLOW</span></span>
<span class="line"><span style="color:#24292e;">The traffic light is RED</span></span>
<span class="line"><span style="color:#24292e;">The traffic light is GREEN</span></span>
<span class="line"><span style="color:#24292e;">The traffic light is YELLOW</span></span>
<span class="line"><span style="color:#24292e;">The traffic light is RED</span></span></code></pre></div><p>编译器并没有抱怨 switch 中没有 default 语句，但这并不是因为每一个 Signal 都有对应的 case 语句。如果你注释掉其中的某个 case 语句，编译器同样不会抱怨什么。这意味着，你必须确保自己覆盖了所有的分支。但是，如果在 case 语句中调用 return，那么编译器就会抱怨缺少 default 语句了。这与是否覆盖了 enum 的所有实例无关。</p><h2 id="values-方法的神秘之处" tabindex="-1">values 方法的神秘之处 <a class="header-anchor" href="#values-方法的神秘之处" aria-label="Permalink to &quot;values 方法的神秘之处&quot;">​</a></h2><p>前面已经提到，编译器为你创建的 enum 类都继承自 Enum 类。然而，如果你研究一下 Enum 类就会发现，它并没有 values() 方法。可我们明明已经用过该方法了，难道存在某种“隐藏的”方法吗？我们可以利用反射机制编写一个简单的程序，来查看其中的究竟：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// enums/Reflection.java</span></span>
<span class="line"><span style="color:#6A737D;">// Analyzing enums using reflection</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> java.lang.reflect.</span><span style="color:#79B8FF;">*</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> java.util.</span><span style="color:#79B8FF;">*</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> onjava.</span><span style="color:#79B8FF;">*</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">enum</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Explore</span><span style="color:#E1E4E8;"> { </span><span style="color:#79B8FF;">HERE</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">THERE</span><span style="color:#E1E4E8;"> }</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Reflection</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span></span>
<span class="line"><span style="color:#E1E4E8;">    Set&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">analyze</span><span style="color:#E1E4E8;">(Class&lt;</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#FFAB70;">enumClass</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#9ECBFF;">&quot;_____ Analyzing &quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> enumClass </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot; _____&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Interfaces:&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;">(Type t </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> enumClass.</span><span style="color:#B392F0;">getGenericInterfaces</span><span style="color:#E1E4E8;">())</span></span>
<span class="line"><span style="color:#E1E4E8;">            System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(t);</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#9ECBFF;">&quot;Base: &quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> enumClass.</span><span style="color:#B392F0;">getSuperclass</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Methods: &quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        Set&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; methods </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> TreeSet&lt;&gt;();</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;">(Method m </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> enumClass.</span><span style="color:#B392F0;">getMethods</span><span style="color:#E1E4E8;">())</span></span>
<span class="line"><span style="color:#E1E4E8;">            methods.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(m.</span><span style="color:#B392F0;">getName</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(methods);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> methods;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] </span><span style="color:#FFAB70;">args</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        Set&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; exploreMethods </span><span style="color:#F97583;">=</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#B392F0;">analyze</span><span style="color:#E1E4E8;">(Explore.class);</span></span>
<span class="line"><span style="color:#E1E4E8;">        Set&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; enumMethods </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">analyze</span><span style="color:#E1E4E8;">(Enum.class);</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#9ECBFF;">&quot;Explore.containsAll(Enum)? &quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span></span>
<span class="line"><span style="color:#E1E4E8;">                        exploreMethods.</span><span style="color:#B392F0;">containsAll</span><span style="color:#E1E4E8;">(enumMethods));</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">print</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Explore.removeAll(Enum): &quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        exploreMethods.</span><span style="color:#B392F0;">removeAll</span><span style="color:#E1E4E8;">(enumMethods);</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(exploreMethods);</span></span>
<span class="line"><span style="color:#6A737D;">// Decompile the code for the enum:</span></span>
<span class="line"><span style="color:#E1E4E8;">        OSExecute.</span><span style="color:#B392F0;">command</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#9ECBFF;">&quot;javap -cp build/classes/main Explore&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// enums/Reflection.java</span></span>
<span class="line"><span style="color:#6A737D;">// Analyzing enums using reflection</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> java.lang.reflect.</span><span style="color:#005CC5;">*</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> java.util.</span><span style="color:#005CC5;">*</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> onjava.</span><span style="color:#005CC5;">*</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">enum</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Explore</span><span style="color:#24292E;"> { </span><span style="color:#005CC5;">HERE</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">THERE</span><span style="color:#24292E;"> }</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Reflection</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span></span>
<span class="line"><span style="color:#24292E;">    Set&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">analyze</span><span style="color:#24292E;">(Class&lt;</span><span style="color:#D73A49;">?</span><span style="color:#24292E;">&gt; </span><span style="color:#E36209;">enumClass</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#032F62;">&quot;_____ Analyzing &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> enumClass </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot; _____&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Interfaces:&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">for</span><span style="color:#24292E;">(Type t </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> enumClass.</span><span style="color:#6F42C1;">getGenericInterfaces</span><span style="color:#24292E;">())</span></span>
<span class="line"><span style="color:#24292E;">            System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(t);</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#032F62;">&quot;Base: &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> enumClass.</span><span style="color:#6F42C1;">getSuperclass</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Methods: &quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        Set&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; methods </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> TreeSet&lt;&gt;();</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">for</span><span style="color:#24292E;">(Method m </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> enumClass.</span><span style="color:#6F42C1;">getMethods</span><span style="color:#24292E;">())</span></span>
<span class="line"><span style="color:#24292E;">            methods.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(m.</span><span style="color:#6F42C1;">getName</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(methods);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> methods;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        Set&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; exploreMethods </span><span style="color:#D73A49;">=</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6F42C1;">analyze</span><span style="color:#24292E;">(Explore.class);</span></span>
<span class="line"><span style="color:#24292E;">        Set&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; enumMethods </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">analyze</span><span style="color:#24292E;">(Enum.class);</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#032F62;">&quot;Explore.containsAll(Enum)? &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span></span>
<span class="line"><span style="color:#24292E;">                        exploreMethods.</span><span style="color:#6F42C1;">containsAll</span><span style="color:#24292E;">(enumMethods));</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Explore.removeAll(Enum): &quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        exploreMethods.</span><span style="color:#6F42C1;">removeAll</span><span style="color:#24292E;">(enumMethods);</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(exploreMethods);</span></span>
<span class="line"><span style="color:#6A737D;">// Decompile the code for the enum:</span></span>
<span class="line"><span style="color:#24292E;">        OSExecute.</span><span style="color:#6F42C1;">command</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#032F62;">&quot;javap -cp build/classes/main Explore&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>输出为：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">_____ Analyzing </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Explore</span><span style="color:#E1E4E8;"> _____</span></span>
<span class="line"><span style="color:#E1E4E8;">Interfaces:</span></span>
<span class="line"><span style="color:#E1E4E8;">Base: </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">java</span><span style="color:#E1E4E8;">.lang.Enum</span></span>
<span class="line"><span style="color:#E1E4E8;">Methods:</span></span>
<span class="line"><span style="color:#E1E4E8;">[compareTo, equals, getClass, getDeclaringClass,</span></span>
<span class="line"><span style="color:#E1E4E8;">hashCode, name, notify, notifyAll, ordinal, toString,</span></span>
<span class="line"><span style="color:#E1E4E8;">valueOf, values, wait]</span></span>
<span class="line"><span style="color:#E1E4E8;">_____ Analyzing </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">java</span><span style="color:#E1E4E8;">.lang.Enum _____</span></span>
<span class="line"><span style="color:#E1E4E8;">Interfaces:</span></span>
<span class="line"><span style="color:#E1E4E8;">java.lang.Comparable&lt;</span><span style="color:#F97583;">E</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">java</span><span style="color:#E1E4E8;">.io.Serializable</span></span>
<span class="line"><span style="color:#E1E4E8;">Base: </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">java</span><span style="color:#E1E4E8;">.lang.Object</span></span>
<span class="line"><span style="color:#E1E4E8;">Methods:</span></span>
<span class="line"><span style="color:#E1E4E8;">[compareTo, equals, getClass, getDeclaringClass,</span></span>
<span class="line"><span style="color:#E1E4E8;">hashCode, name, notify, notifyAll, ordinal, toString,</span></span>
<span class="line"><span style="color:#E1E4E8;">valueOf, wait]</span></span>
<span class="line"><span style="color:#E1E4E8;">Explore.containsAll(Enum)? true</span></span>
<span class="line"><span style="color:#E1E4E8;">Explore.removeAll(Enum): [values]</span></span>
<span class="line"><span style="color:#E1E4E8;">Compiled from &quot;Reflection.java&quot;</span></span>
<span class="line"><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Explore</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> java.lang.</span><span style="color:#B392F0;">Enum</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#F97583;">Explore</span><span style="color:#E1E4E8;">&gt; {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> Explore HERE;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> Explore THERE;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">Explore</span><span style="color:#E1E4E8;">[] </span><span style="color:#B392F0;">values</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> Explore </span><span style="color:#B392F0;">valueOf</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">java</span><span style="color:#E1E4E8;">.</span><span style="color:#FFAB70;">lang</span><span style="color:#E1E4E8;">.</span><span style="color:#FFAB70;">String</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> {};</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">_____ Analyzing </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Explore</span><span style="color:#24292E;"> _____</span></span>
<span class="line"><span style="color:#24292E;">Interfaces:</span></span>
<span class="line"><span style="color:#24292E;">Base: </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">java</span><span style="color:#24292E;">.lang.Enum</span></span>
<span class="line"><span style="color:#24292E;">Methods:</span></span>
<span class="line"><span style="color:#24292E;">[compareTo, equals, getClass, getDeclaringClass,</span></span>
<span class="line"><span style="color:#24292E;">hashCode, name, notify, notifyAll, ordinal, toString,</span></span>
<span class="line"><span style="color:#24292E;">valueOf, values, wait]</span></span>
<span class="line"><span style="color:#24292E;">_____ Analyzing </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">java</span><span style="color:#24292E;">.lang.Enum _____</span></span>
<span class="line"><span style="color:#24292E;">Interfaces:</span></span>
<span class="line"><span style="color:#24292E;">java.lang.Comparable&lt;</span><span style="color:#D73A49;">E</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">java</span><span style="color:#24292E;">.io.Serializable</span></span>
<span class="line"><span style="color:#24292E;">Base: </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">java</span><span style="color:#24292E;">.lang.Object</span></span>
<span class="line"><span style="color:#24292E;">Methods:</span></span>
<span class="line"><span style="color:#24292E;">[compareTo, equals, getClass, getDeclaringClass,</span></span>
<span class="line"><span style="color:#24292E;">hashCode, name, notify, notifyAll, ordinal, toString,</span></span>
<span class="line"><span style="color:#24292E;">valueOf, wait]</span></span>
<span class="line"><span style="color:#24292E;">Explore.containsAll(Enum)? true</span></span>
<span class="line"><span style="color:#24292E;">Explore.removeAll(Enum): [values]</span></span>
<span class="line"><span style="color:#24292E;">Compiled from &quot;Reflection.java&quot;</span></span>
<span class="line"><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Explore</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> java.lang.</span><span style="color:#6F42C1;">Enum</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">Explore</span><span style="color:#24292E;">&gt; {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> Explore HERE;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> Explore THERE;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">Explore</span><span style="color:#24292E;">[] </span><span style="color:#6F42C1;">values</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> Explore </span><span style="color:#6F42C1;">valueOf</span><span style="color:#24292E;">(</span><span style="color:#E36209;">java</span><span style="color:#24292E;">.</span><span style="color:#E36209;">lang</span><span style="color:#24292E;">.</span><span style="color:#E36209;">String</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> {};</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>答案是，values() 是由编译器添加的 static 方法。可以看出，在创建 Explore 的过程中，编译器还为其添加了 valueOf() 方法。这可能有点令人迷惑，Enum 类不是已经有 valueOf() 方法了吗。</p><p>不过 Enum 中的 valueOf() 方法需要两个参数，而这个新增的方法只需一个参数。由于这里使用的 Set 只存储方法的名字，而不考虑方法的签名，所以在调用 Explore.removeAll(Enum) 之后，就只剩下[values] 了。</p><p>从最后的输出中可以看到，编译器将 Explore 标记为 final 类，所以无法继承自 enum，其中还有一个 static 的初始化子句，稍后我们将学习如何重定义该句。</p><p>由于擦除效应（在<a href="./.html">泛型 </a> 章节中介绍过），反编译无法得到 Enum 的完整信息，所以它展示的 Explore 的父类只是一个原始的 Enum，而非事实上的 Enum&lt;Explore&gt;。</p><p>由于 values() 方法是由编译器插入到 enum 定义中的 static 方法，所以，如果你将 enum 实例向上转型为 Enum，那么 values() 方法就不可访问了。不过，在 Class 中有一个 getEnumConstants0 方法，所以即便 Enum 接口中没有 values0 方法，我们仍然可以通过 Class 对象取得所有 enum 实例。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// enums/UpcastEnum.java</span></span>
<span class="line"><span style="color:#6A737D;">// No values() method if you upcast an enum</span></span>
<span class="line"><span style="color:#F97583;">enum</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Search</span><span style="color:#E1E4E8;"> { </span><span style="color:#79B8FF;">HITHER</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">YON</span><span style="color:#E1E4E8;"> }</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">UpcastEnum</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] </span><span style="color:#FFAB70;">args</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">Search</span><span style="color:#E1E4E8;">[] vals </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Search.</span><span style="color:#B392F0;">values</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        Enum e </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Search.HITHER; </span><span style="color:#6A737D;">// Upcast</span></span>
<span class="line"><span style="color:#6A737D;">// e.values(); // No values() in Enum</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;">(Enum en </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> e.</span><span style="color:#B392F0;">getClass</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">getEnumConstants</span><span style="color:#E1E4E8;">())</span></span>
<span class="line"><span style="color:#E1E4E8;">            System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(en);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// enums/UpcastEnum.java</span></span>
<span class="line"><span style="color:#6A737D;">// No values() method if you upcast an enum</span></span>
<span class="line"><span style="color:#D73A49;">enum</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Search</span><span style="color:#24292E;"> { </span><span style="color:#005CC5;">HITHER</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">YON</span><span style="color:#24292E;"> }</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">UpcastEnum</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">Search</span><span style="color:#24292E;">[] vals </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Search.</span><span style="color:#6F42C1;">values</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        Enum e </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Search.HITHER; </span><span style="color:#6A737D;">// Upcast</span></span>
<span class="line"><span style="color:#6A737D;">// e.values(); // No values() in Enum</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">for</span><span style="color:#24292E;">(Enum en </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> e.</span><span style="color:#6F42C1;">getClass</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">getEnumConstants</span><span style="color:#24292E;">())</span></span>
<span class="line"><span style="color:#24292E;">            System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(en);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>输出为：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">HITHER</span></span>
<span class="line"><span style="color:#e1e4e8;">YON</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">HITHER</span></span>
<span class="line"><span style="color:#24292e;">YON</span></span></code></pre></div><p>因为 getEnumConstants() 是 Class 上的方法，所以你甚至可以对不是枚举的类调用此方法：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// enums/NonEnum.java</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">NonEnum</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] </span><span style="color:#FFAB70;">args</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        Class&lt;</span><span style="color:#F97583;">Integer</span><span style="color:#E1E4E8;">&gt; intClass </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Integer.class;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;">(Object en </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> intClass.</span><span style="color:#B392F0;">getEnumConstants</span><span style="color:#E1E4E8;">())</span></span>
<span class="line"><span style="color:#E1E4E8;">                System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(en);</span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;">(Exception </span><span style="color:#FFAB70;">e</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Expected: &quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> e);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// enums/NonEnum.java</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">NonEnum</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        Class&lt;</span><span style="color:#D73A49;">Integer</span><span style="color:#24292E;">&gt; intClass </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Integer.class;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">for</span><span style="color:#24292E;">(Object en </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> intClass.</span><span style="color:#6F42C1;">getEnumConstants</span><span style="color:#24292E;">())</span></span>
<span class="line"><span style="color:#24292E;">                System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(en);</span></span>
<span class="line"><span style="color:#24292E;">        } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;">(Exception </span><span style="color:#E36209;">e</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Expected: &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> e);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>输出为：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Expected</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> java.lang.NullPointerException</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Expected</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> java.lang.NullPointerException</span></span></code></pre></div><p>只不过，此时该方法返回 null，所以当你试图使用其返回的结果时会发生异常。</p><h2 id="实现而非继承" tabindex="-1">实现而非继承 <a class="header-anchor" href="#实现而非继承" aria-label="Permalink to &quot;实现而非继承&quot;">​</a></h2><p>我们已经知道，所有的 enum 都继承自 Java.lang.Enum 类。由于 Java 不支持多重继承，所以你的 enum 不能再继承其他类：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">enum</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">NotPossible</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Pet</span><span style="color:#E1E4E8;"> { ... </span><span style="color:#6A737D;">// Won&#39;t work</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">enum</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">NotPossible</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Pet</span><span style="color:#24292E;"> { ... </span><span style="color:#6A737D;">// Won&#39;t work</span></span></code></pre></div><p>然而，在我们创建一个新的 enum 时，可以同时实现一个或多个接口：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// enums/cartoons/EnumImplementation.java</span></span>
<span class="line"><span style="color:#6A737D;">// An enum can implement an interface</span></span>
<span class="line"><span style="color:#6A737D;">// {java enums.cartoons.EnumImplementation}</span></span>
<span class="line"><span style="color:#F97583;">package</span><span style="color:#E1E4E8;"> enums.cartoons;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> java.util.</span><span style="color:#79B8FF;">*</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> java.util.function.</span><span style="color:#79B8FF;">*</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">enum</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">CartoonCharacter</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">implements</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Supplier</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#F97583;">CartoonCharacter</span><span style="color:#E1E4E8;">&gt; {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">SLAPPY</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">SPANKY</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">PUNCHY</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">SILLY</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">BOUNCY</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">NUTTY</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">BOB</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> Random rand </span><span style="color:#F97583;">=</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Random</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">47</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> CartoonCharacter </span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">values</span><span style="color:#E1E4E8;">()[rand.</span><span style="color:#B392F0;">nextInt</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">values</span><span style="color:#E1E4E8;">().length)];</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">EnumImplementation</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> &lt;</span><span style="color:#F97583;">T</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">printNext</span><span style="color:#E1E4E8;">(Supplier&lt;</span><span style="color:#F97583;">T</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#FFAB70;">rg</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">print</span><span style="color:#E1E4E8;">(rg.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;, &quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] </span><span style="color:#FFAB70;">args</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#6A737D;">// Choose any instance:</span></span>
<span class="line"><span style="color:#E1E4E8;">        CartoonCharacter cc </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> CartoonCharacter.BOB;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">; i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#B392F0;">printNext</span><span style="color:#E1E4E8;">(cc);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// enums/cartoons/EnumImplementation.java</span></span>
<span class="line"><span style="color:#6A737D;">// An enum can implement an interface</span></span>
<span class="line"><span style="color:#6A737D;">// {java enums.cartoons.EnumImplementation}</span></span>
<span class="line"><span style="color:#D73A49;">package</span><span style="color:#24292E;"> enums.cartoons;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> java.util.</span><span style="color:#005CC5;">*</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> java.util.function.</span><span style="color:#005CC5;">*</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">enum</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">CartoonCharacter</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Supplier</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">CartoonCharacter</span><span style="color:#24292E;">&gt; {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">SLAPPY</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">SPANKY</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">PUNCHY</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">SILLY</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">BOUNCY</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">NUTTY</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">BOB</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> Random rand </span><span style="color:#D73A49;">=</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Random</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">47</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> CartoonCharacter </span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">values</span><span style="color:#24292E;">()[rand.</span><span style="color:#6F42C1;">nextInt</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">values</span><span style="color:#24292E;">().length)];</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">EnumImplementation</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> &lt;</span><span style="color:#D73A49;">T</span><span style="color:#24292E;">&gt; </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">printNext</span><span style="color:#24292E;">(Supplier&lt;</span><span style="color:#D73A49;">T</span><span style="color:#24292E;">&gt; </span><span style="color:#E36209;">rg</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">print</span><span style="color:#24292E;">(rg.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;, &quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#6A737D;">// Choose any instance:</span></span>
<span class="line"><span style="color:#24292E;">        CartoonCharacter cc </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> CartoonCharacter.BOB;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">for</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">10</span><span style="color:#24292E;">; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6F42C1;">printNext</span><span style="color:#24292E;">(cc);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>输出为：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">BOB, PUNCHY, BOB, SPANKY, NUTTY, PUNCHY, SLAPPY, NUTTY,</span></span>
<span class="line"><span style="color:#e1e4e8;">NUTTY, SLAPPY,</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">BOB, PUNCHY, BOB, SPANKY, NUTTY, PUNCHY, SLAPPY, NUTTY,</span></span>
<span class="line"><span style="color:#24292e;">NUTTY, SLAPPY,</span></span></code></pre></div><p>这个结果有点奇怪，不过你必须要有一个 enum 实例才能调用其上的方法。现在，在任何接受 Supplier 参数的方法中，例如 printNext()，都可以使用 CartoonCharacter。</p><h2 id="随机选择" tabindex="-1">随机选择 <a class="header-anchor" href="#随机选择" aria-label="Permalink to &quot;随机选择&quot;">​</a></h2><p>就像你在 CartoonCharacter.get() 中看到的那样，本章中的很多示例都需要从 enum 实例中进行随机选择。我们可以利用泛型，从而使得这个工作更一般化，并将其加入到我们的工具库中。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// onjava/Enums.java</span></span>
<span class="line"><span style="color:#F97583;">package</span><span style="color:#E1E4E8;"> onjava;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> java.util.</span><span style="color:#79B8FF;">*</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Enums</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> Random rand </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Random</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">47</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> &lt;</span><span style="color:#F97583;">T</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> Enum&lt;</span><span style="color:#F97583;">T</span><span style="color:#E1E4E8;">&gt;&gt; T </span><span style="color:#B392F0;">random</span><span style="color:#E1E4E8;">(Class&lt;</span><span style="color:#F97583;">T</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#FFAB70;">ec</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">random</span><span style="color:#E1E4E8;">(ec.</span><span style="color:#B392F0;">getEnumConstants</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> &lt;</span><span style="color:#F97583;">T</span><span style="color:#E1E4E8;">&gt; T </span><span style="color:#B392F0;">random</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">T</span><span style="color:#E1E4E8;">[] </span><span style="color:#FFAB70;">values</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> values[rand.</span><span style="color:#B392F0;">nextInt</span><span style="color:#E1E4E8;">(values.length)];</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// onjava/Enums.java</span></span>
<span class="line"><span style="color:#D73A49;">package</span><span style="color:#24292E;"> onjava;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> java.util.</span><span style="color:#005CC5;">*</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Enums</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> Random rand </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Random</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">47</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> &lt;</span><span style="color:#D73A49;">T</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> Enum&lt;</span><span style="color:#D73A49;">T</span><span style="color:#24292E;">&gt;&gt; T </span><span style="color:#6F42C1;">random</span><span style="color:#24292E;">(Class&lt;</span><span style="color:#D73A49;">T</span><span style="color:#24292E;">&gt; </span><span style="color:#E36209;">ec</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">random</span><span style="color:#24292E;">(ec.</span><span style="color:#6F42C1;">getEnumConstants</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> &lt;</span><span style="color:#D73A49;">T</span><span style="color:#24292E;">&gt; T </span><span style="color:#6F42C1;">random</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">T</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">values</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> values[rand.</span><span style="color:#6F42C1;">nextInt</span><span style="color:#24292E;">(values.length)];</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>古怪的语法&lt;T extends Enum&lt;T&gt;&gt; 表示 T 是一个 enum 实例。而将 Class&lt;T&gt; 作为参数的话，我们就可以利用 Class 对象得到 enum 实例的数组了。重载后的 random() 方法只需使用 T[] 作为参数，因为它并不会调用 Enum 上的任何操作，它只需从数组中随机选择一个元素即可。这样，最终的返回类型正是 enum 的类型。</p><p>下面是 random() 方法的一个简单示例：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// enums/RandomTest.java</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> onjava.</span><span style="color:#79B8FF;">*</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">enum</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Activity</span><span style="color:#E1E4E8;"> { </span><span style="color:#79B8FF;">SITTING</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">LYING</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">STANDING</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">HOPPING</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">RUNNING</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">DODGING</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">JUMPING</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">FALLING</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">FLYING</span><span style="color:#E1E4E8;"> }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">RandomTest</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] </span><span style="color:#FFAB70;">args</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">20</span><span style="color:#E1E4E8;">; i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">            System.out.</span><span style="color:#B392F0;">print</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">                    Enums.</span><span style="color:#B392F0;">random</span><span style="color:#E1E4E8;">(Activity.class) </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot; &quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// enums/RandomTest.java</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> onjava.</span><span style="color:#005CC5;">*</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">enum</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Activity</span><span style="color:#24292E;"> { </span><span style="color:#005CC5;">SITTING</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">LYING</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">STANDING</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">HOPPING</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">RUNNING</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">DODGING</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">JUMPING</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">FALLING</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">FLYING</span><span style="color:#24292E;"> }</span></span>
<span class="line"><span style="color:#24292E;">    </span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">RandomTest</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">for</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">20</span><span style="color:#24292E;">; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">            System.out.</span><span style="color:#6F42C1;">print</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">                    Enums.</span><span style="color:#6F42C1;">random</span><span style="color:#24292E;">(Activity.class) </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot; &quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>输出为：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">STANDING FLYING RUNNING STANDING RUNNING STANDING LYING</span></span>
<span class="line"><span style="color:#e1e4e8;">DODGING SITTING RUNNING HOPPING HOPPING HOPPING RUNNING</span></span>
<span class="line"><span style="color:#e1e4e8;">STANDING LYING FALLING RUNNING FLYING LYING</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">STANDING FLYING RUNNING STANDING RUNNING STANDING LYING</span></span>
<span class="line"><span style="color:#24292e;">DODGING SITTING RUNNING HOPPING HOPPING HOPPING RUNNING</span></span>
<span class="line"><span style="color:#24292e;">STANDING LYING FALLING RUNNING FLYING LYING</span></span></code></pre></div><h2 id="使用接口组织枚举" tabindex="-1">使用接口组织枚举 <a class="header-anchor" href="#使用接口组织枚举" aria-label="Permalink to &quot;使用接口组织枚举&quot;">​</a></h2><p>无法从 enum 继承子类有时很令人沮丧。这种需求有时源自我们希望扩展原 enum 中的元素，有时是因为我们希望使用子类将一个 enum 中的元素进行分组。</p><p>在一个接口的内部，创建实现该接口的枚举，以此将元素进行分组，可以达到将枚举元素分类组织的目的。举例来说，假设你想用 enum 来表示不同类别的食物，同时还希望每个 enum 元素仍然保持 Food 类型。那可以这样实现：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// enums/menu/Food.java</span></span>
<span class="line"><span style="color:#6A737D;">// Subcategorization of enums within interfaces</span></span>
<span class="line"><span style="color:#F97583;">package</span><span style="color:#E1E4E8;"> enums.menu;</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Food</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">enum</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Appetizer</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">implements</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Food</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">SALAD</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">SOUP</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">SPRING_ROLLS</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">enum</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MainCourse</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">implements</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Food</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">LASAGNE</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">BURRITO</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">PAD_THAI</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">LENTILS</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">HUMMOUS</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">VINDALOO</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">enum</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Dessert</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">implements</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Food</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">TIRAMISU</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">GELATO</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">BLACK_FOREST_CAKE</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">FRUIT</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">CREME_CARAMEL</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">enum</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Coffee</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">implements</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Food</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">BLACK_COFFEE</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">DECAF_COFFEE</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">ESPRESSO</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">LATTE</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">CAPPUCCINO</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">TEA</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">HERB_TEA</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// enums/menu/Food.java</span></span>
<span class="line"><span style="color:#6A737D;">// Subcategorization of enums within interfaces</span></span>
<span class="line"><span style="color:#D73A49;">package</span><span style="color:#24292E;"> enums.menu;</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Food</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">enum</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Appetizer</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Food</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">SALAD</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">SOUP</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">SPRING_ROLLS</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">enum</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MainCourse</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Food</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">LASAGNE</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">BURRITO</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">PAD_THAI</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">LENTILS</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">HUMMOUS</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">VINDALOO</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">enum</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Dessert</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Food</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">TIRAMISU</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">GELATO</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">BLACK_FOREST_CAKE</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">FRUIT</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">CREME_CARAMEL</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">enum</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Coffee</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Food</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">BLACK_COFFEE</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">DECAF_COFFEE</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">ESPRESSO</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">LATTE</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">CAPPUCCINO</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">TEA</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">HERB_TEA</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>对于 enum 而言，实现接口是使其子类化的唯一办法，所以嵌入在 Food 中的每个 enum 都实现了 Food 接口。现在，在下面的程序中，我们可以说“所有东西都是某种类型的 Food&quot;。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// enums/menu/TypeOfFood.java</span></span>
<span class="line"><span style="color:#6A737D;">// {java enums.menu.TypeOfFood}</span></span>
<span class="line"><span style="color:#F97583;">package</span><span style="color:#E1E4E8;"> enums.menu;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> enums.menu.Food.</span><span style="color:#79B8FF;">*</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">TypeOfFood</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] </span><span style="color:#FFAB70;">args</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        Food food </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Appetizer.SALAD;</span></span>
<span class="line"><span style="color:#E1E4E8;">        food </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> MainCourse.LASAGNE;</span></span>
<span class="line"><span style="color:#E1E4E8;">        food </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Dessert.GELATO;</span></span>
<span class="line"><span style="color:#E1E4E8;">        food </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Coffee.CAPPUCCINO;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// enums/menu/TypeOfFood.java</span></span>
<span class="line"><span style="color:#6A737D;">// {java enums.menu.TypeOfFood}</span></span>
<span class="line"><span style="color:#D73A49;">package</span><span style="color:#24292E;"> enums.menu;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> enums.menu.Food.</span><span style="color:#005CC5;">*</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TypeOfFood</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        Food food </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Appetizer.SALAD;</span></span>
<span class="line"><span style="color:#24292E;">        food </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> MainCourse.LASAGNE;</span></span>
<span class="line"><span style="color:#24292E;">        food </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Dessert.GELATO;</span></span>
<span class="line"><span style="color:#24292E;">        food </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Coffee.CAPPUCCINO;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>如果 enum 类型实现了 Food 接口，那么我们就可以将其实例向上转型为 Food，所以上例中的所有东西都是 Food。</p><p>然而，当你需要与一大堆类型打交道时，接口就不如 enum 好用了。例如，如果你想创建一个“校举的枚举”，那么可以创建一个新的 enum，然后用其实例包装 Food 中的每一个 enum 类：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// enums/menu/Course.java</span></span>
<span class="line"><span style="color:#F97583;">package</span><span style="color:#E1E4E8;"> enums.menu;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> onjava.</span><span style="color:#79B8FF;">*</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">enum</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Course</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">APPETIZER</span><span style="color:#E1E4E8;">(Food.Appetizer.class),</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">MAINCOURSE</span><span style="color:#E1E4E8;">(Food.MainCourse.class),</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">DESSERT</span><span style="color:#E1E4E8;">(Food.Dessert.class),</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">COFFEE</span><span style="color:#E1E4E8;">(Food.Coffee.class);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">Food</span><span style="color:#E1E4E8;">[] values;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Course</span><span style="color:#E1E4E8;">(Class&lt;</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">Food</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#FFAB70;">kind</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        values </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> kind.</span><span style="color:#B392F0;">getEnumConstants</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> Food </span><span style="color:#B392F0;">randomSelection</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> Enums.</span><span style="color:#B392F0;">random</span><span style="color:#E1E4E8;">(values);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// enums/menu/Course.java</span></span>
<span class="line"><span style="color:#D73A49;">package</span><span style="color:#24292E;"> enums.menu;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> onjava.</span><span style="color:#005CC5;">*</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">enum</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Course</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">APPETIZER</span><span style="color:#24292E;">(Food.Appetizer.class),</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">MAINCOURSE</span><span style="color:#24292E;">(Food.MainCourse.class),</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">DESSERT</span><span style="color:#24292E;">(Food.Dessert.class),</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">COFFEE</span><span style="color:#24292E;">(Food.Coffee.class);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">Food</span><span style="color:#24292E;">[] values;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Course</span><span style="color:#24292E;">(Class&lt;</span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">Food</span><span style="color:#24292E;">&gt; </span><span style="color:#E36209;">kind</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        values </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> kind.</span><span style="color:#6F42C1;">getEnumConstants</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Food </span><span style="color:#6F42C1;">randomSelection</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> Enums.</span><span style="color:#6F42C1;">random</span><span style="color:#24292E;">(values);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>每一个 Course 的实例都将其对应的 Class 对象作为构造器的参数。通过 getEnumConstants0 方法，可以从该 Class 对象中取得某个 Food 子类的所有 enum 实例。这些实例在 randomSelection() 中被用到。因此，通过从每一个 Course 实例中随机地选择一个 Food，我们便能够生成一份菜单：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// enums/menu/Meal.java</span></span>
<span class="line"><span style="color:#6A737D;">// {java enums.menu.Meal}</span></span>
<span class="line"><span style="color:#F97583;">package</span><span style="color:#E1E4E8;"> enums.menu;</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Meal</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] </span><span style="color:#FFAB70;">args</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">; i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;">(Course course </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> Course.</span><span style="color:#B392F0;">values</span><span style="color:#E1E4E8;">()) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                Food food </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> course.</span><span style="color:#B392F0;">randomSelection</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">                System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(food);</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">            System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;***&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// enums/menu/Meal.java</span></span>
<span class="line"><span style="color:#6A737D;">// {java enums.menu.Meal}</span></span>
<span class="line"><span style="color:#D73A49;">package</span><span style="color:#24292E;"> enums.menu;</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Meal</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">for</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">5</span><span style="color:#24292E;">; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">for</span><span style="color:#24292E;">(Course course </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> Course.</span><span style="color:#6F42C1;">values</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">                Food food </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> course.</span><span style="color:#6F42C1;">randomSelection</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">                System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(food);</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">            System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;***&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>输出为：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">SPRING_ROLLS</span></span>
<span class="line"><span style="color:#e1e4e8;">VINDALOO</span></span>
<span class="line"><span style="color:#e1e4e8;">FRUIT</span></span>
<span class="line"><span style="color:#e1e4e8;">DECAF_COFFEE</span></span>
<span class="line"><span style="color:#e1e4e8;">***</span></span>
<span class="line"><span style="color:#e1e4e8;">SOUP</span></span>
<span class="line"><span style="color:#e1e4e8;">VINDALOO</span></span>
<span class="line"><span style="color:#e1e4e8;">FRUIT</span></span>
<span class="line"><span style="color:#e1e4e8;">TEA</span></span>
<span class="line"><span style="color:#e1e4e8;">***</span></span>
<span class="line"><span style="color:#e1e4e8;">SALAD</span></span>
<span class="line"><span style="color:#e1e4e8;">BURRITO</span></span>
<span class="line"><span style="color:#e1e4e8;">FRUIT</span></span>
<span class="line"><span style="color:#e1e4e8;">TEA</span></span>
<span class="line"><span style="color:#e1e4e8;">***</span></span>
<span class="line"><span style="color:#e1e4e8;">SALAD</span></span>
<span class="line"><span style="color:#e1e4e8;">BURRITO</span></span>
<span class="line"><span style="color:#e1e4e8;">CREME_CARAMEL</span></span>
<span class="line"><span style="color:#e1e4e8;">LATTE</span></span>
<span class="line"><span style="color:#e1e4e8;">***</span></span>
<span class="line"><span style="color:#e1e4e8;">SOUP</span></span>
<span class="line"><span style="color:#e1e4e8;">BURRITO</span></span>
<span class="line"><span style="color:#e1e4e8;">TIRAMISU</span></span>
<span class="line"><span style="color:#e1e4e8;">ESPRESSO</span></span>
<span class="line"><span style="color:#e1e4e8;">***</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">SPRING_ROLLS</span></span>
<span class="line"><span style="color:#24292e;">VINDALOO</span></span>
<span class="line"><span style="color:#24292e;">FRUIT</span></span>
<span class="line"><span style="color:#24292e;">DECAF_COFFEE</span></span>
<span class="line"><span style="color:#24292e;">***</span></span>
<span class="line"><span style="color:#24292e;">SOUP</span></span>
<span class="line"><span style="color:#24292e;">VINDALOO</span></span>
<span class="line"><span style="color:#24292e;">FRUIT</span></span>
<span class="line"><span style="color:#24292e;">TEA</span></span>
<span class="line"><span style="color:#24292e;">***</span></span>
<span class="line"><span style="color:#24292e;">SALAD</span></span>
<span class="line"><span style="color:#24292e;">BURRITO</span></span>
<span class="line"><span style="color:#24292e;">FRUIT</span></span>
<span class="line"><span style="color:#24292e;">TEA</span></span>
<span class="line"><span style="color:#24292e;">***</span></span>
<span class="line"><span style="color:#24292e;">SALAD</span></span>
<span class="line"><span style="color:#24292e;">BURRITO</span></span>
<span class="line"><span style="color:#24292e;">CREME_CARAMEL</span></span>
<span class="line"><span style="color:#24292e;">LATTE</span></span>
<span class="line"><span style="color:#24292e;">***</span></span>
<span class="line"><span style="color:#24292e;">SOUP</span></span>
<span class="line"><span style="color:#24292e;">BURRITO</span></span>
<span class="line"><span style="color:#24292e;">TIRAMISU</span></span>
<span class="line"><span style="color:#24292e;">ESPRESSO</span></span>
<span class="line"><span style="color:#24292e;">***</span></span></code></pre></div><p>在这个例子中，我们通过遍历每一个 Course 实例来获得“枚举的枚举”的值。稍后，在 VendingMachine.java 中，我们会看到另一种组织枚举实例的方式，但其也有一些其他的限制。</p><p>此外，还有一种更简洁的管理枚举的办法，就是将一个 enum 嵌套在另一个 enum 内。就像这样：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// enums/SecurityCategory.java</span></span>
<span class="line"><span style="color:#6A737D;">// More succinct subcategorization of enums</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> onjava.</span><span style="color:#79B8FF;">*</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">enum</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SecurityCategory</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">STOCK</span><span style="color:#E1E4E8;">(Security.Stock.class),</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">BOND</span><span style="color:#E1E4E8;">(Security.Bond.class);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">Security</span><span style="color:#E1E4E8;">[] values;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">SecurityCategory</span><span style="color:#E1E4E8;">(Class&lt;</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">Security</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#FFAB70;">kind</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        values </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> kind.</span><span style="color:#B392F0;">getEnumConstants</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Security</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">enum</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Stock</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">implements</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Security</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#79B8FF;">SHORT</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">LONG</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">MARGIN</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">enum</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Bond</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">implements</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Security</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#79B8FF;">MUNICIPAL</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">JUNK</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> Security </span><span style="color:#B392F0;">randomSelection</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> Enums.</span><span style="color:#B392F0;">random</span><span style="color:#E1E4E8;">(values);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] </span><span style="color:#FFAB70;">args</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">; i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            SecurityCategory category </span><span style="color:#F97583;">=</span></span>
<span class="line"><span style="color:#E1E4E8;">                    Enums.</span><span style="color:#B392F0;">random</span><span style="color:#E1E4E8;">(SecurityCategory.class);</span></span>
<span class="line"><span style="color:#E1E4E8;">            System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(category </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;: &quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span></span>
<span class="line"><span style="color:#E1E4E8;">                    category.</span><span style="color:#B392F0;">randomSelection</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// enums/SecurityCategory.java</span></span>
<span class="line"><span style="color:#6A737D;">// More succinct subcategorization of enums</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> onjava.</span><span style="color:#005CC5;">*</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">enum</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SecurityCategory</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">STOCK</span><span style="color:#24292E;">(Security.Stock.class),</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">BOND</span><span style="color:#24292E;">(Security.Bond.class);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">Security</span><span style="color:#24292E;">[] values;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">SecurityCategory</span><span style="color:#24292E;">(Class&lt;</span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">Security</span><span style="color:#24292E;">&gt; </span><span style="color:#E36209;">kind</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        values </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> kind.</span><span style="color:#6F42C1;">getEnumConstants</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Security</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">enum</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Stock</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Security</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#005CC5;">SHORT</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">LONG</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">MARGIN</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">enum</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Bond</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Security</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#005CC5;">MUNICIPAL</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">JUNK</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Security </span><span style="color:#6F42C1;">randomSelection</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> Enums.</span><span style="color:#6F42C1;">random</span><span style="color:#24292E;">(values);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">for</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">10</span><span style="color:#24292E;">; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            SecurityCategory category </span><span style="color:#D73A49;">=</span></span>
<span class="line"><span style="color:#24292E;">                    Enums.</span><span style="color:#6F42C1;">random</span><span style="color:#24292E;">(SecurityCategory.class);</span></span>
<span class="line"><span style="color:#24292E;">            System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(category </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;: &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span></span>
<span class="line"><span style="color:#24292E;">                    category.</span><span style="color:#6F42C1;">randomSelection</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>输出为：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">BOND: MUNICIPAL</span></span>
<span class="line"><span style="color:#e1e4e8;">BOND: MUNICIPAL</span></span>
<span class="line"><span style="color:#e1e4e8;">STOCK: MARGIN</span></span>
<span class="line"><span style="color:#e1e4e8;">STOCK: MARGIN</span></span>
<span class="line"><span style="color:#e1e4e8;">BOND: JUNK</span></span>
<span class="line"><span style="color:#e1e4e8;">STOCK: SHORT</span></span>
<span class="line"><span style="color:#e1e4e8;">STOCK: LONG</span></span>
<span class="line"><span style="color:#e1e4e8;">STOCK: LONG</span></span>
<span class="line"><span style="color:#e1e4e8;">BOND: MUNICIPAL</span></span>
<span class="line"><span style="color:#e1e4e8;">BOND: JUNK</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">BOND: MUNICIPAL</span></span>
<span class="line"><span style="color:#24292e;">BOND: MUNICIPAL</span></span>
<span class="line"><span style="color:#24292e;">STOCK: MARGIN</span></span>
<span class="line"><span style="color:#24292e;">STOCK: MARGIN</span></span>
<span class="line"><span style="color:#24292e;">BOND: JUNK</span></span>
<span class="line"><span style="color:#24292e;">STOCK: SHORT</span></span>
<span class="line"><span style="color:#24292e;">STOCK: LONG</span></span>
<span class="line"><span style="color:#24292e;">STOCK: LONG</span></span>
<span class="line"><span style="color:#24292e;">BOND: MUNICIPAL</span></span>
<span class="line"><span style="color:#24292e;">BOND: JUNK</span></span></code></pre></div><p>Security 接口的作用是将其所包含的 enum 组合成一个公共类型，这一点是有必要的。然后，SecurityCategory 才能将 Security 中的 enum 作为其构造器的参数使用，以起到组织的效果。</p><p>如果我们将这种方式应用于 Food 的例子，结果应该这样：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// enums/menu/Meal2.java</span></span>
<span class="line"><span style="color:#6A737D;">// {java enums.menu.Meal2}</span></span>
<span class="line"><span style="color:#F97583;">package</span><span style="color:#E1E4E8;"> enums.menu;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> onjava.</span><span style="color:#79B8FF;">*</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">enum</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Meal2</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">APPETIZER</span><span style="color:#E1E4E8;">(Food.Appetizer.class),</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">MAINCOURSE</span><span style="color:#E1E4E8;">(Food.MainCourse.class),</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">DESSERT</span><span style="color:#E1E4E8;">(Food.Dessert.class),</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">COFFEE</span><span style="color:#E1E4E8;">(Food.Coffee.class);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">Food</span><span style="color:#E1E4E8;">[] values;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Meal2</span><span style="color:#E1E4E8;">(Class&lt;</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">Food</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#FFAB70;">kind</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        values </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> kind.</span><span style="color:#B392F0;">getEnumConstants</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Food</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">enum</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Appetizer</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">implements</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Food</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#79B8FF;">SALAD</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">SOUP</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">SPRING_ROLLS</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">enum</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MainCourse</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">implements</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Food</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#79B8FF;">LASAGNE</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">BURRITO</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">PAD_THAI</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#79B8FF;">LENTILS</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">HUMMOUS</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">VINDALOO</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">enum</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Dessert</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">implements</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Food</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#79B8FF;">TIRAMISU</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">GELATO</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">BLACK_FOREST_CAKE</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#79B8FF;">FRUIT</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">CREME_CARAMEL</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">enum</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Coffee</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">implements</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Food</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#79B8FF;">BLACK_COFFEE</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">DECAF_COFFEE</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">ESPRESSO</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#79B8FF;">LATTE</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">CAPPUCCINO</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">TEA</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">HERB_TEA</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> Food </span><span style="color:#B392F0;">randomSelection</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> Enums.</span><span style="color:#B392F0;">random</span><span style="color:#E1E4E8;">(values);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] </span><span style="color:#FFAB70;">args</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">; i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;">(Meal2 meal </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> Meal2.</span><span style="color:#B392F0;">values</span><span style="color:#E1E4E8;">()) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                Food food </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> meal.</span><span style="color:#B392F0;">randomSelection</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">                System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(food);</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">            System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;***&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// enums/menu/Meal2.java</span></span>
<span class="line"><span style="color:#6A737D;">// {java enums.menu.Meal2}</span></span>
<span class="line"><span style="color:#D73A49;">package</span><span style="color:#24292E;"> enums.menu;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> onjava.</span><span style="color:#005CC5;">*</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">enum</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Meal2</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">APPETIZER</span><span style="color:#24292E;">(Food.Appetizer.class),</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">MAINCOURSE</span><span style="color:#24292E;">(Food.MainCourse.class),</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">DESSERT</span><span style="color:#24292E;">(Food.Dessert.class),</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">COFFEE</span><span style="color:#24292E;">(Food.Coffee.class);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">Food</span><span style="color:#24292E;">[] values;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Meal2</span><span style="color:#24292E;">(Class&lt;</span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">Food</span><span style="color:#24292E;">&gt; </span><span style="color:#E36209;">kind</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        values </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> kind.</span><span style="color:#6F42C1;">getEnumConstants</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Food</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">enum</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Appetizer</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Food</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#005CC5;">SALAD</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">SOUP</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">SPRING_ROLLS</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">enum</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MainCourse</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Food</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#005CC5;">LASAGNE</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">BURRITO</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">PAD_THAI</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#005CC5;">LENTILS</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">HUMMOUS</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">VINDALOO</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">enum</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Dessert</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Food</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#005CC5;">TIRAMISU</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">GELATO</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">BLACK_FOREST_CAKE</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#005CC5;">FRUIT</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">CREME_CARAMEL</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">enum</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Coffee</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Food</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#005CC5;">BLACK_COFFEE</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">DECAF_COFFEE</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">ESPRESSO</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#005CC5;">LATTE</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">CAPPUCCINO</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">TEA</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">HERB_TEA</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Food </span><span style="color:#6F42C1;">randomSelection</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> Enums.</span><span style="color:#6F42C1;">random</span><span style="color:#24292E;">(values);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">for</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">5</span><span style="color:#24292E;">; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">for</span><span style="color:#24292E;">(Meal2 meal </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> Meal2.</span><span style="color:#6F42C1;">values</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">                Food food </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> meal.</span><span style="color:#6F42C1;">randomSelection</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">                System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(food);</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">            System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;***&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>输出为：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">SPRING_ROLLS</span></span>
<span class="line"><span style="color:#e1e4e8;">VINDALOO</span></span>
<span class="line"><span style="color:#e1e4e8;">FRUIT</span></span>
<span class="line"><span style="color:#e1e4e8;">DECAF_COFFEE</span></span>
<span class="line"><span style="color:#e1e4e8;">***</span></span>
<span class="line"><span style="color:#e1e4e8;">SOUP</span></span>
<span class="line"><span style="color:#e1e4e8;">VINDALOO</span></span>
<span class="line"><span style="color:#e1e4e8;">FRUIT</span></span>
<span class="line"><span style="color:#e1e4e8;">TEA</span></span>
<span class="line"><span style="color:#e1e4e8;">***</span></span>
<span class="line"><span style="color:#e1e4e8;">SALAD</span></span>
<span class="line"><span style="color:#e1e4e8;">BURRITO</span></span>
<span class="line"><span style="color:#e1e4e8;">FRUIT</span></span>
<span class="line"><span style="color:#e1e4e8;">TEA</span></span>
<span class="line"><span style="color:#e1e4e8;">***</span></span>
<span class="line"><span style="color:#e1e4e8;">SALAD</span></span>
<span class="line"><span style="color:#e1e4e8;">BURRITO</span></span>
<span class="line"><span style="color:#e1e4e8;">CREME_CARAMEL</span></span>
<span class="line"><span style="color:#e1e4e8;">LATTE</span></span>
<span class="line"><span style="color:#e1e4e8;">***</span></span>
<span class="line"><span style="color:#e1e4e8;">SOUP</span></span>
<span class="line"><span style="color:#e1e4e8;">BURRITO</span></span>
<span class="line"><span style="color:#e1e4e8;">TIRAMISU</span></span>
<span class="line"><span style="color:#e1e4e8;">ESPRESSO</span></span>
<span class="line"><span style="color:#e1e4e8;">***</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">SPRING_ROLLS</span></span>
<span class="line"><span style="color:#24292e;">VINDALOO</span></span>
<span class="line"><span style="color:#24292e;">FRUIT</span></span>
<span class="line"><span style="color:#24292e;">DECAF_COFFEE</span></span>
<span class="line"><span style="color:#24292e;">***</span></span>
<span class="line"><span style="color:#24292e;">SOUP</span></span>
<span class="line"><span style="color:#24292e;">VINDALOO</span></span>
<span class="line"><span style="color:#24292e;">FRUIT</span></span>
<span class="line"><span style="color:#24292e;">TEA</span></span>
<span class="line"><span style="color:#24292e;">***</span></span>
<span class="line"><span style="color:#24292e;">SALAD</span></span>
<span class="line"><span style="color:#24292e;">BURRITO</span></span>
<span class="line"><span style="color:#24292e;">FRUIT</span></span>
<span class="line"><span style="color:#24292e;">TEA</span></span>
<span class="line"><span style="color:#24292e;">***</span></span>
<span class="line"><span style="color:#24292e;">SALAD</span></span>
<span class="line"><span style="color:#24292e;">BURRITO</span></span>
<span class="line"><span style="color:#24292e;">CREME_CARAMEL</span></span>
<span class="line"><span style="color:#24292e;">LATTE</span></span>
<span class="line"><span style="color:#24292e;">***</span></span>
<span class="line"><span style="color:#24292e;">SOUP</span></span>
<span class="line"><span style="color:#24292e;">BURRITO</span></span>
<span class="line"><span style="color:#24292e;">TIRAMISU</span></span>
<span class="line"><span style="color:#24292e;">ESPRESSO</span></span>
<span class="line"><span style="color:#24292e;">***</span></span></code></pre></div><p>其实，这仅仅是重新组织了一下代码，不过多数情况下，这种方式使你的代码具有更清晰的结构。</p><h2 id="使用-enumset-替代-flags" tabindex="-1">使用 EnumSet 替代 Flags <a class="header-anchor" href="#使用-enumset-替代-flags" aria-label="Permalink to &quot;使用 EnumSet 替代 Flags&quot;">​</a></h2><p>Set 是一种集合，只能向其中添加不重复的对象。当然，enum 也要求其成员都是唯一的，所以 enumi 看起来也具有集合的行为。不过，由于不能从 enum 中删除或添加元素，所以它只能算是不太有用的集合。Java SE5 引入 EnumSet，是为了通过 enum 创建一种替代品，以替代传统的基于 int 的“位标志”。这种标志可以用来表示某种“开/关”信息，不过，使用这种标志，我们最终操作的只是一些 bit，而不是这些 bit 想要表达的概念，因此很容易写出令人难以理解的代码。</p><p>EnumSet 的设计充分考虑到了速度因素，因为它必须与非常高效的 bit 标志相竞争（其操作与 HashSet 相比，非常地快），就其内部而言，它（可能）就是将一个 long 值作为比特向量，所以 EnumSet 非常快速高效。使用 EnumSet 的优点是，它在说明一个二进制位是否存在时，具有更好的表达能力，并且无需担心性能。</p><p>EnumSet 中的元素必须来自一个 enum。下面的 enum 表示在一座大楼中，警报传感器的安放位置：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// enums/AlarmPoints.java</span></span>
<span class="line"><span style="color:#F97583;">package</span><span style="color:#E1E4E8;"> enums;</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">enum</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">AlarmPoints</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">STAIR1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">STAIR2</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">LOBBY</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">OFFICE1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">OFFICE2</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">OFFICE3</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">OFFICE4</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">BATHROOM</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">UTILITY</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">KITCHEN</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// enums/AlarmPoints.java</span></span>
<span class="line"><span style="color:#D73A49;">package</span><span style="color:#24292E;"> enums;</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">enum</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">AlarmPoints</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">STAIR1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">STAIR2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">LOBBY</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">OFFICE1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">OFFICE2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">OFFICE3</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">OFFICE4</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">BATHROOM</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">UTILITY</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">KITCHEN</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>然后，我们用 EnumSet 来跟踪报警器的状态：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// enums/EnumSets.java</span></span>
<span class="line"><span style="color:#6A737D;">// Operations on EnumSets</span></span>
<span class="line"><span style="color:#6A737D;">// {java enums.EnumSets}</span></span>
<span class="line"><span style="color:#F97583;">package</span><span style="color:#E1E4E8;"> enums;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> java.util.</span><span style="color:#79B8FF;">*</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> enums.AlarmPoints.</span><span style="color:#79B8FF;">*</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">EnumSets</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] </span><span style="color:#FFAB70;">args</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        EnumSet&lt;</span><span style="color:#F97583;">AlarmPoints</span><span style="color:#E1E4E8;">&gt; points </span><span style="color:#F97583;">=</span></span>
<span class="line"><span style="color:#E1E4E8;">                EnumSet.</span><span style="color:#B392F0;">noneOf</span><span style="color:#E1E4E8;">(AlarmPoints.class); </span><span style="color:#6A737D;">// Empty</span></span>
<span class="line"><span style="color:#E1E4E8;">        points.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(BATHROOM);</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(points);</span></span>
<span class="line"><span style="color:#E1E4E8;">        points.</span><span style="color:#B392F0;">addAll</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">                EnumSet.</span><span style="color:#B392F0;">of</span><span style="color:#E1E4E8;">(STAIR1, STAIR2, KITCHEN));</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(points);</span></span>
<span class="line"><span style="color:#E1E4E8;">        points </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> EnumSet.</span><span style="color:#B392F0;">allOf</span><span style="color:#E1E4E8;">(AlarmPoints.class);</span></span>
<span class="line"><span style="color:#E1E4E8;">        points.</span><span style="color:#B392F0;">removeAll</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">                EnumSet.</span><span style="color:#B392F0;">of</span><span style="color:#E1E4E8;">(STAIR1, STAIR2, KITCHEN));</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(points);</span></span>
<span class="line"><span style="color:#E1E4E8;">        points.</span><span style="color:#B392F0;">removeAll</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">                EnumSet.</span><span style="color:#B392F0;">range</span><span style="color:#E1E4E8;">(OFFICE1, OFFICE4));</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(points);</span></span>
<span class="line"><span style="color:#E1E4E8;">        points </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> EnumSet.</span><span style="color:#B392F0;">complementOf</span><span style="color:#E1E4E8;">(points);</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(points);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// enums/EnumSets.java</span></span>
<span class="line"><span style="color:#6A737D;">// Operations on EnumSets</span></span>
<span class="line"><span style="color:#6A737D;">// {java enums.EnumSets}</span></span>
<span class="line"><span style="color:#D73A49;">package</span><span style="color:#24292E;"> enums;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> java.util.</span><span style="color:#005CC5;">*</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> enums.AlarmPoints.</span><span style="color:#005CC5;">*</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">EnumSets</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        EnumSet&lt;</span><span style="color:#D73A49;">AlarmPoints</span><span style="color:#24292E;">&gt; points </span><span style="color:#D73A49;">=</span></span>
<span class="line"><span style="color:#24292E;">                EnumSet.</span><span style="color:#6F42C1;">noneOf</span><span style="color:#24292E;">(AlarmPoints.class); </span><span style="color:#6A737D;">// Empty</span></span>
<span class="line"><span style="color:#24292E;">        points.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(BATHROOM);</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(points);</span></span>
<span class="line"><span style="color:#24292E;">        points.</span><span style="color:#6F42C1;">addAll</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">                EnumSet.</span><span style="color:#6F42C1;">of</span><span style="color:#24292E;">(STAIR1, STAIR2, KITCHEN));</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(points);</span></span>
<span class="line"><span style="color:#24292E;">        points </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> EnumSet.</span><span style="color:#6F42C1;">allOf</span><span style="color:#24292E;">(AlarmPoints.class);</span></span>
<span class="line"><span style="color:#24292E;">        points.</span><span style="color:#6F42C1;">removeAll</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">                EnumSet.</span><span style="color:#6F42C1;">of</span><span style="color:#24292E;">(STAIR1, STAIR2, KITCHEN));</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(points);</span></span>
<span class="line"><span style="color:#24292E;">        points.</span><span style="color:#6F42C1;">removeAll</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">                EnumSet.</span><span style="color:#6F42C1;">range</span><span style="color:#24292E;">(OFFICE1, OFFICE4));</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(points);</span></span>
<span class="line"><span style="color:#24292E;">        points </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> EnumSet.</span><span style="color:#6F42C1;">complementOf</span><span style="color:#24292E;">(points);</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(points);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>输出为：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">[BATHROOM]</span></span>
<span class="line"><span style="color:#E1E4E8;">[STAIR1, STAIR2, BATHROOM, KITCHEN]</span></span>
<span class="line"><span style="color:#E1E4E8;">[LOBBY, OFFICE1, OFFICE2, OFFICE3, OFFICE4, BATHROOM,</span></span>
<span class="line"><span style="color:#E1E4E8;">UTILITY]</span></span>
<span class="line"><span style="color:#E1E4E8;">[LOBBY, BATHROOM, UTILITY]</span></span>
<span class="line"><span style="color:#E1E4E8;">[STAIR1, STAIR2, OFFICE1, OFFICE2, OFFICE3, OFFICE4,</span></span>
<span class="line"><span style="color:#E1E4E8;">KITCHEN]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">[BATHROOM]</span></span>
<span class="line"><span style="color:#24292E;">[STAIR1, STAIR2, BATHROOM, KITCHEN]</span></span>
<span class="line"><span style="color:#24292E;">[LOBBY, OFFICE1, OFFICE2, OFFICE3, OFFICE4, BATHROOM,</span></span>
<span class="line"><span style="color:#24292E;">UTILITY]</span></span>
<span class="line"><span style="color:#24292E;">[LOBBY, BATHROOM, UTILITY]</span></span>
<span class="line"><span style="color:#24292E;">[STAIR1, STAIR2, OFFICE1, OFFICE2, OFFICE3, OFFICE4,</span></span>
<span class="line"><span style="color:#24292E;">KITCHEN]</span></span></code></pre></div><p>使用 static import 可以简化 enum 常量的使用。EnumSet 的方法的名字都相当直观，你可以查阅 JDK 文档找到其完整详细的描述。如果仔细研究了 EnumSet 的文档，你还会发现 of() 方法被重载了很多次，不但为可变数量参数进行了重载，而且为接收 2 至 5 个显式的参数的情况都进行了重载。这也从侧面表现了 EnumSet 对性能的关注。因为，其实只使用单独的 of() 方法解决可变参数已经可以解决整个问题了，但是对比显式的参数，会有一点性能损失。采用现在这种设计，当你只使用 2 到 5 个参数调用 of() 方法时，你可以调用对应的重载过的方法（速度稍快一点），而当你使用一个参数或多过 5 个参数时，你调用的将是使用可变参数的 of() 方法。注意，如果你只使用一个参数，编译器并不会构造可变参数的数组，所以与调用只有一个参数的方法相比，也就不会有额外的性能损耗。</p><p>EnumSet 的基础是 long，一个 long 值有 64 位，而一个 enum 实例只需一位 bit 表示其是否存在。 也就是说，在不超过一个 long 的表达能力的情况下，你的 EnumSet 可以应用于最多不超过 64 个元素的 enum。如果 enum 超过了 64 个元素会发生什么呢？</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// enums/BigEnumSet.java</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> java.util.</span><span style="color:#79B8FF;">*</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">BigEnumSet</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">enum</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Big</span><span style="color:#E1E4E8;"> { </span><span style="color:#79B8FF;">A0</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">A1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">A2</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">A3</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">A4</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">A5</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">A6</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">A7</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">A8</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">A9</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">A10</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">A11</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">A12</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">A13</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">A14</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">A15</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">A16</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">A17</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">A18</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">A19</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">A20</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">A21</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">A22</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">A23</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">A24</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">A25</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">A26</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">A27</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">A28</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">A29</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">A30</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">A31</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">A32</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">A33</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">A34</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">A35</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">A36</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">A37</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">A38</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">A39</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">A40</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">A41</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">A42</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">A43</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">A44</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">A45</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">A46</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">A47</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">A48</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">A49</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">A50</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">A51</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">A52</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">A53</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">A54</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">A55</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">A56</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">A57</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">A58</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">A59</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">A60</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">A61</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">A62</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">A63</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">A64</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">A65</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">A66</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">A67</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">A68</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">A69</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">A70</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">A71</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">A72</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">A73</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">A74</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">A75</span><span style="color:#E1E4E8;"> }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] </span><span style="color:#FFAB70;">args</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        EnumSet&lt;</span><span style="color:#F97583;">Big</span><span style="color:#E1E4E8;">&gt; bigEnumSet </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> EnumSet.</span><span style="color:#B392F0;">allOf</span><span style="color:#E1E4E8;">(Big.class);</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(bigEnumSet);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// enums/BigEnumSet.java</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> java.util.</span><span style="color:#005CC5;">*</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">BigEnumSet</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">enum</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Big</span><span style="color:#24292E;"> { </span><span style="color:#005CC5;">A0</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">A1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">A2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">A3</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">A4</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">A5</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">A6</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">A7</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">A8</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">A9</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">A10</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">A11</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">A12</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">A13</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">A14</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">A15</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">A16</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">A17</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">A18</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">A19</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">A20</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">A21</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">A22</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">A23</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">A24</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">A25</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">A26</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">A27</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">A28</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">A29</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">A30</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">A31</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">A32</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">A33</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">A34</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">A35</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">A36</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">A37</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">A38</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">A39</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">A40</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">A41</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">A42</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">A43</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">A44</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">A45</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">A46</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">A47</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">A48</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">A49</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">A50</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">A51</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">A52</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">A53</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">A54</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">A55</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">A56</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">A57</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">A58</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">A59</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">A60</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">A61</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">A62</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">A63</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">A64</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">A65</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">A66</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">A67</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">A68</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">A69</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">A70</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">A71</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">A72</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">A73</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">A74</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">A75</span><span style="color:#24292E;"> }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        EnumSet&lt;</span><span style="color:#D73A49;">Big</span><span style="color:#24292E;">&gt; bigEnumSet </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> EnumSet.</span><span style="color:#6F42C1;">allOf</span><span style="color:#24292E;">(Big.class);</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(bigEnumSet);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>输出为：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">[A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12,</span></span>
<span class="line"><span style="color:#E1E4E8;">A13, A14, A15, A16, A17, A18, A19, A20, A21, A22, A23,</span></span>
<span class="line"><span style="color:#E1E4E8;">A24, A25, A26, A27, A28, A29, A30, A31, A32, A33, A34,</span></span>
<span class="line"><span style="color:#E1E4E8;">A35, A36, A37, A38, A39, A40, A41, A42, A43, A44, A45,</span></span>
<span class="line"><span style="color:#E1E4E8;">A46, A47, A48, A49, A50, A51, A52, A53, A54, A55, A56,</span></span>
<span class="line"><span style="color:#E1E4E8;">A57, A58, A59, A60, A61, A62, A63, A64, A65, A66, A67,</span></span>
<span class="line"><span style="color:#E1E4E8;">A68, A69, A70, A71, A72, A73, A74, A75]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">[A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12,</span></span>
<span class="line"><span style="color:#24292E;">A13, A14, A15, A16, A17, A18, A19, A20, A21, A22, A23,</span></span>
<span class="line"><span style="color:#24292E;">A24, A25, A26, A27, A28, A29, A30, A31, A32, A33, A34,</span></span>
<span class="line"><span style="color:#24292E;">A35, A36, A37, A38, A39, A40, A41, A42, A43, A44, A45,</span></span>
<span class="line"><span style="color:#24292E;">A46, A47, A48, A49, A50, A51, A52, A53, A54, A55, A56,</span></span>
<span class="line"><span style="color:#24292E;">A57, A58, A59, A60, A61, A62, A63, A64, A65, A66, A67,</span></span>
<span class="line"><span style="color:#24292E;">A68, A69, A70, A71, A72, A73, A74, A75]</span></span></code></pre></div><p>显然，EnumSet 可以应用于多过 64 个元素的 enum，所以我猜测，Enum 会在必要的时候增加一个 long。</p><h2 id="使用-enummap" tabindex="-1">使用 EnumMap <a class="header-anchor" href="#使用-enummap" aria-label="Permalink to &quot;使用 EnumMap&quot;">​</a></h2><p>EnumMap 是一种特殊的 Map，它要求其中的键（key）必须来自一个 enum，由于 enum 本身的限制，所以 EnumMap 在内部可由数组实现。因此 EnumMap 的速度很快，我们可以放心地使用 enum 实例在 EnumMap 中进行查找操作。不过，我们只能将 enum 的实例作为键来调用 put() 可方法，其他操作与使用一般的 Map 差不多。</p><p>下面的例子演示了<em>命令设计模式</em>的用法。一般来说，命令模式首先需要一个只有单一方法的接口，然后从该接口实现具有各自不同的行为的多个子类。接下来，程序员就可以构造命令对象，并在需要的时候使用它们了：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// enums/EnumMaps.java</span></span>
<span class="line"><span style="color:#6A737D;">// Basics of EnumMaps</span></span>
<span class="line"><span style="color:#6A737D;">// {java enums.EnumMaps}</span></span>
<span class="line"><span style="color:#F97583;">package</span><span style="color:#E1E4E8;"> enums;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> java.util.</span><span style="color:#79B8FF;">*</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> enums.AlarmPoints.</span><span style="color:#79B8FF;">*</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Command</span><span style="color:#E1E4E8;"> { </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">action</span><span style="color:#E1E4E8;">(); }</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">EnumMaps</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] </span><span style="color:#FFAB70;">args</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        EnumMap&lt;</span><span style="color:#F97583;">AlarmPoints</span><span style="color:#E1E4E8;">,</span><span style="color:#F97583;">Command</span><span style="color:#E1E4E8;">&gt; em </span><span style="color:#F97583;">=</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> EnumMap&lt;&gt;(AlarmPoints.class);</span></span>
<span class="line"><span style="color:#E1E4E8;">        em.</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(KITCHEN,</span></span>
<span class="line"><span style="color:#E1E4E8;">                () </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Kitchen fire!&quot;</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"><span style="color:#E1E4E8;">        em.</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(BATHROOM,</span></span>
<span class="line"><span style="color:#E1E4E8;">                () </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Bathroom alert!&quot;</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;">(Map.Entry&lt;</span><span style="color:#F97583;">AlarmPoints</span><span style="color:#E1E4E8;">,</span><span style="color:#F97583;">Command</span><span style="color:#E1E4E8;">&gt; e</span><span style="color:#F97583;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">                em.</span><span style="color:#B392F0;">entrySet</span><span style="color:#E1E4E8;">()) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            System.out.</span><span style="color:#B392F0;">print</span><span style="color:#E1E4E8;">(e.</span><span style="color:#B392F0;">getKey</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;: &quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">            e.</span><span style="color:#B392F0;">getValue</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">action</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> { </span><span style="color:#6A737D;">// If there&#39;s no value for a particular key:</span></span>
<span class="line"><span style="color:#E1E4E8;">            em.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(UTILITY).</span><span style="color:#B392F0;">action</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;">(Exception </span><span style="color:#FFAB70;">e</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Expected: &quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> e);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// enums/EnumMaps.java</span></span>
<span class="line"><span style="color:#6A737D;">// Basics of EnumMaps</span></span>
<span class="line"><span style="color:#6A737D;">// {java enums.EnumMaps}</span></span>
<span class="line"><span style="color:#D73A49;">package</span><span style="color:#24292E;"> enums;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> java.util.</span><span style="color:#005CC5;">*</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> enums.AlarmPoints.</span><span style="color:#005CC5;">*</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Command</span><span style="color:#24292E;"> { </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">action</span><span style="color:#24292E;">(); }</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">EnumMaps</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        EnumMap&lt;</span><span style="color:#D73A49;">AlarmPoints</span><span style="color:#24292E;">,</span><span style="color:#D73A49;">Command</span><span style="color:#24292E;">&gt; em </span><span style="color:#D73A49;">=</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> EnumMap&lt;&gt;(AlarmPoints.class);</span></span>
<span class="line"><span style="color:#24292E;">        em.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(KITCHEN,</span></span>
<span class="line"><span style="color:#24292E;">                () </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Kitchen fire!&quot;</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#24292E;">        em.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(BATHROOM,</span></span>
<span class="line"><span style="color:#24292E;">                () </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Bathroom alert!&quot;</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">for</span><span style="color:#24292E;">(Map.Entry&lt;</span><span style="color:#D73A49;">AlarmPoints</span><span style="color:#24292E;">,</span><span style="color:#D73A49;">Command</span><span style="color:#24292E;">&gt; e</span><span style="color:#D73A49;">:</span></span>
<span class="line"><span style="color:#24292E;">                em.</span><span style="color:#6F42C1;">entrySet</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">            System.out.</span><span style="color:#6F42C1;">print</span><span style="color:#24292E;">(e.</span><span style="color:#6F42C1;">getKey</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;: &quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">            e.</span><span style="color:#6F42C1;">getValue</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">action</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> { </span><span style="color:#6A737D;">// If there&#39;s no value for a particular key:</span></span>
<span class="line"><span style="color:#24292E;">            em.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(UTILITY).</span><span style="color:#6F42C1;">action</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;">(Exception </span><span style="color:#E36209;">e</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Expected: &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> e);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>输出为：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">BATHROOM: Bathroom alert!</span></span>
<span class="line"><span style="color:#e1e4e8;">KITCHEN: Kitchen fire!</span></span>
<span class="line"><span style="color:#e1e4e8;">Expected: java.lang.NullPointerException</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">BATHROOM: Bathroom alert!</span></span>
<span class="line"><span style="color:#24292e;">KITCHEN: Kitchen fire!</span></span>
<span class="line"><span style="color:#24292e;">Expected: java.lang.NullPointerException</span></span></code></pre></div><p>与 EnumSet 一样，enum 实例定义时的次序决定了其在 EnumMap 中的顺序。</p><p>main0 方法的最后部分说明，enum 的每个实例作为一个键，总是存在的。但是，如果你没有为这个键调用 put() 方法来存人相应的值的话，其对应的值就是 null。</p><p>与常量相关的方法（constant-specific methods 将在下一节中介绍）相比，EnumMap 有一个优点，那 EnumMap 允许程序员改变值对象，而常量相关的方法在编译期就被固定了。稍后你会看到，在你有多种类型的 enum，而且它们之间存在互操作的情况下，我们可以用 EnumMap 实现多路分发（multiple dispatching）。</p><h2 id="常量特定方法" tabindex="-1">常量特定方法 <a class="header-anchor" href="#常量特定方法" aria-label="Permalink to &quot;常量特定方法&quot;">​</a></h2><p>Java 的 enum 有一个非常有趣的特性，即它允许程序员为 enum 实例编写方法，从而为每个 enum 实例赋予各自不同的行为。要实现常量相关的方法，你需要为 enum 定义一个或多个 abstract 方法，然后为每个 enum 实例实现该抽象方法。参考下面的例子：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// enums/ConstantSpecificMethod.java</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> java.util.</span><span style="color:#79B8FF;">*</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> java.text.</span><span style="color:#79B8FF;">*</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">enum</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ConstantSpecificMethod</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">DATE_TIME</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">        String </span><span style="color:#B392F0;">getInfo</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span></span>
<span class="line"><span style="color:#E1E4E8;">                    DateFormat.</span><span style="color:#B392F0;">getDateInstance</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">                            .</span><span style="color:#B392F0;">format</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Date</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    },</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">CLASSPATH</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">        String </span><span style="color:#B392F0;">getInfo</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> System.</span><span style="color:#B392F0;">getenv</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;CLASSPATH&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    },</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">VERSION</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">        String </span><span style="color:#B392F0;">getInfo</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> System.</span><span style="color:#B392F0;">getProperty</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;java.version&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    };</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">abstract</span><span style="color:#E1E4E8;"> String </span><span style="color:#B392F0;">getInfo</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] </span><span style="color:#FFAB70;">args</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;">(ConstantSpecificMethod csm </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">values</span><span style="color:#E1E4E8;">())</span></span>
<span class="line"><span style="color:#E1E4E8;">            System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(csm.</span><span style="color:#B392F0;">getInfo</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// enums/ConstantSpecificMethod.java</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> java.util.</span><span style="color:#005CC5;">*</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> java.text.</span><span style="color:#005CC5;">*</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">enum</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ConstantSpecificMethod</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">DATE_TIME</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">        String </span><span style="color:#6F42C1;">getInfo</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span></span>
<span class="line"><span style="color:#24292E;">                    DateFormat.</span><span style="color:#6F42C1;">getDateInstance</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">                            .</span><span style="color:#6F42C1;">format</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Date</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    },</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">CLASSPATH</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">        String </span><span style="color:#6F42C1;">getInfo</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> System.</span><span style="color:#6F42C1;">getenv</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;CLASSPATH&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    },</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">VERSION</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">        String </span><span style="color:#6F42C1;">getInfo</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> System.</span><span style="color:#6F42C1;">getProperty</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;java.version&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    };</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">abstract</span><span style="color:#24292E;"> String </span><span style="color:#6F42C1;">getInfo</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">for</span><span style="color:#24292E;">(ConstantSpecificMethod csm </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">values</span><span style="color:#24292E;">())</span></span>
<span class="line"><span style="color:#24292E;">            System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(csm.</span><span style="color:#6F42C1;">getInfo</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>输出为：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">May </span><span style="color:#79B8FF;">9</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2017</span></span>
<span class="line"><span style="color:#E1E4E8;">C</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">\\Users\\Bruce\\Documents\\GitHub\\on</span><span style="color:#F97583;">-</span></span>
<span class="line"><span style="color:#E1E4E8;">java\\ExtractedExamples\\\\gradle\\wrapper\\gradle</span><span style="color:#F97583;">-</span></span>
<span class="line"><span style="color:#E1E4E8;">wrapper.jar</span></span>
<span class="line"><span style="color:#79B8FF;">1.8</span><span style="color:#E1E4E8;">.</span><span style="color:#FDAEB7;font-style:italic;">0_112</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">May </span><span style="color:#005CC5;">9</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2017</span></span>
<span class="line"><span style="color:#24292E;">C</span><span style="color:#D73A49;">:</span><span style="color:#24292E;">\\Users\\Bruce\\Documents\\GitHub\\on</span><span style="color:#D73A49;">-</span></span>
<span class="line"><span style="color:#24292E;">java\\ExtractedExamples\\\\gradle\\wrapper\\gradle</span><span style="color:#D73A49;">-</span></span>
<span class="line"><span style="color:#24292E;">wrapper.jar</span></span>
<span class="line"><span style="color:#005CC5;">1.8</span><span style="color:#24292E;">.</span><span style="color:#B31D28;font-style:italic;">0_112</span></span></code></pre></div><p>通过相应的 enum 实例，我们可以调用其上的方法。这通常也称为表驱动的代码（table-driven code，请注意它与前面提到的命令模式的相似之处）。</p><p>在面向对象的程序设计中，不同的行为与不同的类关联。而通过常量相关的方法，每个 enum 实例可以具备自己独特的行为，这似乎说明每个 enum 实例就像一个独特的类。在上面的例子中，enum 实例似乎被当作其“超类”ConstantSpecificMethod 来使用，在调用 getInfo() 方法时，体现出多态的行为。</p><p>然而，enum 实例与类的相似之处也仅限于此了。我们并不能真的将 enum 实例作为一个类型来使用：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// enums/NotClasses.java</span></span>
<span class="line"><span style="color:#6A737D;">// {javap -c LikeClasses}</span></span>
<span class="line"><span style="color:#F97583;">enum</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">LikeClasses</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">WINKEN</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">behavior</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">            System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Behavior1&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    },</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">BLINKEN</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">behavior</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">            System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Behavior2&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    },</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">NOD</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">behavior</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">            System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Behavior3&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    };</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">abstract</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">behavior</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">NotClasses</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// void f1(LikeClasses.WINKEN instance) {} // Nope</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// enums/NotClasses.java</span></span>
<span class="line"><span style="color:#6A737D;">// {javap -c LikeClasses}</span></span>
<span class="line"><span style="color:#D73A49;">enum</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">LikeClasses</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">WINKEN</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">behavior</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">            System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Behavior1&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    },</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">BLINKEN</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">behavior</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">            System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Behavior2&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    },</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">NOD</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">behavior</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">            System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Behavior3&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    };</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">abstract</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">behavior</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">NotClasses</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// void f1(LikeClasses.WINKEN instance) {} // Nope</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>输出为（前 12 行）：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">Compiled from &quot;NotClasses.java&quot;</span></span>
<span class="line"><span style="color:#e1e4e8;">abstract class LikeClasses extends</span></span>
<span class="line"><span style="color:#e1e4e8;">java.lang.Enum&lt;LikeClasses&gt; {</span></span>
<span class="line"><span style="color:#e1e4e8;">public static final LikeClasses WINKEN;</span></span>
<span class="line"><span style="color:#e1e4e8;">public static final LikeClasses BLINKEN;</span></span>
<span class="line"><span style="color:#e1e4e8;">public static final LikeClasses NOD;</span></span>
<span class="line"><span style="color:#e1e4e8;">public static LikeClasses[] values();</span></span>
<span class="line"><span style="color:#e1e4e8;">Code:</span></span>
<span class="line"><span style="color:#e1e4e8;">0: getstatic #2 // Field</span></span>
<span class="line"><span style="color:#e1e4e8;">$VALUES:[LLikeClasses;</span></span>
<span class="line"><span style="color:#e1e4e8;">3: invokevirtual #3 // Method</span></span>
<span class="line"><span style="color:#e1e4e8;">&quot;[LLikeClasses;&quot;.clone:()Ljava/lang/Object;</span></span>
<span class="line"><span style="color:#e1e4e8;">...</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">Compiled from &quot;NotClasses.java&quot;</span></span>
<span class="line"><span style="color:#24292e;">abstract class LikeClasses extends</span></span>
<span class="line"><span style="color:#24292e;">java.lang.Enum&lt;LikeClasses&gt; {</span></span>
<span class="line"><span style="color:#24292e;">public static final LikeClasses WINKEN;</span></span>
<span class="line"><span style="color:#24292e;">public static final LikeClasses BLINKEN;</span></span>
<span class="line"><span style="color:#24292e;">public static final LikeClasses NOD;</span></span>
<span class="line"><span style="color:#24292e;">public static LikeClasses[] values();</span></span>
<span class="line"><span style="color:#24292e;">Code:</span></span>
<span class="line"><span style="color:#24292e;">0: getstatic #2 // Field</span></span>
<span class="line"><span style="color:#24292e;">$VALUES:[LLikeClasses;</span></span>
<span class="line"><span style="color:#24292e;">3: invokevirtual #3 // Method</span></span>
<span class="line"><span style="color:#24292e;">&quot;[LLikeClasses;&quot;.clone:()Ljava/lang/Object;</span></span>
<span class="line"><span style="color:#24292e;">...</span></span></code></pre></div><p>在方法 f1() 中，编译器不允许我们将一个 enum 实例当作 class 类型。如果我们分析一下编译器生成的代码，就知道这种行为也是很正常的。因为每个 enum 元素都是一个 LikeClasses 类型的 static final 实例。</p><p>同时，由于它们是 static 实例，无法访问外部类的非 static 元素或方法，所以对于内部的 enum 的实例而言，其行为与一般的内部类并不相同。</p><p>再看一个更有趣的关于洗车的例子。每个顾客在洗车时，都有一个选择菜单，每个选择对应一个不同的动作。可以将一个常量相关的方法关联到一个选择上，再使用一个 EnumSet 来保存客户的选择：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// enums/CarWash.java</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> java.util.</span><span style="color:#79B8FF;">*</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">CarWash</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">enum</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Cycle</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">UNDERBODY</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">action</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">                System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Spraying the underbody&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">        },</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">WHEELWASH</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">action</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">                System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Washing the wheels&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">        },</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">PREWASH</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">action</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">                System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Loosening the dirt&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">        },</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">BASIC</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">action</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">                System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;The basic wash&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">        },</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">HOTWAX</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">action</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">                System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Applying hot wax&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">        },</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">RINSE</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">action</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">                System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Rinsing&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">        },</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">BLOWDRY</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">action</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">                System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Blowing dry&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">        };</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">abstract</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">action</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    EnumSet&lt;</span><span style="color:#F97583;">Cycle</span><span style="color:#E1E4E8;">&gt; cycles </span><span style="color:#F97583;">=</span></span>
<span class="line"><span style="color:#E1E4E8;">            EnumSet.</span><span style="color:#B392F0;">of</span><span style="color:#E1E4E8;">(Cycle.BASIC, Cycle.RINSE);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(Cycle </span><span style="color:#FFAB70;">cycle</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        cycles.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(cycle);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">washCar</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;">(Cycle c </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> cycles)</span></span>
<span class="line"><span style="color:#E1E4E8;">            c.</span><span style="color:#B392F0;">action</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> String </span><span style="color:#B392F0;">toString</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> cycles.</span><span style="color:#B392F0;">toString</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] </span><span style="color:#FFAB70;">args</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        CarWash wash </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">CarWash</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(wash);</span></span>
<span class="line"><span style="color:#E1E4E8;">        wash.</span><span style="color:#B392F0;">washCar</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#6A737D;">// Order of addition is unimportant:</span></span>
<span class="line"><span style="color:#E1E4E8;">        wash.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(Cycle.BLOWDRY);</span></span>
<span class="line"><span style="color:#E1E4E8;">        wash.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(Cycle.BLOWDRY); </span><span style="color:#6A737D;">// Duplicates ignored</span></span>
<span class="line"><span style="color:#E1E4E8;">        wash.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(Cycle.RINSE);</span></span>
<span class="line"><span style="color:#E1E4E8;">        wash.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(Cycle.HOTWAX);</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(wash);</span></span>
<span class="line"><span style="color:#E1E4E8;">        wash.</span><span style="color:#B392F0;">washCar</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// enums/CarWash.java</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> java.util.</span><span style="color:#005CC5;">*</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">CarWash</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">enum</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Cycle</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">UNDERBODY</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">action</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">                System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Spraying the underbody&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">        },</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">WHEELWASH</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">action</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">                System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Washing the wheels&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">        },</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">PREWASH</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">action</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">                System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Loosening the dirt&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">        },</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">BASIC</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">action</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">                System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;The basic wash&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">        },</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">HOTWAX</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">action</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">                System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Applying hot wax&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">        },</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">RINSE</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">action</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">                System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Rinsing&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">        },</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">BLOWDRY</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">action</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">                System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Blowing dry&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">        };</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">abstract</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">action</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    EnumSet&lt;</span><span style="color:#D73A49;">Cycle</span><span style="color:#24292E;">&gt; cycles </span><span style="color:#D73A49;">=</span></span>
<span class="line"><span style="color:#24292E;">            EnumSet.</span><span style="color:#6F42C1;">of</span><span style="color:#24292E;">(Cycle.BASIC, Cycle.RINSE);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(Cycle </span><span style="color:#E36209;">cycle</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        cycles.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(cycle);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">washCar</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">for</span><span style="color:#24292E;">(Cycle c </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> cycles)</span></span>
<span class="line"><span style="color:#24292E;">            c.</span><span style="color:#6F42C1;">action</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> String </span><span style="color:#6F42C1;">toString</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> cycles.</span><span style="color:#6F42C1;">toString</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        CarWash wash </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">CarWash</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(wash);</span></span>
<span class="line"><span style="color:#24292E;">        wash.</span><span style="color:#6F42C1;">washCar</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#6A737D;">// Order of addition is unimportant:</span></span>
<span class="line"><span style="color:#24292E;">        wash.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(Cycle.BLOWDRY);</span></span>
<span class="line"><span style="color:#24292E;">        wash.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(Cycle.BLOWDRY); </span><span style="color:#6A737D;">// Duplicates ignored</span></span>
<span class="line"><span style="color:#24292E;">        wash.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(Cycle.RINSE);</span></span>
<span class="line"><span style="color:#24292E;">        wash.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(Cycle.HOTWAX);</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(wash);</span></span>
<span class="line"><span style="color:#24292E;">        wash.</span><span style="color:#6F42C1;">washCar</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>输出为：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">[BASIC, RINSE]</span></span>
<span class="line"><span style="color:#e1e4e8;">The basic wash</span></span>
<span class="line"><span style="color:#e1e4e8;">Rinsing</span></span>
<span class="line"><span style="color:#e1e4e8;">[BASIC, HOTWAX, RINSE, BLOWDRY]</span></span>
<span class="line"><span style="color:#e1e4e8;">The basic wash</span></span>
<span class="line"><span style="color:#e1e4e8;">Applying hot wax</span></span>
<span class="line"><span style="color:#e1e4e8;">Rinsing</span></span>
<span class="line"><span style="color:#e1e4e8;">Blowing dry</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">[BASIC, RINSE]</span></span>
<span class="line"><span style="color:#24292e;">The basic wash</span></span>
<span class="line"><span style="color:#24292e;">Rinsing</span></span>
<span class="line"><span style="color:#24292e;">[BASIC, HOTWAX, RINSE, BLOWDRY]</span></span>
<span class="line"><span style="color:#24292e;">The basic wash</span></span>
<span class="line"><span style="color:#24292e;">Applying hot wax</span></span>
<span class="line"><span style="color:#24292e;">Rinsing</span></span>
<span class="line"><span style="color:#24292e;">Blowing dry</span></span></code></pre></div><p>与使用匿名内部类相比较，定义常量相关方法的语法更高效、简洁。</p><p>这个例子也展示了 EnumSet 了一些特性。因为它是一个集合，所以对于同一个元素而言，只能出现一次，因此对同一个参数重复地调用 add0 方法会被忽略掉（这是正确的行为，因为一个 bit 位开关只能“打开”一次），同样地，向 EnumSet 添加 enum 实例的顺序并不重要，因为其输出的次序决定于 enum 实例定义时的次序。</p><p>除了实现 abstract 方法以外，程序员是否可以覆盖常量相关的方法呢？答案是肯定的，参考下面的程序：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// enums/OverrideConstantSpecific.java</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">enum</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">OverrideConstantSpecific</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">NUT</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">BOLT</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">WASHER</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">f</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">            System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Overridden method&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    };</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">f</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;default behavior&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] </span><span style="color:#FFAB70;">args</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;">(OverrideConstantSpecific ocs </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">values</span><span style="color:#E1E4E8;">()) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            System.out.</span><span style="color:#B392F0;">print</span><span style="color:#E1E4E8;">(ocs </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;: &quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">            ocs.</span><span style="color:#B392F0;">f</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// enums/OverrideConstantSpecific.java</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">enum</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">OverrideConstantSpecific</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">NUT</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">BOLT</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">WASHER</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">f</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">            System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Overridden method&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    };</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">f</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;default behavior&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">for</span><span style="color:#24292E;">(OverrideConstantSpecific ocs </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">values</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">            System.out.</span><span style="color:#6F42C1;">print</span><span style="color:#24292E;">(ocs </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;: &quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">            ocs.</span><span style="color:#6F42C1;">f</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>输出为：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">NUT: default behavior</span></span>
<span class="line"><span style="color:#e1e4e8;">BOLT: default behavior</span></span>
<span class="line"><span style="color:#e1e4e8;">WASHER: Overridden method</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">NUT: default behavior</span></span>
<span class="line"><span style="color:#24292e;">BOLT: default behavior</span></span>
<span class="line"><span style="color:#24292e;">WASHER: Overridden method</span></span></code></pre></div><p>虽然 enum 有某些限制，但是一般而言，我们还是可以将其看作是类。</p><h3 id="使用-enum-的职责链" tabindex="-1">使用 enum 的职责链 <a class="header-anchor" href="#使用-enum-的职责链" aria-label="Permalink to &quot;使用 enum 的职责链&quot;">​</a></h3><p>在职责链（Chain of Responsibility）设计模式中，程序员以多种不同的方式来解决一个问题，然后将它们链接在一起。当一个请求到来时，它遍历这个链，直到链中的某个解决方案能够处理该请求。</p><p>通过常量相关的方法，我们可以很容易地实现一个简单的职责链。我们以一个邮局的模型为例。邮局需要以尽可能通用的方式来处理每一封邮件，并且要不断尝试处理邮件，直到该邮件最终被确定为一封死信。其中的每一次尝试可以看作为一个策略（也是一个设计模式），而完整的处理方式列表就是一个职责链。</p><p>我们先来描述一下邮件。邮件的每个关键特征都可以用 enum 来表示。程序将随机地生成 Mail 对象，如果要减小一封邮件的 GeneralDelivery 为 YES 的概率，那最简单的方法就是多创建几个不是 YES 的 enum 实例，所以 enum 的定义看起来有点古怪。</p><p>我们看到 Mail 中有一个 randomMail() 方法，它负责随机地创建用于测试的邮件。而 generator() 方法生成一个 Iterable 对象，该对象在你调用 next() 方法时，在其内部使用 randomMail() 来创建 Mail 对象。这样的结构使程序员可以通过调用 Mail.generator() 方法，很容易地构造出一个 foreach 循环：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// enums/PostOffice.java</span></span>
<span class="line"><span style="color:#6A737D;">// Modeling a post office</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> java.util.</span><span style="color:#79B8FF;">*</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> onjava.</span><span style="color:#79B8FF;">*</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Mail</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// The NO&#39;s reduce probability of random selection:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">enum</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">GeneralDelivery</span><span style="color:#E1E4E8;"> {</span><span style="color:#79B8FF;">YES</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">NO1</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">NO2</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">NO3</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">NO4</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">NO5</span><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">enum</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Scannability</span><span style="color:#E1E4E8;"> {</span><span style="color:#79B8FF;">UNSCANNABLE</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">YES1</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">YES2</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">YES3</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">YES4</span><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">enum</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Readability</span><span style="color:#E1E4E8;"> {</span><span style="color:#79B8FF;">ILLEGIBLE</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">YES1</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">YES2</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">YES3</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">YES4</span><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">enum</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Address</span><span style="color:#E1E4E8;"> {</span><span style="color:#79B8FF;">INCORRECT</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">OK1</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">OK2</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">OK3</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">OK4</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">OK5</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">OK6</span><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">enum</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ReturnAddress</span><span style="color:#E1E4E8;"> {</span><span style="color:#79B8FF;">MISSING</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">OK1</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">OK2</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">OK3</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">OK4</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">OK5</span><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">    GeneralDelivery generalDelivery;</span></span>
<span class="line"><span style="color:#E1E4E8;">    Scannability scannability;</span></span>
<span class="line"><span style="color:#E1E4E8;">    Readability readability;</span></span>
<span class="line"><span style="color:#E1E4E8;">    Address address;</span></span>
<span class="line"><span style="color:#E1E4E8;">    ReturnAddress returnAddress;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">long</span><span style="color:#E1E4E8;"> counter </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">long</span><span style="color:#E1E4E8;"> id </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> counter</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> String </span><span style="color:#B392F0;">toString</span><span style="color:#E1E4E8;">() { </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;Mail &quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> id; }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> String </span><span style="color:#B392F0;">details</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">toString</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">+</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#9ECBFF;">&quot;, General Delivery: &quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> generalDelivery </span><span style="color:#F97583;">+</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#9ECBFF;">&quot;, Address Scanability: &quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> scannability </span><span style="color:#F97583;">+</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#9ECBFF;">&quot;, Address Readability: &quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> readability </span><span style="color:#F97583;">+</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#9ECBFF;">&quot;, Address Address: &quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> address </span><span style="color:#F97583;">+</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#9ECBFF;">&quot;, Return address: &quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> returnAddress;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// Generate test Mail:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> Mail </span><span style="color:#B392F0;">randomMail</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        Mail m </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Mail</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        m.generalDelivery </span><span style="color:#F97583;">=</span></span>
<span class="line"><span style="color:#E1E4E8;">                Enums.</span><span style="color:#B392F0;">random</span><span style="color:#E1E4E8;">(GeneralDelivery.class);</span></span>
<span class="line"><span style="color:#E1E4E8;">        m.scannability </span><span style="color:#F97583;">=</span></span>
<span class="line"><span style="color:#E1E4E8;">                Enums.</span><span style="color:#B392F0;">random</span><span style="color:#E1E4E8;">(Scannability.class);</span></span>
<span class="line"><span style="color:#E1E4E8;">        m.readability </span><span style="color:#F97583;">=</span></span>
<span class="line"><span style="color:#E1E4E8;">                Enums.</span><span style="color:#B392F0;">random</span><span style="color:#E1E4E8;">(Readability.class);</span></span>
<span class="line"><span style="color:#E1E4E8;">        m.address </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Enums.</span><span style="color:#B392F0;">random</span><span style="color:#E1E4E8;">(Address.class);</span></span>
<span class="line"><span style="color:#E1E4E8;">        m.returnAddress </span><span style="color:#F97583;">=</span></span>
<span class="line"><span style="color:#E1E4E8;">                Enums.</span><span style="color:#B392F0;">random</span><span style="color:#E1E4E8;">(ReturnAddress.class);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> m;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span></span>
<span class="line"><span style="color:#E1E4E8;">    Iterable&lt;</span><span style="color:#F97583;">Mail</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">generator</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">count</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> Iterable&lt;</span><span style="color:#F97583;">Mail</span><span style="color:#E1E4E8;">&gt;() {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> n </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> count;</span></span>
<span class="line"><span style="color:#E1E4E8;">            @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> Iterator&lt;</span><span style="color:#F97583;">Mail</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">iterator</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> Iterator&lt;</span><span style="color:#F97583;">Mail</span><span style="color:#E1E4E8;">&gt;() {</span></span>
<span class="line"><span style="color:#E1E4E8;">                    @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">hasNext</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">                        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> n</span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">                    }</span></span>
<span class="line"><span style="color:#E1E4E8;">                    @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> Mail </span><span style="color:#B392F0;">next</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">                        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">randomMail</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">                    }</span></span>
<span class="line"><span style="color:#E1E4E8;">                    @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">remove</span><span style="color:#E1E4E8;">() { </span><span style="color:#6A737D;">// Not implemented</span></span>
<span class="line"><span style="color:#E1E4E8;">                        </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">UnsupportedOperationException</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">                    }</span></span>
<span class="line"><span style="color:#E1E4E8;">                };</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">        };</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">PostOffice</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">enum</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MailHandler</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">GENERAL_DELIVERY</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">handle</span><span style="color:#E1E4E8;">(Mail </span><span style="color:#FFAB70;">m</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">switch</span><span style="color:#E1E4E8;">(m.generalDelivery) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> YES</span><span style="color:#F97583;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">                        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">                                </span><span style="color:#9ECBFF;">&quot;Using general delivery for &quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> m);</span></span>
<span class="line"><span style="color:#E1E4E8;">                        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#F97583;">default:</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">                }</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">        },</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">MACHINE_SCAN</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">handle</span><span style="color:#E1E4E8;">(Mail </span><span style="color:#FFAB70;">m</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">switch</span><span style="color:#E1E4E8;">(m.scannability) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> UNSCANNABLE</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#F97583;">default:</span></span>
<span class="line"><span style="color:#E1E4E8;">                        </span><span style="color:#F97583;">switch</span><span style="color:#E1E4E8;">(m.address) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                            </span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> INCORRECT</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">                            </span><span style="color:#F97583;">default:</span></span>
<span class="line"><span style="color:#E1E4E8;">                                System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">                                        </span><span style="color:#9ECBFF;">&quot;Delivering &quot;</span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> m </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot; automatically&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">                                </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">                        }</span></span>
<span class="line"><span style="color:#E1E4E8;">                }</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">        },</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">VISUAL_INSPECTION</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">handle</span><span style="color:#E1E4E8;">(Mail </span><span style="color:#FFAB70;">m</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">switch</span><span style="color:#E1E4E8;">(m.readability) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> ILLEGIBLE</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#F97583;">default:</span></span>
<span class="line"><span style="color:#E1E4E8;">                        </span><span style="color:#F97583;">switch</span><span style="color:#E1E4E8;">(m.address) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                            </span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> INCORRECT</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">                            </span><span style="color:#F97583;">default:</span></span>
<span class="line"><span style="color:#E1E4E8;">                                System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">                                        </span><span style="color:#9ECBFF;">&quot;Delivering &quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> m </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot; normally&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">                                </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">                        }</span></span>
<span class="line"><span style="color:#E1E4E8;">                }</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">        },</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">RETURN_TO_SENDER</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">handle</span><span style="color:#E1E4E8;">(Mail </span><span style="color:#FFAB70;">m</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">switch</span><span style="color:#E1E4E8;">(m.returnAddress) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> MISSING</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#F97583;">default:</span></span>
<span class="line"><span style="color:#E1E4E8;">                        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">                                </span><span style="color:#9ECBFF;">&quot;Returning &quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> m </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot; to sender&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">                        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">                }</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">        };</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">abstract</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">handle</span><span style="color:#E1E4E8;">(Mail </span><span style="color:#FFAB70;">m</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">handle</span><span style="color:#E1E4E8;">(Mail </span><span style="color:#FFAB70;">m</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;">(MailHandler handler </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> MailHandler.</span><span style="color:#B392F0;">values</span><span style="color:#E1E4E8;">())</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(handler.</span><span style="color:#B392F0;">handle</span><span style="color:#E1E4E8;">(m))</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(m </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot; is a dead letter&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] </span><span style="color:#FFAB70;">args</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;">(Mail mail </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> Mail.</span><span style="color:#B392F0;">generator</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(mail.</span><span style="color:#B392F0;">details</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#B392F0;">handle</span><span style="color:#E1E4E8;">(mail);</span></span>
<span class="line"><span style="color:#E1E4E8;">            System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;*****&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// enums/PostOffice.java</span></span>
<span class="line"><span style="color:#6A737D;">// Modeling a post office</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> java.util.</span><span style="color:#005CC5;">*</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> onjava.</span><span style="color:#005CC5;">*</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Mail</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// The NO&#39;s reduce probability of random selection:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">enum</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">GeneralDelivery</span><span style="color:#24292E;"> {</span><span style="color:#005CC5;">YES</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">NO1</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">NO2</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">NO3</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">NO4</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">NO5</span><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">enum</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Scannability</span><span style="color:#24292E;"> {</span><span style="color:#005CC5;">UNSCANNABLE</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">YES1</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">YES2</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">YES3</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">YES4</span><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">enum</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Readability</span><span style="color:#24292E;"> {</span><span style="color:#005CC5;">ILLEGIBLE</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">YES1</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">YES2</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">YES3</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">YES4</span><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">enum</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Address</span><span style="color:#24292E;"> {</span><span style="color:#005CC5;">INCORRECT</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">OK1</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">OK2</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">OK3</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">OK4</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">OK5</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">OK6</span><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">enum</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ReturnAddress</span><span style="color:#24292E;"> {</span><span style="color:#005CC5;">MISSING</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">OK1</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">OK2</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">OK3</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">OK4</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">OK5</span><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">    GeneralDelivery generalDelivery;</span></span>
<span class="line"><span style="color:#24292E;">    Scannability scannability;</span></span>
<span class="line"><span style="color:#24292E;">    Readability readability;</span></span>
<span class="line"><span style="color:#24292E;">    Address address;</span></span>
<span class="line"><span style="color:#24292E;">    ReturnAddress returnAddress;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">long</span><span style="color:#24292E;"> counter </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">long</span><span style="color:#24292E;"> id </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> counter</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> String </span><span style="color:#6F42C1;">toString</span><span style="color:#24292E;">() { </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;Mail &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> id; }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> String </span><span style="color:#6F42C1;">details</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">toString</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">+</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#032F62;">&quot;, General Delivery: &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> generalDelivery </span><span style="color:#D73A49;">+</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#032F62;">&quot;, Address Scanability: &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> scannability </span><span style="color:#D73A49;">+</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#032F62;">&quot;, Address Readability: &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> readability </span><span style="color:#D73A49;">+</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#032F62;">&quot;, Address Address: &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> address </span><span style="color:#D73A49;">+</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#032F62;">&quot;, Return address: &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> returnAddress;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// Generate test Mail:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> Mail </span><span style="color:#6F42C1;">randomMail</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        Mail m </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Mail</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        m.generalDelivery </span><span style="color:#D73A49;">=</span></span>
<span class="line"><span style="color:#24292E;">                Enums.</span><span style="color:#6F42C1;">random</span><span style="color:#24292E;">(GeneralDelivery.class);</span></span>
<span class="line"><span style="color:#24292E;">        m.scannability </span><span style="color:#D73A49;">=</span></span>
<span class="line"><span style="color:#24292E;">                Enums.</span><span style="color:#6F42C1;">random</span><span style="color:#24292E;">(Scannability.class);</span></span>
<span class="line"><span style="color:#24292E;">        m.readability </span><span style="color:#D73A49;">=</span></span>
<span class="line"><span style="color:#24292E;">                Enums.</span><span style="color:#6F42C1;">random</span><span style="color:#24292E;">(Readability.class);</span></span>
<span class="line"><span style="color:#24292E;">        m.address </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Enums.</span><span style="color:#6F42C1;">random</span><span style="color:#24292E;">(Address.class);</span></span>
<span class="line"><span style="color:#24292E;">        m.returnAddress </span><span style="color:#D73A49;">=</span></span>
<span class="line"><span style="color:#24292E;">                Enums.</span><span style="color:#6F42C1;">random</span><span style="color:#24292E;">(ReturnAddress.class);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> m;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span></span>
<span class="line"><span style="color:#24292E;">    Iterable&lt;</span><span style="color:#D73A49;">Mail</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">generator</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">count</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> Iterable&lt;</span><span style="color:#D73A49;">Mail</span><span style="color:#24292E;">&gt;() {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> n </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> count;</span></span>
<span class="line"><span style="color:#24292E;">            @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Iterator&lt;</span><span style="color:#D73A49;">Mail</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">iterator</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> Iterator&lt;</span><span style="color:#D73A49;">Mail</span><span style="color:#24292E;">&gt;() {</span></span>
<span class="line"><span style="color:#24292E;">                    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">hasNext</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">                        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> n</span><span style="color:#D73A49;">--</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">                    }</span></span>
<span class="line"><span style="color:#24292E;">                    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Mail </span><span style="color:#6F42C1;">next</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">                        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">randomMail</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">                    }</span></span>
<span class="line"><span style="color:#24292E;">                    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">remove</span><span style="color:#24292E;">() { </span><span style="color:#6A737D;">// Not implemented</span></span>
<span class="line"><span style="color:#24292E;">                        </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">UnsupportedOperationException</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">                    }</span></span>
<span class="line"><span style="color:#24292E;">                };</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">        };</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">PostOffice</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">enum</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MailHandler</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">GENERAL_DELIVERY</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">handle</span><span style="color:#24292E;">(Mail </span><span style="color:#E36209;">m</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">switch</span><span style="color:#24292E;">(m.generalDelivery) {</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> YES</span><span style="color:#D73A49;">:</span></span>
<span class="line"><span style="color:#24292E;">                        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">                                </span><span style="color:#032F62;">&quot;Using general delivery for &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> m);</span></span>
<span class="line"><span style="color:#24292E;">                        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#D73A49;">default:</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">                }</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">        },</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">MACHINE_SCAN</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">handle</span><span style="color:#24292E;">(Mail </span><span style="color:#E36209;">m</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">switch</span><span style="color:#24292E;">(m.scannability) {</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> UNSCANNABLE</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#D73A49;">default:</span></span>
<span class="line"><span style="color:#24292E;">                        </span><span style="color:#D73A49;">switch</span><span style="color:#24292E;">(m.address) {</span></span>
<span class="line"><span style="color:#24292E;">                            </span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> INCORRECT</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">                            </span><span style="color:#D73A49;">default:</span></span>
<span class="line"><span style="color:#24292E;">                                System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">                                        </span><span style="color:#032F62;">&quot;Delivering &quot;</span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> m </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot; automatically&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">                                </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">                        }</span></span>
<span class="line"><span style="color:#24292E;">                }</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">        },</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">VISUAL_INSPECTION</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">handle</span><span style="color:#24292E;">(Mail </span><span style="color:#E36209;">m</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">switch</span><span style="color:#24292E;">(m.readability) {</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> ILLEGIBLE</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#D73A49;">default:</span></span>
<span class="line"><span style="color:#24292E;">                        </span><span style="color:#D73A49;">switch</span><span style="color:#24292E;">(m.address) {</span></span>
<span class="line"><span style="color:#24292E;">                            </span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> INCORRECT</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">                            </span><span style="color:#D73A49;">default:</span></span>
<span class="line"><span style="color:#24292E;">                                System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">                                        </span><span style="color:#032F62;">&quot;Delivering &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> m </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot; normally&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">                                </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">                        }</span></span>
<span class="line"><span style="color:#24292E;">                }</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">        },</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">RETURN_TO_SENDER</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">handle</span><span style="color:#24292E;">(Mail </span><span style="color:#E36209;">m</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">switch</span><span style="color:#24292E;">(m.returnAddress) {</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> MISSING</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#D73A49;">default:</span></span>
<span class="line"><span style="color:#24292E;">                        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">                                </span><span style="color:#032F62;">&quot;Returning &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> m </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot; to sender&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">                        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">                }</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">        };</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">abstract</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">handle</span><span style="color:#24292E;">(Mail </span><span style="color:#E36209;">m</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">handle</span><span style="color:#24292E;">(Mail </span><span style="color:#E36209;">m</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">for</span><span style="color:#24292E;">(MailHandler handler </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> MailHandler.</span><span style="color:#6F42C1;">values</span><span style="color:#24292E;">())</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(handler.</span><span style="color:#6F42C1;">handle</span><span style="color:#24292E;">(m))</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">return</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(m </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot; is a dead letter&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">for</span><span style="color:#24292E;">(Mail mail </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> Mail.</span><span style="color:#6F42C1;">generator</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">10</span><span style="color:#24292E;">)) {</span></span>
<span class="line"><span style="color:#24292E;">            System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(mail.</span><span style="color:#6F42C1;">details</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6F42C1;">handle</span><span style="color:#24292E;">(mail);</span></span>
<span class="line"><span style="color:#24292E;">            System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;*****&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>输出为：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">Mail 0, General Delivery: NO2, Address Scanability:</span></span>
<span class="line"><span style="color:#e1e4e8;">UNSCANNABLE, Address Readability: YES3, Address</span></span>
<span class="line"><span style="color:#e1e4e8;">Address: OK1, Return address: OK1</span></span>
<span class="line"><span style="color:#e1e4e8;">Delivering Mail 0 normally</span></span>
<span class="line"><span style="color:#e1e4e8;">*****</span></span>
<span class="line"><span style="color:#e1e4e8;">Mail 1, General Delivery: NO5, Address Scanability:</span></span>
<span class="line"><span style="color:#e1e4e8;">YES3, Address Readability: ILLEGIBLE, Address Address:</span></span>
<span class="line"><span style="color:#e1e4e8;">OK5, Return address: OK1</span></span>
<span class="line"><span style="color:#e1e4e8;">Delivering Mail 1 automatically</span></span>
<span class="line"><span style="color:#e1e4e8;">*****</span></span>
<span class="line"><span style="color:#e1e4e8;">Mail 2, General Delivery: YES, Address Scanability:</span></span>
<span class="line"><span style="color:#e1e4e8;">YES3, Address Readability: YES1, Address Address: OK1,</span></span>
<span class="line"><span style="color:#e1e4e8;">Return address: OK5</span></span>
<span class="line"><span style="color:#e1e4e8;">Using general delivery for Mail 2</span></span>
<span class="line"><span style="color:#e1e4e8;">*****</span></span>
<span class="line"><span style="color:#e1e4e8;">Mail 3, General Delivery: NO4, Address Scanability:</span></span>
<span class="line"><span style="color:#e1e4e8;">YES3, Address Readability: YES1, Address Address:</span></span>
<span class="line"><span style="color:#e1e4e8;">INCORRECT, Return address: OK4</span></span>
<span class="line"><span style="color:#e1e4e8;">Returning Mail 3 to sender</span></span>
<span class="line"><span style="color:#e1e4e8;">*****</span></span>
<span class="line"><span style="color:#e1e4e8;">Mail 4, General Delivery: NO4, Address Scanability:</span></span>
<span class="line"><span style="color:#e1e4e8;">UNSCANNABLE, Address Readability: YES1, Address</span></span>
<span class="line"><span style="color:#e1e4e8;">Address: INCORRECT, Return address: OK2</span></span>
<span class="line"><span style="color:#e1e4e8;">Returning Mail 4 to sender</span></span>
<span class="line"><span style="color:#e1e4e8;">*****</span></span>
<span class="line"><span style="color:#e1e4e8;">Mail 5, General Delivery: NO3, Address Scanability:</span></span>
<span class="line"><span style="color:#e1e4e8;">YES1, Address Readability: ILLEGIBLE, Address Address:</span></span>
<span class="line"><span style="color:#e1e4e8;">OK4, Return address: OK2</span></span>
<span class="line"><span style="color:#e1e4e8;">Delivering Mail 5 automatically</span></span>
<span class="line"><span style="color:#e1e4e8;">*****</span></span>
<span class="line"><span style="color:#e1e4e8;">Mail 6, General Delivery: YES, Address Scanability:</span></span>
<span class="line"><span style="color:#e1e4e8;">YES4, Address Readability: ILLEGIBLE, Address Address:</span></span>
<span class="line"><span style="color:#e1e4e8;">OK4, Return address: OK4</span></span>
<span class="line"><span style="color:#e1e4e8;">Using general delivery for Mail 6</span></span>
<span class="line"><span style="color:#e1e4e8;">*****</span></span>
<span class="line"><span style="color:#e1e4e8;">Mail 7, General Delivery: YES, Address Scanability:</span></span>
<span class="line"><span style="color:#e1e4e8;">YES3, Address Readability: YES4, Address Address: OK2,</span></span>
<span class="line"><span style="color:#e1e4e8;">Return address: MISSING</span></span>
<span class="line"><span style="color:#e1e4e8;">Using general delivery for Mail 7</span></span>
<span class="line"><span style="color:#e1e4e8;">*****</span></span>
<span class="line"><span style="color:#e1e4e8;">Mail 8, General Delivery: NO3, Address Scanability:</span></span>
<span class="line"><span style="color:#e1e4e8;">YES1, Address Readability: YES3, Address Address:</span></span>
<span class="line"><span style="color:#e1e4e8;">INCORRECT, Return address: MISSING</span></span>
<span class="line"><span style="color:#e1e4e8;">Mail 8 is a dead letter</span></span>
<span class="line"><span style="color:#e1e4e8;">*****</span></span>
<span class="line"><span style="color:#e1e4e8;">Mail 9, General Delivery: NO1, Address Scanability:</span></span>
<span class="line"><span style="color:#e1e4e8;">UNSCANNABLE, Address Readability: YES2, Address</span></span>
<span class="line"><span style="color:#e1e4e8;">Address: OK1, Return address: OK4</span></span>
<span class="line"><span style="color:#e1e4e8;">Delivering Mail 9 normally</span></span>
<span class="line"><span style="color:#e1e4e8;">*****</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">Mail 0, General Delivery: NO2, Address Scanability:</span></span>
<span class="line"><span style="color:#24292e;">UNSCANNABLE, Address Readability: YES3, Address</span></span>
<span class="line"><span style="color:#24292e;">Address: OK1, Return address: OK1</span></span>
<span class="line"><span style="color:#24292e;">Delivering Mail 0 normally</span></span>
<span class="line"><span style="color:#24292e;">*****</span></span>
<span class="line"><span style="color:#24292e;">Mail 1, General Delivery: NO5, Address Scanability:</span></span>
<span class="line"><span style="color:#24292e;">YES3, Address Readability: ILLEGIBLE, Address Address:</span></span>
<span class="line"><span style="color:#24292e;">OK5, Return address: OK1</span></span>
<span class="line"><span style="color:#24292e;">Delivering Mail 1 automatically</span></span>
<span class="line"><span style="color:#24292e;">*****</span></span>
<span class="line"><span style="color:#24292e;">Mail 2, General Delivery: YES, Address Scanability:</span></span>
<span class="line"><span style="color:#24292e;">YES3, Address Readability: YES1, Address Address: OK1,</span></span>
<span class="line"><span style="color:#24292e;">Return address: OK5</span></span>
<span class="line"><span style="color:#24292e;">Using general delivery for Mail 2</span></span>
<span class="line"><span style="color:#24292e;">*****</span></span>
<span class="line"><span style="color:#24292e;">Mail 3, General Delivery: NO4, Address Scanability:</span></span>
<span class="line"><span style="color:#24292e;">YES3, Address Readability: YES1, Address Address:</span></span>
<span class="line"><span style="color:#24292e;">INCORRECT, Return address: OK4</span></span>
<span class="line"><span style="color:#24292e;">Returning Mail 3 to sender</span></span>
<span class="line"><span style="color:#24292e;">*****</span></span>
<span class="line"><span style="color:#24292e;">Mail 4, General Delivery: NO4, Address Scanability:</span></span>
<span class="line"><span style="color:#24292e;">UNSCANNABLE, Address Readability: YES1, Address</span></span>
<span class="line"><span style="color:#24292e;">Address: INCORRECT, Return address: OK2</span></span>
<span class="line"><span style="color:#24292e;">Returning Mail 4 to sender</span></span>
<span class="line"><span style="color:#24292e;">*****</span></span>
<span class="line"><span style="color:#24292e;">Mail 5, General Delivery: NO3, Address Scanability:</span></span>
<span class="line"><span style="color:#24292e;">YES1, Address Readability: ILLEGIBLE, Address Address:</span></span>
<span class="line"><span style="color:#24292e;">OK4, Return address: OK2</span></span>
<span class="line"><span style="color:#24292e;">Delivering Mail 5 automatically</span></span>
<span class="line"><span style="color:#24292e;">*****</span></span>
<span class="line"><span style="color:#24292e;">Mail 6, General Delivery: YES, Address Scanability:</span></span>
<span class="line"><span style="color:#24292e;">YES4, Address Readability: ILLEGIBLE, Address Address:</span></span>
<span class="line"><span style="color:#24292e;">OK4, Return address: OK4</span></span>
<span class="line"><span style="color:#24292e;">Using general delivery for Mail 6</span></span>
<span class="line"><span style="color:#24292e;">*****</span></span>
<span class="line"><span style="color:#24292e;">Mail 7, General Delivery: YES, Address Scanability:</span></span>
<span class="line"><span style="color:#24292e;">YES3, Address Readability: YES4, Address Address: OK2,</span></span>
<span class="line"><span style="color:#24292e;">Return address: MISSING</span></span>
<span class="line"><span style="color:#24292e;">Using general delivery for Mail 7</span></span>
<span class="line"><span style="color:#24292e;">*****</span></span>
<span class="line"><span style="color:#24292e;">Mail 8, General Delivery: NO3, Address Scanability:</span></span>
<span class="line"><span style="color:#24292e;">YES1, Address Readability: YES3, Address Address:</span></span>
<span class="line"><span style="color:#24292e;">INCORRECT, Return address: MISSING</span></span>
<span class="line"><span style="color:#24292e;">Mail 8 is a dead letter</span></span>
<span class="line"><span style="color:#24292e;">*****</span></span>
<span class="line"><span style="color:#24292e;">Mail 9, General Delivery: NO1, Address Scanability:</span></span>
<span class="line"><span style="color:#24292e;">UNSCANNABLE, Address Readability: YES2, Address</span></span>
<span class="line"><span style="color:#24292e;">Address: OK1, Return address: OK4</span></span>
<span class="line"><span style="color:#24292e;">Delivering Mail 9 normally</span></span>
<span class="line"><span style="color:#24292e;">*****</span></span></code></pre></div><p>职责链由 enum MailHandler 实现，而 enum 定义的次序决定了各个解决策略在应用时的次序。对每一封邮件，都要按此顺序尝试每个解决策略，直到其中一个能够成功地处理该邮件，如果所有的策略都失败了，那么该邮件将被判定为一封死信。</p><h3 id="使用-enum-的状态机" tabindex="-1">使用 enum 的状态机 <a class="header-anchor" href="#使用-enum-的状态机" aria-label="Permalink to &quot;使用 enum 的状态机&quot;">​</a></h3><p>枚举类型非常适合用来创建状态机。一个状态机可以具有有限个特定的状态，它通常根据输入，从一个状态转移到下一个状态，不过也可能存在瞬时状态（transient states），而一旦任务执行结束，状态机就会立刻离开瞬时状态。</p><p>每个状态都具有某些可接受的输入，不同的输入会使状态机从当前状态转移到不同的新状态。由于 enum 对其实例有严格限制，非常适合用来表现不同的状态和输入。一般而言，每个状态都具有一些相关的输出。</p><p>自动售贷机是一个很好的状态机的例子。首先，我们用一个 enum 定义各种输入：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// enums/Input.java</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> java.util.</span><span style="color:#79B8FF;">*</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">enum</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Input</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">NICKEL</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">), </span><span style="color:#79B8FF;">DIME</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">), </span><span style="color:#79B8FF;">QUARTER</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">25</span><span style="color:#E1E4E8;">), </span><span style="color:#79B8FF;">DOLLAR</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">100</span><span style="color:#E1E4E8;">),</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">TOOTHPASTE</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">200</span><span style="color:#E1E4E8;">), </span><span style="color:#79B8FF;">CHIPS</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">75</span><span style="color:#E1E4E8;">), </span><span style="color:#79B8FF;">SODA</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">100</span><span style="color:#E1E4E8;">), </span><span style="color:#79B8FF;">SOAP</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">50</span><span style="color:#E1E4E8;">),</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">ABORT_TRANSACTION</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">amount</span><span style="color:#E1E4E8;">() { </span><span style="color:#6A737D;">// Disallow</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">RuntimeException</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;ABORT.amount()&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    },</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">STOP</span><span style="color:#E1E4E8;"> { </span><span style="color:#6A737D;">// This must be the last instance.</span></span>
<span class="line"><span style="color:#E1E4E8;">        @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">amount</span><span style="color:#E1E4E8;">() { </span><span style="color:#6A737D;">// Disallow</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">RuntimeException</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;SHUT_DOWN.amount()&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    };</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> value; </span><span style="color:#6A737D;">// In cents</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">Input</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">value</span><span style="color:#E1E4E8;">) { </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.value </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> value; }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">Input</span><span style="color:#E1E4E8;">() {}</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">amount</span><span style="color:#E1E4E8;">() { </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> value; }; </span><span style="color:#6A737D;">// In cents</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> Random rand </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Random</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">47</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> Input </span><span style="color:#B392F0;">randomSelection</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// Don&#39;t include STOP:</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">values</span><span style="color:#E1E4E8;">()[rand.</span><span style="color:#B392F0;">nextInt</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">values</span><span style="color:#E1E4E8;">().length </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">)];</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// enums/Input.java</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> java.util.</span><span style="color:#005CC5;">*</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">enum</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Input</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">NICKEL</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">5</span><span style="color:#24292E;">), </span><span style="color:#005CC5;">DIME</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">10</span><span style="color:#24292E;">), </span><span style="color:#005CC5;">QUARTER</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">25</span><span style="color:#24292E;">), </span><span style="color:#005CC5;">DOLLAR</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">100</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">TOOTHPASTE</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">200</span><span style="color:#24292E;">), </span><span style="color:#005CC5;">CHIPS</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">75</span><span style="color:#24292E;">), </span><span style="color:#005CC5;">SODA</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">100</span><span style="color:#24292E;">), </span><span style="color:#005CC5;">SOAP</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">50</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">ABORT_TRANSACTION</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">amount</span><span style="color:#24292E;">() { </span><span style="color:#6A737D;">// Disallow</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">RuntimeException</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;ABORT.amount()&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    },</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">STOP</span><span style="color:#24292E;"> { </span><span style="color:#6A737D;">// This must be the last instance.</span></span>
<span class="line"><span style="color:#24292E;">        @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">amount</span><span style="color:#24292E;">() { </span><span style="color:#6A737D;">// Disallow</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">RuntimeException</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;SHUT_DOWN.amount()&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    };</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> value; </span><span style="color:#6A737D;">// In cents</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">Input</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">value</span><span style="color:#24292E;">) { </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.value </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> value; }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">Input</span><span style="color:#24292E;">() {}</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">amount</span><span style="color:#24292E;">() { </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> value; }; </span><span style="color:#6A737D;">// In cents</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> Random rand </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Random</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">47</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> Input </span><span style="color:#6F42C1;">randomSelection</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// Don&#39;t include STOP:</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">values</span><span style="color:#24292E;">()[rand.</span><span style="color:#6F42C1;">nextInt</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">values</span><span style="color:#24292E;">().length </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">)];</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>注意，除了两个特殊的 Input 实例之外，其他的 Input 都有相应的价格，因此在接口中定义了 amount（方法。然而，对那两个特殊 Input 实例而言，调用 amount（方法并不合适，所以如果程序员调用它们的 amount）方法就会有异常抛出（在接口内定义了一个方法，然后在你调用该方法的某个实现时就会抛出异常），这似乎有点奇怪，但由于 enum 的限制，我们不得不采用这种方式。</p><p>VendingMachine 对输入的第一个反应是将其归类为 Category enum 中的某一个 enum 实例，这可以通过 switch 实现。下面的例子演示了 enum 是如何使代码变得更加清晰且易于管理的：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// enums/VendingMachine.java</span></span>
<span class="line"><span style="color:#6A737D;">// {java VendingMachine VendingMachineInput.txt}</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> java.util.</span><span style="color:#79B8FF;">*</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> java.io.IOException;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> java.util.function.</span><span style="color:#79B8FF;">*</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> java.nio.file.</span><span style="color:#79B8FF;">*</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> java.util.stream.</span><span style="color:#79B8FF;">*</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">enum</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Category</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">MONEY</span><span style="color:#E1E4E8;">(Input.NICKEL, Input.DIME,</span></span>
<span class="line"><span style="color:#E1E4E8;">            Input.QUARTER, Input.DOLLAR),</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">ITEM_SELECTION</span><span style="color:#E1E4E8;">(Input.TOOTHPASTE, Input.CHIPS,</span></span>
<span class="line"><span style="color:#E1E4E8;">            Input.SODA, Input.SOAP),</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">QUIT_TRANSACTION</span><span style="color:#E1E4E8;">(Input.ABORT_TRANSACTION),</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">SHUT_DOWN</span><span style="color:#E1E4E8;">(Input.STOP);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">Input</span><span style="color:#E1E4E8;">[] values;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">Category</span><span style="color:#E1E4E8;">(Input... </span><span style="color:#FFAB70;">types</span><span style="color:#E1E4E8;">) { values </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> types; }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> EnumMap&lt;</span><span style="color:#F97583;">Input</span><span style="color:#E1E4E8;">,</span><span style="color:#F97583;">Category</span><span style="color:#E1E4E8;">&gt; categories </span><span style="color:#F97583;">=</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> EnumMap&lt;&gt;(Input.class);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;">(Category c </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> Category.class.</span><span style="color:#B392F0;">getEnumConstants</span><span style="color:#E1E4E8;">())</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;">(Input type </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> c.values)</span></span>
<span class="line"><span style="color:#E1E4E8;">                categories.</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(type, c);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> Category </span><span style="color:#B392F0;">categorize</span><span style="color:#E1E4E8;">(Input </span><span style="color:#FFAB70;">input</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> categories.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(input);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">VendingMachine</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> State state </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> State.RESTING;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> amount </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> Input selection </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">enum</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">StateDuration</span><span style="color:#E1E4E8;"> { </span><span style="color:#79B8FF;">TRANSIENT</span><span style="color:#E1E4E8;"> } </span><span style="color:#6A737D;">// Tagging enum</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">enum</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">State</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">RESTING</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">next</span><span style="color:#E1E4E8;">(Input </span><span style="color:#FFAB70;">input</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">switch</span><span style="color:#E1E4E8;">(Category.</span><span style="color:#B392F0;">categorize</span><span style="color:#E1E4E8;">(input)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> MONEY</span><span style="color:#F97583;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">                        amount </span><span style="color:#F97583;">+=</span><span style="color:#E1E4E8;"> input.</span><span style="color:#B392F0;">amount</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">                        state </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ADDING_MONEY;</span></span>
<span class="line"><span style="color:#E1E4E8;">                        </span><span style="color:#F97583;">break</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> SHUT_DOWN</span><span style="color:#F97583;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">                        state </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> TERMINAL;</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#F97583;">default:</span></span>
<span class="line"><span style="color:#E1E4E8;">                }</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">        },</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">ADDING_MONEY</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">next</span><span style="color:#E1E4E8;">(Input </span><span style="color:#FFAB70;">input</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">switch</span><span style="color:#E1E4E8;">(Category.</span><span style="color:#B392F0;">categorize</span><span style="color:#E1E4E8;">(input)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> MONEY</span><span style="color:#F97583;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">                        amount </span><span style="color:#F97583;">+=</span><span style="color:#E1E4E8;"> input.</span><span style="color:#B392F0;">amount</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">                        </span><span style="color:#F97583;">break</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> ITEM_SELECTION</span><span style="color:#F97583;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">                        selection </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> input;</span></span>
<span class="line"><span style="color:#E1E4E8;">                        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(amount </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> selection.</span><span style="color:#B392F0;">amount</span><span style="color:#E1E4E8;">())</span></span>
<span class="line"><span style="color:#E1E4E8;">                            System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">                                    </span><span style="color:#9ECBFF;">&quot;Insufficient money for &quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> selection);</span></span>
<span class="line"><span style="color:#E1E4E8;">                        </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> state </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> DISPENSING;</span></span>
<span class="line"><span style="color:#E1E4E8;">                        </span><span style="color:#F97583;">break</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> QUIT_TRANSACTION</span><span style="color:#F97583;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">                        state </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> GIVING_CHANGE;</span></span>
<span class="line"><span style="color:#E1E4E8;">                        </span><span style="color:#F97583;">break</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> SHUT_DOWN</span><span style="color:#F97583;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">                        state </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> TERMINAL;</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#F97583;">default:</span></span>
<span class="line"><span style="color:#E1E4E8;">                }</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">        },</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">DISPENSING</span><span style="color:#E1E4E8;">(StateDuration.TRANSIENT) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">next</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">                System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;here is your &quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> selection);</span></span>
<span class="line"><span style="color:#E1E4E8;">                amount </span><span style="color:#F97583;">-=</span><span style="color:#E1E4E8;"> selection.</span><span style="color:#B392F0;">amount</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">                state </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> GIVING_CHANGE;</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">        },</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">GIVING_CHANGE</span><span style="color:#E1E4E8;">(StateDuration.TRANSIENT) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">next</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(amount </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                    System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Your change: &quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> amount);</span></span>
<span class="line"><span style="color:#E1E4E8;">                    amount </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">                }</span></span>
<span class="line"><span style="color:#E1E4E8;">                state </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> RESTING;</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">        },</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">TERMINAL</span><span style="color:#E1E4E8;"> {@</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">output</span><span style="color:#E1E4E8;">() { System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Halted&quot;</span><span style="color:#E1E4E8;">); } };</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> isTransient </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">State</span><span style="color:#E1E4E8;">() {}</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">State</span><span style="color:#E1E4E8;">(StateDuration </span><span style="color:#FFAB70;">trans</span><span style="color:#E1E4E8;">) { isTransient </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">; }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">next</span><span style="color:#E1E4E8;">(Input </span><span style="color:#FFAB70;">input</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">RuntimeException</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Only call &quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#9ECBFF;">&quot;next(Input input) for non-transient states&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">next</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">RuntimeException</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#9ECBFF;">&quot;Only call next() for &quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span></span>
<span class="line"><span style="color:#E1E4E8;">                            </span><span style="color:#9ECBFF;">&quot;StateDuration.TRANSIENT states&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">output</span><span style="color:#E1E4E8;">() { System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(amount); }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">run</span><span style="color:#E1E4E8;">(Supplier&lt;</span><span style="color:#F97583;">Input</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#FFAB70;">gen</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">while</span><span style="color:#E1E4E8;">(state </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> State.TERMINAL) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            state.</span><span style="color:#B392F0;">next</span><span style="color:#E1E4E8;">(gen.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">while</span><span style="color:#E1E4E8;">(state.isTransient)</span></span>
<span class="line"><span style="color:#E1E4E8;">                state.</span><span style="color:#B392F0;">next</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">            state.</span><span style="color:#B392F0;">output</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] </span><span style="color:#FFAB70;">args</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        Supplier&lt;</span><span style="color:#F97583;">Input</span><span style="color:#E1E4E8;">&gt; gen </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">RandomInputSupplier</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(args.length </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">            gen </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">FileInputSupplier</span><span style="color:#E1E4E8;">(args[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">]);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">run</span><span style="color:#E1E4E8;">(gen);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// For a basic sanity check:</span></span>
<span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">RandomInputSupplier</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">implements</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Supplier</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#F97583;">Input</span><span style="color:#E1E4E8;">&gt; {</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> Input </span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> Input.</span><span style="color:#B392F0;">randomSelection</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// Create Inputs from a file of &#39;;&#39;-separated strings:</span></span>
<span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">FileInputSupplier</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">implements</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Supplier</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#F97583;">Input</span><span style="color:#E1E4E8;">&gt; {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> Iterator&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; input;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">FileInputSupplier</span><span style="color:#E1E4E8;">(String </span><span style="color:#FFAB70;">fileName</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            input </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Files.</span><span style="color:#B392F0;">lines</span><span style="color:#E1E4E8;">(Paths.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(fileName))</span></span>
<span class="line"><span style="color:#E1E4E8;">                    .</span><span style="color:#B392F0;">skip</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// Skip the comment line</span></span>
<span class="line"><span style="color:#E1E4E8;">                    .</span><span style="color:#B392F0;">flatMap</span><span style="color:#E1E4E8;">(s </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> Arrays.</span><span style="color:#B392F0;">stream</span><span style="color:#E1E4E8;">(s.</span><span style="color:#B392F0;">split</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;;&quot;</span><span style="color:#E1E4E8;">)))</span></span>
<span class="line"><span style="color:#E1E4E8;">                    .</span><span style="color:#B392F0;">map</span><span style="color:#E1E4E8;">(String</span><span style="color:#F97583;">::</span><span style="color:#E1E4E8;">trim)</span></span>
<span class="line"><span style="color:#E1E4E8;">                    .</span><span style="color:#B392F0;">collect</span><span style="color:#E1E4E8;">(Collectors.</span><span style="color:#B392F0;">toList</span><span style="color:#E1E4E8;">())</span></span>
<span class="line"><span style="color:#E1E4E8;">                    .</span><span style="color:#B392F0;">iterator</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;">(IOException </span><span style="color:#FFAB70;">e</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">RuntimeException</span><span style="color:#E1E4E8;">(e);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> Input </span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">input.</span><span style="color:#B392F0;">hasNext</span><span style="color:#E1E4E8;">())</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> Enum.</span><span style="color:#B392F0;">valueOf</span><span style="color:#E1E4E8;">(Input.class, input.</span><span style="color:#B392F0;">next</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">trim</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// enums/VendingMachine.java</span></span>
<span class="line"><span style="color:#6A737D;">// {java VendingMachine VendingMachineInput.txt}</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> java.util.</span><span style="color:#005CC5;">*</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> java.io.IOException;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> java.util.function.</span><span style="color:#005CC5;">*</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> java.nio.file.</span><span style="color:#005CC5;">*</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> java.util.stream.</span><span style="color:#005CC5;">*</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">enum</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Category</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">MONEY</span><span style="color:#24292E;">(Input.NICKEL, Input.DIME,</span></span>
<span class="line"><span style="color:#24292E;">            Input.QUARTER, Input.DOLLAR),</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">ITEM_SELECTION</span><span style="color:#24292E;">(Input.TOOTHPASTE, Input.CHIPS,</span></span>
<span class="line"><span style="color:#24292E;">            Input.SODA, Input.SOAP),</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">QUIT_TRANSACTION</span><span style="color:#24292E;">(Input.ABORT_TRANSACTION),</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">SHUT_DOWN</span><span style="color:#24292E;">(Input.STOP);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">Input</span><span style="color:#24292E;">[] values;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">Category</span><span style="color:#24292E;">(Input... </span><span style="color:#E36209;">types</span><span style="color:#24292E;">) { values </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> types; }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> EnumMap&lt;</span><span style="color:#D73A49;">Input</span><span style="color:#24292E;">,</span><span style="color:#D73A49;">Category</span><span style="color:#24292E;">&gt; categories </span><span style="color:#D73A49;">=</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> EnumMap&lt;&gt;(Input.class);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">for</span><span style="color:#24292E;">(Category c </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> Category.class.</span><span style="color:#6F42C1;">getEnumConstants</span><span style="color:#24292E;">())</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">for</span><span style="color:#24292E;">(Input type </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> c.values)</span></span>
<span class="line"><span style="color:#24292E;">                categories.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(type, c);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> Category </span><span style="color:#6F42C1;">categorize</span><span style="color:#24292E;">(Input </span><span style="color:#E36209;">input</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> categories.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(input);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">VendingMachine</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> State state </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> State.RESTING;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> amount </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> Input selection </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">enum</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">StateDuration</span><span style="color:#24292E;"> { </span><span style="color:#005CC5;">TRANSIENT</span><span style="color:#24292E;"> } </span><span style="color:#6A737D;">// Tagging enum</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">enum</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">State</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">RESTING</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">next</span><span style="color:#24292E;">(Input </span><span style="color:#E36209;">input</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">switch</span><span style="color:#24292E;">(Category.</span><span style="color:#6F42C1;">categorize</span><span style="color:#24292E;">(input)) {</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> MONEY</span><span style="color:#D73A49;">:</span></span>
<span class="line"><span style="color:#24292E;">                        amount </span><span style="color:#D73A49;">+=</span><span style="color:#24292E;"> input.</span><span style="color:#6F42C1;">amount</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">                        state </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ADDING_MONEY;</span></span>
<span class="line"><span style="color:#24292E;">                        </span><span style="color:#D73A49;">break</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> SHUT_DOWN</span><span style="color:#D73A49;">:</span></span>
<span class="line"><span style="color:#24292E;">                        state </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> TERMINAL;</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#D73A49;">default:</span></span>
<span class="line"><span style="color:#24292E;">                }</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">        },</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">ADDING_MONEY</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">next</span><span style="color:#24292E;">(Input </span><span style="color:#E36209;">input</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">switch</span><span style="color:#24292E;">(Category.</span><span style="color:#6F42C1;">categorize</span><span style="color:#24292E;">(input)) {</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> MONEY</span><span style="color:#D73A49;">:</span></span>
<span class="line"><span style="color:#24292E;">                        amount </span><span style="color:#D73A49;">+=</span><span style="color:#24292E;"> input.</span><span style="color:#6F42C1;">amount</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">                        </span><span style="color:#D73A49;">break</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> ITEM_SELECTION</span><span style="color:#D73A49;">:</span></span>
<span class="line"><span style="color:#24292E;">                        selection </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> input;</span></span>
<span class="line"><span style="color:#24292E;">                        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(amount </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> selection.</span><span style="color:#6F42C1;">amount</span><span style="color:#24292E;">())</span></span>
<span class="line"><span style="color:#24292E;">                            System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">                                    </span><span style="color:#032F62;">&quot;Insufficient money for &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> selection);</span></span>
<span class="line"><span style="color:#24292E;">                        </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> state </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> DISPENSING;</span></span>
<span class="line"><span style="color:#24292E;">                        </span><span style="color:#D73A49;">break</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> QUIT_TRANSACTION</span><span style="color:#D73A49;">:</span></span>
<span class="line"><span style="color:#24292E;">                        state </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> GIVING_CHANGE;</span></span>
<span class="line"><span style="color:#24292E;">                        </span><span style="color:#D73A49;">break</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> SHUT_DOWN</span><span style="color:#D73A49;">:</span></span>
<span class="line"><span style="color:#24292E;">                        state </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> TERMINAL;</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#D73A49;">default:</span></span>
<span class="line"><span style="color:#24292E;">                }</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">        },</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">DISPENSING</span><span style="color:#24292E;">(StateDuration.TRANSIENT) {</span></span>
<span class="line"><span style="color:#24292E;">            @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">next</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">                System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;here is your &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> selection);</span></span>
<span class="line"><span style="color:#24292E;">                amount </span><span style="color:#D73A49;">-=</span><span style="color:#24292E;"> selection.</span><span style="color:#6F42C1;">amount</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">                state </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> GIVING_CHANGE;</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">        },</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">GIVING_CHANGE</span><span style="color:#24292E;">(StateDuration.TRANSIENT) {</span></span>
<span class="line"><span style="color:#24292E;">            @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">next</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(amount </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">                    System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Your change: &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> amount);</span></span>
<span class="line"><span style="color:#24292E;">                    amount </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">                }</span></span>
<span class="line"><span style="color:#24292E;">                state </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> RESTING;</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">        },</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">TERMINAL</span><span style="color:#24292E;"> {@</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">output</span><span style="color:#24292E;">() { System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Halted&quot;</span><span style="color:#24292E;">); } };</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> isTransient </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">State</span><span style="color:#24292E;">() {}</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">State</span><span style="color:#24292E;">(StateDuration </span><span style="color:#E36209;">trans</span><span style="color:#24292E;">) { isTransient </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">; }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">next</span><span style="color:#24292E;">(Input </span><span style="color:#E36209;">input</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">RuntimeException</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Only call &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#032F62;">&quot;next(Input input) for non-transient states&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">next</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">RuntimeException</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#032F62;">&quot;Only call next() for &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span></span>
<span class="line"><span style="color:#24292E;">                            </span><span style="color:#032F62;">&quot;StateDuration.TRANSIENT states&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">output</span><span style="color:#24292E;">() { System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(amount); }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">run</span><span style="color:#24292E;">(Supplier&lt;</span><span style="color:#D73A49;">Input</span><span style="color:#24292E;">&gt; </span><span style="color:#E36209;">gen</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">while</span><span style="color:#24292E;">(state </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> State.TERMINAL) {</span></span>
<span class="line"><span style="color:#24292E;">            state.</span><span style="color:#6F42C1;">next</span><span style="color:#24292E;">(gen.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">while</span><span style="color:#24292E;">(state.isTransient)</span></span>
<span class="line"><span style="color:#24292E;">                state.</span><span style="color:#6F42C1;">next</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">            state.</span><span style="color:#6F42C1;">output</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        Supplier&lt;</span><span style="color:#D73A49;">Input</span><span style="color:#24292E;">&gt; gen </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">RandomInputSupplier</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(args.length </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">            gen </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">FileInputSupplier</span><span style="color:#24292E;">(args[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">]);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">run</span><span style="color:#24292E;">(gen);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// For a basic sanity check:</span></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">RandomInputSupplier</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Supplier</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">Input</span><span style="color:#24292E;">&gt; {</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Input </span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> Input.</span><span style="color:#6F42C1;">randomSelection</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// Create Inputs from a file of &#39;;&#39;-separated strings:</span></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">FileInputSupplier</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Supplier</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">Input</span><span style="color:#24292E;">&gt; {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> Iterator&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; input;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">FileInputSupplier</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">fileName</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            input </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Files.</span><span style="color:#6F42C1;">lines</span><span style="color:#24292E;">(Paths.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(fileName))</span></span>
<span class="line"><span style="color:#24292E;">                    .</span><span style="color:#6F42C1;">skip</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// Skip the comment line</span></span>
<span class="line"><span style="color:#24292E;">                    .</span><span style="color:#6F42C1;">flatMap</span><span style="color:#24292E;">(s </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> Arrays.</span><span style="color:#6F42C1;">stream</span><span style="color:#24292E;">(s.</span><span style="color:#6F42C1;">split</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;;&quot;</span><span style="color:#24292E;">)))</span></span>
<span class="line"><span style="color:#24292E;">                    .</span><span style="color:#6F42C1;">map</span><span style="color:#24292E;">(String</span><span style="color:#D73A49;">::</span><span style="color:#24292E;">trim)</span></span>
<span class="line"><span style="color:#24292E;">                    .</span><span style="color:#6F42C1;">collect</span><span style="color:#24292E;">(Collectors.</span><span style="color:#6F42C1;">toList</span><span style="color:#24292E;">())</span></span>
<span class="line"><span style="color:#24292E;">                    .</span><span style="color:#6F42C1;">iterator</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;">(IOException </span><span style="color:#E36209;">e</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">RuntimeException</span><span style="color:#24292E;">(e);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Input </span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">input.</span><span style="color:#6F42C1;">hasNext</span><span style="color:#24292E;">())</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> Enum.</span><span style="color:#6F42C1;">valueOf</span><span style="color:#24292E;">(Input.class, input.</span><span style="color:#6F42C1;">next</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">trim</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>输出为：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">25</span></span>
<span class="line"><span style="color:#e1e4e8;">50</span></span>
<span class="line"><span style="color:#e1e4e8;">75</span></span>
<span class="line"><span style="color:#e1e4e8;">here is your CHIPS</span></span>
<span class="line"><span style="color:#e1e4e8;">0</span></span>
<span class="line"><span style="color:#e1e4e8;">100</span></span>
<span class="line"><span style="color:#e1e4e8;">200</span></span>
<span class="line"><span style="color:#e1e4e8;">here is your TOOTHPASTE</span></span>
<span class="line"><span style="color:#e1e4e8;">0</span></span>
<span class="line"><span style="color:#e1e4e8;">25</span></span>
<span class="line"><span style="color:#e1e4e8;">35</span></span>
<span class="line"><span style="color:#e1e4e8;">Your change: 35</span></span>
<span class="line"><span style="color:#e1e4e8;">0</span></span>
<span class="line"><span style="color:#e1e4e8;">25</span></span>
<span class="line"><span style="color:#e1e4e8;">35</span></span>
<span class="line"><span style="color:#e1e4e8;">Insufficient money for SODA</span></span>
<span class="line"><span style="color:#e1e4e8;">35</span></span>
<span class="line"><span style="color:#e1e4e8;">60</span></span>
<span class="line"><span style="color:#e1e4e8;">70</span></span>
<span class="line"><span style="color:#e1e4e8;">75</span></span>
<span class="line"><span style="color:#e1e4e8;">Insufficient money for SODA</span></span>
<span class="line"><span style="color:#e1e4e8;">75</span></span>
<span class="line"><span style="color:#e1e4e8;">Your change: 75</span></span>
<span class="line"><span style="color:#e1e4e8;">0</span></span>
<span class="line"><span style="color:#e1e4e8;">Halted</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">25</span></span>
<span class="line"><span style="color:#24292e;">50</span></span>
<span class="line"><span style="color:#24292e;">75</span></span>
<span class="line"><span style="color:#24292e;">here is your CHIPS</span></span>
<span class="line"><span style="color:#24292e;">0</span></span>
<span class="line"><span style="color:#24292e;">100</span></span>
<span class="line"><span style="color:#24292e;">200</span></span>
<span class="line"><span style="color:#24292e;">here is your TOOTHPASTE</span></span>
<span class="line"><span style="color:#24292e;">0</span></span>
<span class="line"><span style="color:#24292e;">25</span></span>
<span class="line"><span style="color:#24292e;">35</span></span>
<span class="line"><span style="color:#24292e;">Your change: 35</span></span>
<span class="line"><span style="color:#24292e;">0</span></span>
<span class="line"><span style="color:#24292e;">25</span></span>
<span class="line"><span style="color:#24292e;">35</span></span>
<span class="line"><span style="color:#24292e;">Insufficient money for SODA</span></span>
<span class="line"><span style="color:#24292e;">35</span></span>
<span class="line"><span style="color:#24292e;">60</span></span>
<span class="line"><span style="color:#24292e;">70</span></span>
<span class="line"><span style="color:#24292e;">75</span></span>
<span class="line"><span style="color:#24292e;">Insufficient money for SODA</span></span>
<span class="line"><span style="color:#24292e;">75</span></span>
<span class="line"><span style="color:#24292e;">Your change: 75</span></span>
<span class="line"><span style="color:#24292e;">0</span></span>
<span class="line"><span style="color:#24292e;">Halted</span></span></code></pre></div><p>由于用 switch 语句从 enum 实例中进行选择是最常见的一种方式（请注意，为了使 enum 在 switch 语句中的使用变得简单，我们是需要付出其他代价的），所以，我们经常遇到这样的问题：将多个 enum 进行分类时，“我们希望在什么 enum 中使用 switch 语句？”我们通过 VendingMachine 的例子来研究一下这个问题。对于每一个 State，我们都需要在输入动作的基本分类中进行查找：用户塞入钞票，选择了某个货物，操作被取消，以及机器停止。然而，在这些基本分类之下，我们又可以塞人不同类型的钞票，可以选择不同的货物。Category enum 将不同类型的 Input 进行分组，因而，可以使用 categorize0 方法为 switch 语句生成恰当的 Cateroy 实例。并且，该方法使用的 EnumMap 确保了在其中进行查询时的效率与安全。</p><p>如果读者仔细研究 VendingMachine 类，就会发现每种状态的不同之处，以及对于输入的不同响应，其中还有两个瞬时状态。在 run() 方法中，状态机等待着下一个 Input，并一直在各个状态中移动，直到它不再处于瞬时状态。</p><p>通过两种不同的 Generator 对象，我们可以使用不同的 Supplier 对象来测试 VendingMachine，首先是 RandomInputSupplier，它会不停地生成除了 SHUT-DOWN 之外的各种输入。通过长时间地运行 RandomInputSupplier，可以起到健全测试（sanity test）的作用，能够确保该状态机不会进入一个错误状态。另一个是 FileInputSupplier，使用文件以文本的方式来描述输入，然后将它们转换成 enum 实例，并创建对应的 Input 对象。上面的程序使用的正是如下的文本文件：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">// enums/VendingMachineInput.txt</span></span>
<span class="line"><span style="color:#e1e4e8;">QUARTER; QUARTER; QUARTER; CHIPS;</span></span>
<span class="line"><span style="color:#e1e4e8;">DOLLAR; DOLLAR; TOOTHPASTE;</span></span>
<span class="line"><span style="color:#e1e4e8;">QUARTER; DIME; ABORT_TRANSACTION;</span></span>
<span class="line"><span style="color:#e1e4e8;">QUARTER; DIME; SODA;</span></span>
<span class="line"><span style="color:#e1e4e8;">QUARTER; DIME; NICKEL; SODA;</span></span>
<span class="line"><span style="color:#e1e4e8;">ABORT_TRANSACTION;</span></span>
<span class="line"><span style="color:#e1e4e8;">STOP;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">// enums/VendingMachineInput.txt</span></span>
<span class="line"><span style="color:#24292e;">QUARTER; QUARTER; QUARTER; CHIPS;</span></span>
<span class="line"><span style="color:#24292e;">DOLLAR; DOLLAR; TOOTHPASTE;</span></span>
<span class="line"><span style="color:#24292e;">QUARTER; DIME; ABORT_TRANSACTION;</span></span>
<span class="line"><span style="color:#24292e;">QUARTER; DIME; SODA;</span></span>
<span class="line"><span style="color:#24292e;">QUARTER; DIME; NICKEL; SODA;</span></span>
<span class="line"><span style="color:#24292e;">ABORT_TRANSACTION;</span></span>
<span class="line"><span style="color:#24292e;">STOP;</span></span></code></pre></div><p>FileInputSupplier 构造函数将此文件转换为流，并跳过注释行。然后它使用 String.split() 以分号进行分割。这会生成一个 String 数组，并可以通过将其转换为 Stream，然后应用 flatMap() 来将其输入到流中。其输出结果将去除所有空格空格，并转换为 List&lt;String&gt;，且从中获取 Iterator&lt;String&gt;。</p><p>这种设计有一个缺陷，它要求 enum State 实例访问的 VendingMachine 属性必须声明为 static，这意味着，你只能有一个 VendingMachine 实例。不过如果我们思考一下实际的（嵌入式 Java）应用，这也许并不是一个大问题，因为在一台机器上，我们可能只有一个应用程序。</p><h2 id="多路分发" tabindex="-1">多路分发 <a class="header-anchor" href="#多路分发" aria-label="Permalink to &quot;多路分发&quot;">​</a></h2><p>当你要处理多种交互类型时，程序可能会变得相当杂乱。举例来说，如果一个系统要分析和执行数学表达式。我们可能会声明 Number.plus(Number)，Number.multiple(Number) 等等，其中 Number 是各种数字对象的超类。然而，当你声明 a.plus(b) 时，你并不知道 a 或 b 的确切类型，那你如何能让它们正确地交互呢？</p><p>你可能从未思考过这个问题的答案.Java 只支持单路分发。也就是说，如果要执行的操作包含了不止一个类型未知的对象时，那么 Java 的动态绑定机制只能处理其中一个的类型。这就无法解决我们上面提到的问题。所以，你必须自己来判定其他的类型，从而实现自己的动态线定行为。</p><p>解决上面问题的办法就是多路分发（在那个例子中，只有两个分发，一般称之为两路分发）.多态只能发生在方法调用时，所以，如果你想使用两路分发，那么就必须有两个方法调用：第一个方法调用决定第一个未知类型，第二个方法调用决定第二个未知的类型。要利用多路分发，程序员必须为每一个类型提供一个实际的方法调用，如果你要处理两个不同的类型体系，就需要为每个类型体系执行一个方法调用。一般而言，程序员需要有设定好的某种配置，以便一个方法调用能够引出更多的方法调用，从而能够在这个过程中处理多种类型。为了达到这种效果，我们需要与多个方法一同工作：因为每个分发都需要一个方法调用。在下面的例子中（实现了 “石头、剪刀、布”游戏，也称为 RoShamBo）对应的方法是 compete() 和 eval()，二者都是同一个类型的成员，它们可以产生三种 Outcome 实例中的一个作为结果：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// enums/Outcome.java</span></span>
<span class="line"><span style="color:#F97583;">package</span><span style="color:#E1E4E8;"> enums;</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">enum</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Outcome</span><span style="color:#E1E4E8;"> { </span><span style="color:#79B8FF;">WIN</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">LOSE</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">DRAW</span><span style="color:#E1E4E8;"> }</span></span>
<span class="line"><span style="color:#6A737D;">// enums/RoShamBo1.java</span></span>
<span class="line"><span style="color:#6A737D;">// Demonstration of multiple dispatching</span></span>
<span class="line"><span style="color:#6A737D;">// {java enums.RoShamBo1}</span></span>
<span class="line"><span style="color:#F97583;">package</span><span style="color:#E1E4E8;"> enums;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> java.util.</span><span style="color:#79B8FF;">*</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> enums.Outcome.</span><span style="color:#79B8FF;">*</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Item</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    Outcome </span><span style="color:#B392F0;">compete</span><span style="color:#E1E4E8;">(Item </span><span style="color:#FFAB70;">it</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    Outcome </span><span style="color:#B392F0;">eval</span><span style="color:#E1E4E8;">(Paper </span><span style="color:#FFAB70;">p</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    Outcome </span><span style="color:#B392F0;">eval</span><span style="color:#E1E4E8;">(Scissors </span><span style="color:#FFAB70;">s</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    Outcome </span><span style="color:#B392F0;">eval</span><span style="color:#E1E4E8;">(Rock </span><span style="color:#FFAB70;">r</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Paper</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">implements</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Item</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> Outcome </span><span style="color:#B392F0;">compete</span><span style="color:#E1E4E8;">(Item </span><span style="color:#FFAB70;">it</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> it.</span><span style="color:#B392F0;">eval</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> Outcome </span><span style="color:#B392F0;">eval</span><span style="color:#E1E4E8;">(Paper </span><span style="color:#FFAB70;">p</span><span style="color:#E1E4E8;">) { </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> DRAW; }</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> Outcome </span><span style="color:#B392F0;">eval</span><span style="color:#E1E4E8;">(Scissors </span><span style="color:#FFAB70;">s</span><span style="color:#E1E4E8;">) { </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> WIN; }</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> Outcome </span><span style="color:#B392F0;">eval</span><span style="color:#E1E4E8;">(Rock </span><span style="color:#FFAB70;">r</span><span style="color:#E1E4E8;">) { </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> LOSE; }</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> String </span><span style="color:#B392F0;">toString</span><span style="color:#E1E4E8;">() { </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;Paper&quot;</span><span style="color:#E1E4E8;">; }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Scissors</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">implements</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Item</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> Outcome </span><span style="color:#B392F0;">compete</span><span style="color:#E1E4E8;">(Item </span><span style="color:#FFAB70;">it</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> it.</span><span style="color:#B392F0;">eval</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> Outcome </span><span style="color:#B392F0;">eval</span><span style="color:#E1E4E8;">(Paper </span><span style="color:#FFAB70;">p</span><span style="color:#E1E4E8;">) { </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> LOSE; }</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> Outcome </span><span style="color:#B392F0;">eval</span><span style="color:#E1E4E8;">(Scissors </span><span style="color:#FFAB70;">s</span><span style="color:#E1E4E8;">) { </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> DRAW; }</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> Outcome </span><span style="color:#B392F0;">eval</span><span style="color:#E1E4E8;">(Rock </span><span style="color:#FFAB70;">r</span><span style="color:#E1E4E8;">) { </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> WIN; }</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> String </span><span style="color:#B392F0;">toString</span><span style="color:#E1E4E8;">() { </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;Scissors&quot;</span><span style="color:#E1E4E8;">; }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Rock</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">implements</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Item</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> Outcome </span><span style="color:#B392F0;">compete</span><span style="color:#E1E4E8;">(Item </span><span style="color:#FFAB70;">it</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> it.</span><span style="color:#B392F0;">eval</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> Outcome </span><span style="color:#B392F0;">eval</span><span style="color:#E1E4E8;">(Paper </span><span style="color:#FFAB70;">p</span><span style="color:#E1E4E8;">) { </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> WIN; }</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> Outcome </span><span style="color:#B392F0;">eval</span><span style="color:#E1E4E8;">(Scissors </span><span style="color:#FFAB70;">s</span><span style="color:#E1E4E8;">) { </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> LOSE; }</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> Outcome </span><span style="color:#B392F0;">eval</span><span style="color:#E1E4E8;">(Rock </span><span style="color:#FFAB70;">r</span><span style="color:#E1E4E8;">) { </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> DRAW; }</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> String </span><span style="color:#B392F0;">toString</span><span style="color:#E1E4E8;">() { </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;Rock&quot;</span><span style="color:#E1E4E8;">; }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">RoShamBo1</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> SIZE </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">20</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> Random rand </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Random</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">47</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> Item </span><span style="color:#B392F0;">newItem</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">switch</span><span style="color:#E1E4E8;">(rand.</span><span style="color:#B392F0;">nextInt</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">default:</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Scissors</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Paper</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Rock</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">match</span><span style="color:#E1E4E8;">(Item </span><span style="color:#FFAB70;">a</span><span style="color:#E1E4E8;">, Item </span><span style="color:#FFAB70;">b</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">                a </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot; vs. &quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> b </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;: &quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> a.</span><span style="color:#B392F0;">compete</span><span style="color:#E1E4E8;">(b));</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] </span><span style="color:#FFAB70;">args</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> SIZE; i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#B392F0;">match</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">newItem</span><span style="color:#E1E4E8;">(), </span><span style="color:#B392F0;">newItem</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// enums/Outcome.java</span></span>
<span class="line"><span style="color:#D73A49;">package</span><span style="color:#24292E;"> enums;</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">enum</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Outcome</span><span style="color:#24292E;"> { </span><span style="color:#005CC5;">WIN</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">LOSE</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">DRAW</span><span style="color:#24292E;"> }</span></span>
<span class="line"><span style="color:#6A737D;">// enums/RoShamBo1.java</span></span>
<span class="line"><span style="color:#6A737D;">// Demonstration of multiple dispatching</span></span>
<span class="line"><span style="color:#6A737D;">// {java enums.RoShamBo1}</span></span>
<span class="line"><span style="color:#D73A49;">package</span><span style="color:#24292E;"> enums;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> java.util.</span><span style="color:#005CC5;">*</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> enums.Outcome.</span><span style="color:#005CC5;">*</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Item</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    Outcome </span><span style="color:#6F42C1;">compete</span><span style="color:#24292E;">(Item </span><span style="color:#E36209;">it</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    Outcome </span><span style="color:#6F42C1;">eval</span><span style="color:#24292E;">(Paper </span><span style="color:#E36209;">p</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    Outcome </span><span style="color:#6F42C1;">eval</span><span style="color:#24292E;">(Scissors </span><span style="color:#E36209;">s</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    Outcome </span><span style="color:#6F42C1;">eval</span><span style="color:#24292E;">(Rock </span><span style="color:#E36209;">r</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Paper</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Item</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Outcome </span><span style="color:#6F42C1;">compete</span><span style="color:#24292E;">(Item </span><span style="color:#E36209;">it</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> it.</span><span style="color:#6F42C1;">eval</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Outcome </span><span style="color:#6F42C1;">eval</span><span style="color:#24292E;">(Paper </span><span style="color:#E36209;">p</span><span style="color:#24292E;">) { </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> DRAW; }</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Outcome </span><span style="color:#6F42C1;">eval</span><span style="color:#24292E;">(Scissors </span><span style="color:#E36209;">s</span><span style="color:#24292E;">) { </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> WIN; }</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Outcome </span><span style="color:#6F42C1;">eval</span><span style="color:#24292E;">(Rock </span><span style="color:#E36209;">r</span><span style="color:#24292E;">) { </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> LOSE; }</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> String </span><span style="color:#6F42C1;">toString</span><span style="color:#24292E;">() { </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;Paper&quot;</span><span style="color:#24292E;">; }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Scissors</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Item</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Outcome </span><span style="color:#6F42C1;">compete</span><span style="color:#24292E;">(Item </span><span style="color:#E36209;">it</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> it.</span><span style="color:#6F42C1;">eval</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Outcome </span><span style="color:#6F42C1;">eval</span><span style="color:#24292E;">(Paper </span><span style="color:#E36209;">p</span><span style="color:#24292E;">) { </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> LOSE; }</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Outcome </span><span style="color:#6F42C1;">eval</span><span style="color:#24292E;">(Scissors </span><span style="color:#E36209;">s</span><span style="color:#24292E;">) { </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> DRAW; }</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Outcome </span><span style="color:#6F42C1;">eval</span><span style="color:#24292E;">(Rock </span><span style="color:#E36209;">r</span><span style="color:#24292E;">) { </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> WIN; }</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> String </span><span style="color:#6F42C1;">toString</span><span style="color:#24292E;">() { </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;Scissors&quot;</span><span style="color:#24292E;">; }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Rock</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Item</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Outcome </span><span style="color:#6F42C1;">compete</span><span style="color:#24292E;">(Item </span><span style="color:#E36209;">it</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> it.</span><span style="color:#6F42C1;">eval</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Outcome </span><span style="color:#6F42C1;">eval</span><span style="color:#24292E;">(Paper </span><span style="color:#E36209;">p</span><span style="color:#24292E;">) { </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> WIN; }</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Outcome </span><span style="color:#6F42C1;">eval</span><span style="color:#24292E;">(Scissors </span><span style="color:#E36209;">s</span><span style="color:#24292E;">) { </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> LOSE; }</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Outcome </span><span style="color:#6F42C1;">eval</span><span style="color:#24292E;">(Rock </span><span style="color:#E36209;">r</span><span style="color:#24292E;">) { </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> DRAW; }</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> String </span><span style="color:#6F42C1;">toString</span><span style="color:#24292E;">() { </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;Rock&quot;</span><span style="color:#24292E;">; }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">RoShamBo1</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> SIZE </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">20</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> Random rand </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Random</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">47</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> Item </span><span style="color:#6F42C1;">newItem</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">switch</span><span style="color:#24292E;">(rand.</span><span style="color:#6F42C1;">nextInt</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">)) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">default:</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Scissors</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Paper</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Rock</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">match</span><span style="color:#24292E;">(Item </span><span style="color:#E36209;">a</span><span style="color:#24292E;">, Item </span><span style="color:#E36209;">b</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">                a </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot; vs. &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> b </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;: &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> a.</span><span style="color:#6F42C1;">compete</span><span style="color:#24292E;">(b));</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">for</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> SIZE; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6F42C1;">match</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">newItem</span><span style="color:#24292E;">(), </span><span style="color:#6F42C1;">newItem</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>输出为：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">Rock vs. Rock: DRAW</span></span>
<span class="line"><span style="color:#e1e4e8;">Paper vs. Rock: WIN</span></span>
<span class="line"><span style="color:#e1e4e8;">Paper vs. Rock: WIN</span></span>
<span class="line"><span style="color:#e1e4e8;">Paper vs. Rock: WIN</span></span>
<span class="line"><span style="color:#e1e4e8;">Scissors vs. Paper: WIN</span></span>
<span class="line"><span style="color:#e1e4e8;">Scissors vs. Scissors: DRAW</span></span>
<span class="line"><span style="color:#e1e4e8;">Scissors vs. Paper: WIN</span></span>
<span class="line"><span style="color:#e1e4e8;">Rock vs. Paper: LOSE</span></span>
<span class="line"><span style="color:#e1e4e8;">Paper vs. Paper: DRAW</span></span>
<span class="line"><span style="color:#e1e4e8;">Rock vs. Paper: LOSE</span></span>
<span class="line"><span style="color:#e1e4e8;">Paper vs. Scissors: LOSE</span></span>
<span class="line"><span style="color:#e1e4e8;">Paper vs. Scissors: LOSE</span></span>
<span class="line"><span style="color:#e1e4e8;">Rock vs. Scissors: WIN</span></span>
<span class="line"><span style="color:#e1e4e8;">Rock vs. Paper: LOSE</span></span>
<span class="line"><span style="color:#e1e4e8;">Paper vs. Rock: WIN</span></span>
<span class="line"><span style="color:#e1e4e8;">Scissors vs. Paper: WIN</span></span>
<span class="line"><span style="color:#e1e4e8;">Paper vs. Scissors: LOSE</span></span>
<span class="line"><span style="color:#e1e4e8;">Paper vs. Scissors: LOSE</span></span>
<span class="line"><span style="color:#e1e4e8;">Paper vs. Scissors: LOSE</span></span>
<span class="line"><span style="color:#e1e4e8;">Paper vs. Scissors: LOSE</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">Rock vs. Rock: DRAW</span></span>
<span class="line"><span style="color:#24292e;">Paper vs. Rock: WIN</span></span>
<span class="line"><span style="color:#24292e;">Paper vs. Rock: WIN</span></span>
<span class="line"><span style="color:#24292e;">Paper vs. Rock: WIN</span></span>
<span class="line"><span style="color:#24292e;">Scissors vs. Paper: WIN</span></span>
<span class="line"><span style="color:#24292e;">Scissors vs. Scissors: DRAW</span></span>
<span class="line"><span style="color:#24292e;">Scissors vs. Paper: WIN</span></span>
<span class="line"><span style="color:#24292e;">Rock vs. Paper: LOSE</span></span>
<span class="line"><span style="color:#24292e;">Paper vs. Paper: DRAW</span></span>
<span class="line"><span style="color:#24292e;">Rock vs. Paper: LOSE</span></span>
<span class="line"><span style="color:#24292e;">Paper vs. Scissors: LOSE</span></span>
<span class="line"><span style="color:#24292e;">Paper vs. Scissors: LOSE</span></span>
<span class="line"><span style="color:#24292e;">Rock vs. Scissors: WIN</span></span>
<span class="line"><span style="color:#24292e;">Rock vs. Paper: LOSE</span></span>
<span class="line"><span style="color:#24292e;">Paper vs. Rock: WIN</span></span>
<span class="line"><span style="color:#24292e;">Scissors vs. Paper: WIN</span></span>
<span class="line"><span style="color:#24292e;">Paper vs. Scissors: LOSE</span></span>
<span class="line"><span style="color:#24292e;">Paper vs. Scissors: LOSE</span></span>
<span class="line"><span style="color:#24292e;">Paper vs. Scissors: LOSE</span></span>
<span class="line"><span style="color:#24292e;">Paper vs. Scissors: LOSE</span></span></code></pre></div><p>Item 是这几种类型的接口，将会被用作多路分发。RoShamBo1.match() 有两个 Item 参数，通过调用 Item.compete90) 方法开始两路分发。要判定 a 的类型，分发机制会在 a 的实际类型的 compete（内部起到分发的作用。compete() 方法通过调用 eval() 来为另一个类型实现第二次分法。</p><p>将自身（this）作为参数调用 evalo，能够调用重载过的 eval() 方法，这能够保留第一次分发的类型信息。当第二次分发完成时，你就能够知道两个 Item 对象的具体类型了。</p><p>要配置好多路分发需要很多的工序，不过要记住，它的好处在于方法调用时的优雅的话法，这避免了在一个方法中判定多个对象的类型的丑陋代码，你只需说，“嘿，你们两个，我不在乎你们是什么类型，请你们自己交流！”不过，在使用多路分发前，请先明确，这种优雅的代码对你确实有重要的意义。</p><h3 id="使用-enum-分发" tabindex="-1">使用 enum 分发 <a class="header-anchor" href="#使用-enum-分发" aria-label="Permalink to &quot;使用 enum 分发&quot;">​</a></h3><p>直接将 RoShamBol.java 翻译为基于 enum 的版本是有问题的，因为 enum 实例不是类型，不能将 enum 实例作为参数的类型，所以无法重载 eval() 方法。不过，还有很多方式可以实现多路分发，并从 enum 中获益。</p><p>一种方式是使用构造器来初始化每个 enum 实例，并以“一组”结果作为参数。这二者放在一块，形成了类似查询表的结构：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// enums/RoShamBo2.java</span></span>
<span class="line"><span style="color:#6A737D;">// Switching one enum on another</span></span>
<span class="line"><span style="color:#6A737D;">// {java enums.RoShamBo2}</span></span>
<span class="line"><span style="color:#F97583;">package</span><span style="color:#E1E4E8;"> enums;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> enums.Outcome.</span><span style="color:#79B8FF;">*</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">enum</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">RoShamBo2</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">implements</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Competitor</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#F97583;">RoShamBo2</span><span style="color:#E1E4E8;">&gt; {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">PAPER</span><span style="color:#E1E4E8;">(DRAW, LOSE, WIN),</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">SCISSORS</span><span style="color:#E1E4E8;">(WIN, DRAW, LOSE),</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">ROCK</span><span style="color:#E1E4E8;">(LOSE, WIN, DRAW);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> Outcome vPAPER, vSCISSORS, vROCK;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">RoShamBo2</span><span style="color:#E1E4E8;">(Outcome </span><span style="color:#FFAB70;">paper</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">              Outcome </span><span style="color:#FFAB70;">scissors</span><span style="color:#E1E4E8;">, Outcome </span><span style="color:#FFAB70;">rock</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.vPAPER </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> paper;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.vSCISSORS </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> scissors;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.vROCK </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> rock;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> Outcome </span><span style="color:#B392F0;">compete</span><span style="color:#E1E4E8;">(RoShamBo2 </span><span style="color:#FFAB70;">it</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">switch</span><span style="color:#E1E4E8;">(it) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">default:</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> PAPER</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> vPAPER;</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> SCISSORS</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> vSCISSORS;</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> ROCK</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> vROCK;</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] </span><span style="color:#FFAB70;">args</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        RoShamBo.</span><span style="color:#B392F0;">play</span><span style="color:#E1E4E8;">(RoShamBo2.class, </span><span style="color:#79B8FF;">20</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// enums/RoShamBo2.java</span></span>
<span class="line"><span style="color:#6A737D;">// Switching one enum on another</span></span>
<span class="line"><span style="color:#6A737D;">// {java enums.RoShamBo2}</span></span>
<span class="line"><span style="color:#D73A49;">package</span><span style="color:#24292E;"> enums;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> enums.Outcome.</span><span style="color:#005CC5;">*</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">enum</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">RoShamBo2</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Competitor</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">RoShamBo2</span><span style="color:#24292E;">&gt; {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">PAPER</span><span style="color:#24292E;">(DRAW, LOSE, WIN),</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">SCISSORS</span><span style="color:#24292E;">(WIN, DRAW, LOSE),</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">ROCK</span><span style="color:#24292E;">(LOSE, WIN, DRAW);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> Outcome vPAPER, vSCISSORS, vROCK;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">RoShamBo2</span><span style="color:#24292E;">(Outcome </span><span style="color:#E36209;">paper</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">              Outcome </span><span style="color:#E36209;">scissors</span><span style="color:#24292E;">, Outcome </span><span style="color:#E36209;">rock</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.vPAPER </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> paper;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.vSCISSORS </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> scissors;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.vROCK </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> rock;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Outcome </span><span style="color:#6F42C1;">compete</span><span style="color:#24292E;">(RoShamBo2 </span><span style="color:#E36209;">it</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">switch</span><span style="color:#24292E;">(it) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">default:</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> PAPER</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> vPAPER;</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> SCISSORS</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> vSCISSORS;</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> ROCK</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> vROCK;</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        RoShamBo.</span><span style="color:#6F42C1;">play</span><span style="color:#24292E;">(RoShamBo2.class, </span><span style="color:#005CC5;">20</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>输出为：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">ROCK vs. ROCK: DRAW</span></span>
<span class="line"><span style="color:#e1e4e8;">SCISSORS vs. ROCK: LOSE</span></span>
<span class="line"><span style="color:#e1e4e8;">SCISSORS vs. ROCK: LOSE</span></span>
<span class="line"><span style="color:#e1e4e8;">SCISSORS vs. ROCK: LOSE</span></span>
<span class="line"><span style="color:#e1e4e8;">PAPER vs. SCISSORS: LOSE</span></span>
<span class="line"><span style="color:#e1e4e8;">PAPER vs. PAPER: DRAW</span></span>
<span class="line"><span style="color:#e1e4e8;">PAPER vs. SCISSORS: LOSE</span></span>
<span class="line"><span style="color:#e1e4e8;">ROCK vs. SCISSORS: WIN</span></span>
<span class="line"><span style="color:#e1e4e8;">SCISSORS vs. SCISSORS: DRAW</span></span>
<span class="line"><span style="color:#e1e4e8;">ROCK vs. SCISSORS: WIN</span></span>
<span class="line"><span style="color:#e1e4e8;">SCISSORS vs. PAPER: WIN</span></span>
<span class="line"><span style="color:#e1e4e8;">SCISSORS vs. PAPER: WIN</span></span>
<span class="line"><span style="color:#e1e4e8;">ROCK vs. PAPER: LOSE</span></span>
<span class="line"><span style="color:#e1e4e8;">ROCK vs. SCISSORS: WIN</span></span>
<span class="line"><span style="color:#e1e4e8;">SCISSORS vs. ROCK: LOSE</span></span>
<span class="line"><span style="color:#e1e4e8;">PAPER vs. SCISSORS: LOSE</span></span>
<span class="line"><span style="color:#e1e4e8;">SCISSORS vs. PAPER: WIN</span></span>
<span class="line"><span style="color:#e1e4e8;">SCISSORS vs. PAPER: WIN</span></span>
<span class="line"><span style="color:#e1e4e8;">SCISSORS vs. PAPER: WIN</span></span>
<span class="line"><span style="color:#e1e4e8;">SCISSORS vs. PAPER: WIN</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">ROCK vs. ROCK: DRAW</span></span>
<span class="line"><span style="color:#24292e;">SCISSORS vs. ROCK: LOSE</span></span>
<span class="line"><span style="color:#24292e;">SCISSORS vs. ROCK: LOSE</span></span>
<span class="line"><span style="color:#24292e;">SCISSORS vs. ROCK: LOSE</span></span>
<span class="line"><span style="color:#24292e;">PAPER vs. SCISSORS: LOSE</span></span>
<span class="line"><span style="color:#24292e;">PAPER vs. PAPER: DRAW</span></span>
<span class="line"><span style="color:#24292e;">PAPER vs. SCISSORS: LOSE</span></span>
<span class="line"><span style="color:#24292e;">ROCK vs. SCISSORS: WIN</span></span>
<span class="line"><span style="color:#24292e;">SCISSORS vs. SCISSORS: DRAW</span></span>
<span class="line"><span style="color:#24292e;">ROCK vs. SCISSORS: WIN</span></span>
<span class="line"><span style="color:#24292e;">SCISSORS vs. PAPER: WIN</span></span>
<span class="line"><span style="color:#24292e;">SCISSORS vs. PAPER: WIN</span></span>
<span class="line"><span style="color:#24292e;">ROCK vs. PAPER: LOSE</span></span>
<span class="line"><span style="color:#24292e;">ROCK vs. SCISSORS: WIN</span></span>
<span class="line"><span style="color:#24292e;">SCISSORS vs. ROCK: LOSE</span></span>
<span class="line"><span style="color:#24292e;">PAPER vs. SCISSORS: LOSE</span></span>
<span class="line"><span style="color:#24292e;">SCISSORS vs. PAPER: WIN</span></span>
<span class="line"><span style="color:#24292e;">SCISSORS vs. PAPER: WIN</span></span>
<span class="line"><span style="color:#24292e;">SCISSORS vs. PAPER: WIN</span></span>
<span class="line"><span style="color:#24292e;">SCISSORS vs. PAPER: WIN</span></span></code></pre></div><p>在 compete() 方法中，一旦两种类型都被确定了，那么唯一的操作就是返回结果 Outcome 然而，你可能还需要调用其他的方法，（例如）甚至是调用在构造器中指定的某个命令对象上的方法。</p><p>RoShamBo2.javal 之前的例子短小得多，而且更直接，更易于理解。注意，我们仍然是使用两路分发来判定两个对象的类型。在 RoShamBol.java 中，两次分发都是通过实际的方法调用实现，而在这个例子中，只有第一次分发是实际的方法调用。第二个分发使用的是 switch，不过这样做是安全的，因为 enum 限制了 switch 语句的选择分支。</p><p>在代码中，enum 被单独抽取出来，因此它可以应用在其他例子中。首先，Competitor 接口定义了一种类型，该类型的对象可以与另一个 Competitor 相竞争：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// enums/Competitor.java</span></span>
<span class="line"><span style="color:#6A737D;">// Switching one enum on another</span></span>
<span class="line"><span style="color:#F97583;">package</span><span style="color:#E1E4E8;"> enums;</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Competitor</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#F97583;">T</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> Competitor&lt;</span><span style="color:#F97583;">T</span><span style="color:#E1E4E8;">&gt;&gt; {</span></span>
<span class="line"><span style="color:#E1E4E8;">    Outcome </span><span style="color:#B392F0;">compete</span><span style="color:#E1E4E8;">(T </span><span style="color:#FFAB70;">competitor</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// enums/Competitor.java</span></span>
<span class="line"><span style="color:#6A737D;">// Switching one enum on another</span></span>
<span class="line"><span style="color:#D73A49;">package</span><span style="color:#24292E;"> enums;</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Competitor</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">T</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> Competitor&lt;</span><span style="color:#D73A49;">T</span><span style="color:#24292E;">&gt;&gt; {</span></span>
<span class="line"><span style="color:#24292E;">    Outcome </span><span style="color:#6F42C1;">compete</span><span style="color:#24292E;">(T </span><span style="color:#E36209;">competitor</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>然后，我们定义两个 static 方法（static 可以避免显式地指明参数类型），第一个是 match() 方法，它会为一个 Competitor 对象调用 compete() 方法，并与另一个 Competitor 对象作比较。在这个例子中，我们看到，match()）方法的参数需要是 Competitor&lt;T&gt; 类型。但是在 play() 方法中，类型参数必须同时是 Enum&lt;T&gt; 类型（因为它将在 Enums.random() 中使用）和 Competitor&lt;T&gt; 类型因为它将被传递给 match() 方法）：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// enums/RoShamBo.java</span></span>
<span class="line"><span style="color:#6A737D;">// Common tools for RoShamBo examples</span></span>
<span class="line"><span style="color:#F97583;">package</span><span style="color:#E1E4E8;"> enums;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> onjava.</span><span style="color:#79B8FF;">*</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">RoShamBo</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> &lt;</span><span style="color:#F97583;">T</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> Competitor&lt;</span><span style="color:#F97583;">T</span><span style="color:#E1E4E8;">&gt;&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">match</span><span style="color:#E1E4E8;">(T </span><span style="color:#FFAB70;">a</span><span style="color:#E1E4E8;">, T </span><span style="color:#FFAB70;">b</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">                a </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot; vs. &quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> b </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;: &quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> a.</span><span style="color:#B392F0;">compete</span><span style="color:#E1E4E8;">(b));</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> &lt;</span><span style="color:#F97583;">T</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> Enum&lt;</span><span style="color:#F97583;">T</span><span style="color:#E1E4E8;">&gt; &amp; Competitor&lt;</span><span style="color:#F97583;">T</span><span style="color:#E1E4E8;">&gt;&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">play</span><span style="color:#E1E4E8;">(Class&lt;</span><span style="color:#F97583;">T</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#FFAB70;">rsbClass</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">size</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> size; i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#B392F0;">match</span><span style="color:#E1E4E8;">(Enums.</span><span style="color:#B392F0;">random</span><span style="color:#E1E4E8;">(rsbClass),Enums.</span><span style="color:#B392F0;">random</span><span style="color:#E1E4E8;">(rsbClass));</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// enums/RoShamBo.java</span></span>
<span class="line"><span style="color:#6A737D;">// Common tools for RoShamBo examples</span></span>
<span class="line"><span style="color:#D73A49;">package</span><span style="color:#24292E;"> enums;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> onjava.</span><span style="color:#005CC5;">*</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">RoShamBo</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> &lt;</span><span style="color:#D73A49;">T</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> Competitor&lt;</span><span style="color:#D73A49;">T</span><span style="color:#24292E;">&gt;&gt;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">match</span><span style="color:#24292E;">(T </span><span style="color:#E36209;">a</span><span style="color:#24292E;">, T </span><span style="color:#E36209;">b</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">                a </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot; vs. &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> b </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;: &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> a.</span><span style="color:#6F42C1;">compete</span><span style="color:#24292E;">(b));</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> &lt;</span><span style="color:#D73A49;">T</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> Enum&lt;</span><span style="color:#D73A49;">T</span><span style="color:#24292E;">&gt; &amp; Competitor&lt;</span><span style="color:#D73A49;">T</span><span style="color:#24292E;">&gt;&gt;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">play</span><span style="color:#24292E;">(Class&lt;</span><span style="color:#D73A49;">T</span><span style="color:#24292E;">&gt; </span><span style="color:#E36209;">rsbClass</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">size</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">for</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> size; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6F42C1;">match</span><span style="color:#24292E;">(Enums.</span><span style="color:#6F42C1;">random</span><span style="color:#24292E;">(rsbClass),Enums.</span><span style="color:#6F42C1;">random</span><span style="color:#24292E;">(rsbClass));</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>play() 方法没有将类型参数 T 作为返回值类型，因此，似乎我们应该在 Class&lt;T&gt; 中使用通配符来代替上面的参数声明。然而，通配符不能扩展多个基类，所以我们必须采用以上的表达式。</p><h3 id="使用常量相关的方法" tabindex="-1">使用常量相关的方法 <a class="header-anchor" href="#使用常量相关的方法" aria-label="Permalink to &quot;使用常量相关的方法&quot;">​</a></h3><p>常量相关的方法允许我们为每个 enum 实例提供方法的不同实现，这使得常量相关的方法似乎是实现多路分发的完美解决方案。不过，通过这种方式，enum 实例虽然可以具有不同的行为，但它们仍然不是类型，不能将其作为方法签名中的参数类型来使用。最好的办法是将 enum 用在 switch 语句中，见下例：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// enums/RoShamBo3.java</span></span>
<span class="line"><span style="color:#6A737D;">// Using constant-specific methods</span></span>
<span class="line"><span style="color:#6A737D;">// {java enums.RoShamBo3}</span></span>
<span class="line"><span style="color:#F97583;">package</span><span style="color:#E1E4E8;"> enums;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> enums.Outcome.</span><span style="color:#79B8FF;">*</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">enum</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">RoShamBo3</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">implements</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Competitor</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#F97583;">RoShamBo3</span><span style="color:#E1E4E8;">&gt; {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">PAPER</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> Outcome </span><span style="color:#B392F0;">compete</span><span style="color:#E1E4E8;">(RoShamBo3 </span><span style="color:#FFAB70;">it</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">switch</span><span style="color:#E1E4E8;">(it) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">default:</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// To placate the compiler</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> PAPER</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> DRAW;</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> SCISSORS</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> LOSE;</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> ROCK</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> WIN;</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    },</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">SCISSORS</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> Outcome </span><span style="color:#B392F0;">compete</span><span style="color:#E1E4E8;">(RoShamBo3 </span><span style="color:#FFAB70;">it</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">switch</span><span style="color:#E1E4E8;">(it) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">default:</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> PAPER</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> WIN;</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> SCISSORS</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> DRAW;</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> ROCK</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> LOSE;</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    },</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">ROCK</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> Outcome </span><span style="color:#B392F0;">compete</span><span style="color:#E1E4E8;">(RoShamBo3 </span><span style="color:#FFAB70;">it</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">switch</span><span style="color:#E1E4E8;">(it) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">default:</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> PAPER</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> LOSE;</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> SCISSORS</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> WIN;</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> ROCK</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> DRAW;</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    };</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">abstract</span><span style="color:#E1E4E8;"> Outcome </span><span style="color:#B392F0;">compete</span><span style="color:#E1E4E8;">(RoShamBo3 </span><span style="color:#FFAB70;">it</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] </span><span style="color:#FFAB70;">args</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        RoShamBo.</span><span style="color:#B392F0;">play</span><span style="color:#E1E4E8;">(RoShamBo3.class, </span><span style="color:#79B8FF;">20</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// enums/RoShamBo3.java</span></span>
<span class="line"><span style="color:#6A737D;">// Using constant-specific methods</span></span>
<span class="line"><span style="color:#6A737D;">// {java enums.RoShamBo3}</span></span>
<span class="line"><span style="color:#D73A49;">package</span><span style="color:#24292E;"> enums;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> enums.Outcome.</span><span style="color:#005CC5;">*</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">enum</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">RoShamBo3</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Competitor</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">RoShamBo3</span><span style="color:#24292E;">&gt; {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">PAPER</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Outcome </span><span style="color:#6F42C1;">compete</span><span style="color:#24292E;">(RoShamBo3 </span><span style="color:#E36209;">it</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">switch</span><span style="color:#24292E;">(it) {</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">default:</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">// To placate the compiler</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> PAPER</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> DRAW;</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> SCISSORS</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> LOSE;</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> ROCK</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> WIN;</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    },</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">SCISSORS</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Outcome </span><span style="color:#6F42C1;">compete</span><span style="color:#24292E;">(RoShamBo3 </span><span style="color:#E36209;">it</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">switch</span><span style="color:#24292E;">(it) {</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">default:</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> PAPER</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> WIN;</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> SCISSORS</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> DRAW;</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> ROCK</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> LOSE;</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    },</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">ROCK</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Outcome </span><span style="color:#6F42C1;">compete</span><span style="color:#24292E;">(RoShamBo3 </span><span style="color:#E36209;">it</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">switch</span><span style="color:#24292E;">(it) {</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">default:</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> PAPER</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> LOSE;</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> SCISSORS</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> WIN;</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> ROCK</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> DRAW;</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    };</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">abstract</span><span style="color:#24292E;"> Outcome </span><span style="color:#6F42C1;">compete</span><span style="color:#24292E;">(RoShamBo3 </span><span style="color:#E36209;">it</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        RoShamBo.</span><span style="color:#6F42C1;">play</span><span style="color:#24292E;">(RoShamBo3.class, </span><span style="color:#005CC5;">20</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>输出为：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">ROCK vs. ROCK: DRAW</span></span>
<span class="line"><span style="color:#e1e4e8;">SCISSORS vs. ROCK: LOSE</span></span>
<span class="line"><span style="color:#e1e4e8;">SCISSORS vs. ROCK: LOSE</span></span>
<span class="line"><span style="color:#e1e4e8;">SCISSORS vs. ROCK: LOSE</span></span>
<span class="line"><span style="color:#e1e4e8;">PAPER vs. SCISSORS: LOSE</span></span>
<span class="line"><span style="color:#e1e4e8;">PAPER vs. PAPER: DRAW</span></span>
<span class="line"><span style="color:#e1e4e8;">PAPER vs. SCISSORS: LOSE</span></span>
<span class="line"><span style="color:#e1e4e8;">ROCK vs. SCISSORS: WIN</span></span>
<span class="line"><span style="color:#e1e4e8;">SCISSORS vs. SCISSORS: DRAW</span></span>
<span class="line"><span style="color:#e1e4e8;">ROCK vs. SCISSORS: WIN</span></span>
<span class="line"><span style="color:#e1e4e8;">SCISSORS vs. PAPER: WIN</span></span>
<span class="line"><span style="color:#e1e4e8;">SCISSORS vs. PAPER: WIN</span></span>
<span class="line"><span style="color:#e1e4e8;">ROCK vs. PAPER: LOSE</span></span>
<span class="line"><span style="color:#e1e4e8;">ROCK vs. SCISSORS: WIN</span></span>
<span class="line"><span style="color:#e1e4e8;">SCISSORS vs. ROCK: LOSE</span></span>
<span class="line"><span style="color:#e1e4e8;">PAPER vs. SCISSORS: LOSE</span></span>
<span class="line"><span style="color:#e1e4e8;">SCISSORS vs. PAPER: WIN</span></span>
<span class="line"><span style="color:#e1e4e8;">SCISSORS vs. PAPER: WIN</span></span>
<span class="line"><span style="color:#e1e4e8;">SCISSORS vs. PAPER: WIN</span></span>
<span class="line"><span style="color:#e1e4e8;">SCISSORS vs. PAPER: WIN</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">ROCK vs. ROCK: DRAW</span></span>
<span class="line"><span style="color:#24292e;">SCISSORS vs. ROCK: LOSE</span></span>
<span class="line"><span style="color:#24292e;">SCISSORS vs. ROCK: LOSE</span></span>
<span class="line"><span style="color:#24292e;">SCISSORS vs. ROCK: LOSE</span></span>
<span class="line"><span style="color:#24292e;">PAPER vs. SCISSORS: LOSE</span></span>
<span class="line"><span style="color:#24292e;">PAPER vs. PAPER: DRAW</span></span>
<span class="line"><span style="color:#24292e;">PAPER vs. SCISSORS: LOSE</span></span>
<span class="line"><span style="color:#24292e;">ROCK vs. SCISSORS: WIN</span></span>
<span class="line"><span style="color:#24292e;">SCISSORS vs. SCISSORS: DRAW</span></span>
<span class="line"><span style="color:#24292e;">ROCK vs. SCISSORS: WIN</span></span>
<span class="line"><span style="color:#24292e;">SCISSORS vs. PAPER: WIN</span></span>
<span class="line"><span style="color:#24292e;">SCISSORS vs. PAPER: WIN</span></span>
<span class="line"><span style="color:#24292e;">ROCK vs. PAPER: LOSE</span></span>
<span class="line"><span style="color:#24292e;">ROCK vs. SCISSORS: WIN</span></span>
<span class="line"><span style="color:#24292e;">SCISSORS vs. ROCK: LOSE</span></span>
<span class="line"><span style="color:#24292e;">PAPER vs. SCISSORS: LOSE</span></span>
<span class="line"><span style="color:#24292e;">SCISSORS vs. PAPER: WIN</span></span>
<span class="line"><span style="color:#24292e;">SCISSORS vs. PAPER: WIN</span></span>
<span class="line"><span style="color:#24292e;">SCISSORS vs. PAPER: WIN</span></span>
<span class="line"><span style="color:#24292e;">SCISSORS vs. PAPER: WIN</span></span></code></pre></div><p>虽然这种方式可以工作，但是却不甚合理，如果采用 RoShamB02.java 的解决方案，那么在添加一个新的类型时，只需更少的代码，而且也更直接。</p><p>:然而，RoShamBo3.java 还可以压缩简化一下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// enums/RoShamBo4.java</span></span>
<span class="line"><span style="color:#6A737D;">// {java enums.RoShamBo4}</span></span>
<span class="line"><span style="color:#F97583;">package</span><span style="color:#E1E4E8;"> enums;</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">enum</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">RoShamBo4</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">implements</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Competitor</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#F97583;">RoShamBo4</span><span style="color:#E1E4E8;">&gt; {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">ROCK</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> Outcome </span><span style="color:#B392F0;">compete</span><span style="color:#E1E4E8;">(RoShamBo4 </span><span style="color:#FFAB70;">opponent</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">compete</span><span style="color:#E1E4E8;">(SCISSORS, opponent);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    },</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">SCISSORS</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> Outcome </span><span style="color:#B392F0;">compete</span><span style="color:#E1E4E8;">(RoShamBo4 </span><span style="color:#FFAB70;">opponent</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">compete</span><span style="color:#E1E4E8;">(PAPER, opponent);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    },</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">PAPER</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> Outcome </span><span style="color:#B392F0;">compete</span><span style="color:#E1E4E8;">(RoShamBo4 </span><span style="color:#FFAB70;">opponent</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">compete</span><span style="color:#E1E4E8;">(ROCK, opponent);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    };</span></span>
<span class="line"><span style="color:#E1E4E8;">    Outcome </span><span style="color:#B392F0;">compete</span><span style="color:#E1E4E8;">(RoShamBo4 </span><span style="color:#FFAB70;">loser</span><span style="color:#E1E4E8;">, RoShamBo4 </span><span style="color:#FFAB70;">opponent</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> ((opponent </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> Outcome.DRAW</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> ((opponent </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> loser) </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> Outcome.WIN</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> Outcome.LOSE));</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] </span><span style="color:#FFAB70;">args</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        RoShamBo.</span><span style="color:#B392F0;">play</span><span style="color:#E1E4E8;">(RoShamBo4.class, </span><span style="color:#79B8FF;">20</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// enums/RoShamBo4.java</span></span>
<span class="line"><span style="color:#6A737D;">// {java enums.RoShamBo4}</span></span>
<span class="line"><span style="color:#D73A49;">package</span><span style="color:#24292E;"> enums;</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">enum</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">RoShamBo4</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Competitor</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">RoShamBo4</span><span style="color:#24292E;">&gt; {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">ROCK</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Outcome </span><span style="color:#6F42C1;">compete</span><span style="color:#24292E;">(RoShamBo4 </span><span style="color:#E36209;">opponent</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">compete</span><span style="color:#24292E;">(SCISSORS, opponent);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    },</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">SCISSORS</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Outcome </span><span style="color:#6F42C1;">compete</span><span style="color:#24292E;">(RoShamBo4 </span><span style="color:#E36209;">opponent</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">compete</span><span style="color:#24292E;">(PAPER, opponent);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    },</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">PAPER</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Outcome </span><span style="color:#6F42C1;">compete</span><span style="color:#24292E;">(RoShamBo4 </span><span style="color:#E36209;">opponent</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">compete</span><span style="color:#24292E;">(ROCK, opponent);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    };</span></span>
<span class="line"><span style="color:#24292E;">    Outcome </span><span style="color:#6F42C1;">compete</span><span style="color:#24292E;">(RoShamBo4 </span><span style="color:#E36209;">loser</span><span style="color:#24292E;">, RoShamBo4 </span><span style="color:#E36209;">opponent</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> ((opponent </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> Outcome.DRAW</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> ((opponent </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> loser) </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> Outcome.WIN</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> Outcome.LOSE));</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        RoShamBo.</span><span style="color:#6F42C1;">play</span><span style="color:#24292E;">(RoShamBo4.class, </span><span style="color:#005CC5;">20</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>输出为：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">PAPER vs. PAPER: DRAW</span></span>
<span class="line"><span style="color:#e1e4e8;">SCISSORS vs. PAPER: WIN</span></span>
<span class="line"><span style="color:#e1e4e8;">SCISSORS vs. PAPER: WIN</span></span>
<span class="line"><span style="color:#e1e4e8;">SCISSORS vs. PAPER: WIN</span></span>
<span class="line"><span style="color:#e1e4e8;">ROCK vs. SCISSORS: WIN</span></span>
<span class="line"><span style="color:#e1e4e8;">ROCK vs. ROCK: DRAW</span></span>
<span class="line"><span style="color:#e1e4e8;">ROCK vs. SCISSORS: WIN</span></span>
<span class="line"><span style="color:#e1e4e8;">PAPER vs. SCISSORS: LOSE</span></span>
<span class="line"><span style="color:#e1e4e8;">SCISSORS vs. SCISSORS: DRAW</span></span>
<span class="line"><span style="color:#e1e4e8;">PAPER vs. SCISSORS: LOSE</span></span>
<span class="line"><span style="color:#e1e4e8;">SCISSORS vs. ROCK: LOSE</span></span>
<span class="line"><span style="color:#e1e4e8;">SCISSORS vs. ROCK: LOSE</span></span>
<span class="line"><span style="color:#e1e4e8;">PAPER vs. ROCK: WIN</span></span>
<span class="line"><span style="color:#e1e4e8;">PAPER vs. SCISSORS: LOSE</span></span>
<span class="line"><span style="color:#e1e4e8;">SCISSORS vs. PAPER: WIN</span></span>
<span class="line"><span style="color:#e1e4e8;">ROCK vs. SCISSORS: WIN</span></span>
<span class="line"><span style="color:#e1e4e8;">SCISSORS vs. ROCK: LOSE</span></span>
<span class="line"><span style="color:#e1e4e8;">SCISSORS vs. ROCK: LOSE</span></span>
<span class="line"><span style="color:#e1e4e8;">SCISSORS vs. ROCK: LOSE</span></span>
<span class="line"><span style="color:#e1e4e8;">SCISSORS vs. ROCK: LOSE</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">PAPER vs. PAPER: DRAW</span></span>
<span class="line"><span style="color:#24292e;">SCISSORS vs. PAPER: WIN</span></span>
<span class="line"><span style="color:#24292e;">SCISSORS vs. PAPER: WIN</span></span>
<span class="line"><span style="color:#24292e;">SCISSORS vs. PAPER: WIN</span></span>
<span class="line"><span style="color:#24292e;">ROCK vs. SCISSORS: WIN</span></span>
<span class="line"><span style="color:#24292e;">ROCK vs. ROCK: DRAW</span></span>
<span class="line"><span style="color:#24292e;">ROCK vs. SCISSORS: WIN</span></span>
<span class="line"><span style="color:#24292e;">PAPER vs. SCISSORS: LOSE</span></span>
<span class="line"><span style="color:#24292e;">SCISSORS vs. SCISSORS: DRAW</span></span>
<span class="line"><span style="color:#24292e;">PAPER vs. SCISSORS: LOSE</span></span>
<span class="line"><span style="color:#24292e;">SCISSORS vs. ROCK: LOSE</span></span>
<span class="line"><span style="color:#24292e;">SCISSORS vs. ROCK: LOSE</span></span>
<span class="line"><span style="color:#24292e;">PAPER vs. ROCK: WIN</span></span>
<span class="line"><span style="color:#24292e;">PAPER vs. SCISSORS: LOSE</span></span>
<span class="line"><span style="color:#24292e;">SCISSORS vs. PAPER: WIN</span></span>
<span class="line"><span style="color:#24292e;">ROCK vs. SCISSORS: WIN</span></span>
<span class="line"><span style="color:#24292e;">SCISSORS vs. ROCK: LOSE</span></span>
<span class="line"><span style="color:#24292e;">SCISSORS vs. ROCK: LOSE</span></span>
<span class="line"><span style="color:#24292e;">SCISSORS vs. ROCK: LOSE</span></span>
<span class="line"><span style="color:#24292e;">SCISSORS vs. ROCK: LOSE</span></span></code></pre></div><p>其中，具有两个参数的 compete() 方法执行第二个分发，该方法执行一系列的比较，其行为类似 switch 语句。这个版本的程序更简短，不过却比较难理解，对于一个大型系统而言，难以理解的代码将导致整个系统不够健壮。</p><h3 id="使用-enummap-进行分发" tabindex="-1">使用 EnumMap 进行分发 <a class="header-anchor" href="#使用-enummap-进行分发" aria-label="Permalink to &quot;使用 EnumMap 进行分发&quot;">​</a></h3><p>使用 EnumMap 能够实现“真正的”两路分发。EnumMap 是为 enum 专门设计的一种性能非常好的特殊 Map。由于我们的目的是摸索出两种未知的类型，所以可以用一个 EnumMap 的 EnumMap 来实现两路分发：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// enums/RoShamBo5.java</span></span>
<span class="line"><span style="color:#6A737D;">// Multiple dispatching using an EnumMap of EnumMaps</span></span>
<span class="line"><span style="color:#6A737D;">// {java enums.RoShamBo5}</span></span>
<span class="line"><span style="color:#F97583;">package</span><span style="color:#E1E4E8;"> enums;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> java.util.</span><span style="color:#79B8FF;">*</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> enums.Outcome.</span><span style="color:#79B8FF;">*</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">enum</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">RoShamBo5</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">implements</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Competitor</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#F97583;">RoShamBo5</span><span style="color:#E1E4E8;">&gt; {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">PAPER</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">SCISSORS</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">ROCK</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> EnumMap&lt;</span><span style="color:#F97583;">RoShamBo5</span><span style="color:#E1E4E8;">,EnumMap&lt;</span><span style="color:#F97583;">RoShamBo5</span><span style="color:#E1E4E8;">,</span><span style="color:#F97583;">Outcome</span><span style="color:#E1E4E8;">&gt;&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">            table </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> EnumMap&lt;&gt;(RoShamBo5.class);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;">(RoShamBo5 it </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> RoShamBo5.</span><span style="color:#B392F0;">values</span><span style="color:#E1E4E8;">())</span></span>
<span class="line"><span style="color:#E1E4E8;">            table.</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(it, </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> EnumMap&lt;&gt;(RoShamBo5.class));</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">initRow</span><span style="color:#E1E4E8;">(PAPER, DRAW, LOSE, WIN);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">initRow</span><span style="color:#E1E4E8;">(SCISSORS, WIN, DRAW, LOSE);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">initRow</span><span style="color:#E1E4E8;">(ROCK, LOSE, WIN, DRAW);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">initRow</span><span style="color:#E1E4E8;">(RoShamBo5 </span><span style="color:#FFAB70;">it</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">                        Outcome </span><span style="color:#FFAB70;">vPAPER</span><span style="color:#E1E4E8;">, Outcome </span><span style="color:#FFAB70;">vSCISSORS</span><span style="color:#E1E4E8;">, Outcome </span><span style="color:#FFAB70;">vROCK</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        EnumMap&lt;</span><span style="color:#F97583;">RoShamBo5</span><span style="color:#E1E4E8;">,</span><span style="color:#F97583;">Outcome</span><span style="color:#E1E4E8;">&gt; row </span><span style="color:#F97583;">=</span></span>
<span class="line"><span style="color:#E1E4E8;">                RoShamBo5.table.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(it);</span></span>
<span class="line"><span style="color:#E1E4E8;">        row.</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(RoShamBo5.PAPER, vPAPER);</span></span>
<span class="line"><span style="color:#E1E4E8;">        row.</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(RoShamBo5.SCISSORS, vSCISSORS);</span></span>
<span class="line"><span style="color:#E1E4E8;">        row.</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(RoShamBo5.ROCK, vROCK);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> Outcome </span><span style="color:#B392F0;">compete</span><span style="color:#E1E4E8;">(RoShamBo5 </span><span style="color:#FFAB70;">it</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> table.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(it);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] </span><span style="color:#FFAB70;">args</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        RoShamBo.</span><span style="color:#B392F0;">play</span><span style="color:#E1E4E8;">(RoShamBo5.class, </span><span style="color:#79B8FF;">20</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// enums/RoShamBo5.java</span></span>
<span class="line"><span style="color:#6A737D;">// Multiple dispatching using an EnumMap of EnumMaps</span></span>
<span class="line"><span style="color:#6A737D;">// {java enums.RoShamBo5}</span></span>
<span class="line"><span style="color:#D73A49;">package</span><span style="color:#24292E;"> enums;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> java.util.</span><span style="color:#005CC5;">*</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> enums.Outcome.</span><span style="color:#005CC5;">*</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">enum</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">RoShamBo5</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Competitor</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">RoShamBo5</span><span style="color:#24292E;">&gt; {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">PAPER</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">SCISSORS</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">ROCK</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> EnumMap&lt;</span><span style="color:#D73A49;">RoShamBo5</span><span style="color:#24292E;">,EnumMap&lt;</span><span style="color:#D73A49;">RoShamBo5</span><span style="color:#24292E;">,</span><span style="color:#D73A49;">Outcome</span><span style="color:#24292E;">&gt;&gt;</span></span>
<span class="line"><span style="color:#24292E;">            table </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> EnumMap&lt;&gt;(RoShamBo5.class);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">for</span><span style="color:#24292E;">(RoShamBo5 it </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> RoShamBo5.</span><span style="color:#6F42C1;">values</span><span style="color:#24292E;">())</span></span>
<span class="line"><span style="color:#24292E;">            table.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(it, </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> EnumMap&lt;&gt;(RoShamBo5.class));</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">initRow</span><span style="color:#24292E;">(PAPER, DRAW, LOSE, WIN);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">initRow</span><span style="color:#24292E;">(SCISSORS, WIN, DRAW, LOSE);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">initRow</span><span style="color:#24292E;">(ROCK, LOSE, WIN, DRAW);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">initRow</span><span style="color:#24292E;">(RoShamBo5 </span><span style="color:#E36209;">it</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">                        Outcome </span><span style="color:#E36209;">vPAPER</span><span style="color:#24292E;">, Outcome </span><span style="color:#E36209;">vSCISSORS</span><span style="color:#24292E;">, Outcome </span><span style="color:#E36209;">vROCK</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        EnumMap&lt;</span><span style="color:#D73A49;">RoShamBo5</span><span style="color:#24292E;">,</span><span style="color:#D73A49;">Outcome</span><span style="color:#24292E;">&gt; row </span><span style="color:#D73A49;">=</span></span>
<span class="line"><span style="color:#24292E;">                RoShamBo5.table.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(it);</span></span>
<span class="line"><span style="color:#24292E;">        row.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(RoShamBo5.PAPER, vPAPER);</span></span>
<span class="line"><span style="color:#24292E;">        row.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(RoShamBo5.SCISSORS, vSCISSORS);</span></span>
<span class="line"><span style="color:#24292E;">        row.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(RoShamBo5.ROCK, vROCK);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Outcome </span><span style="color:#6F42C1;">compete</span><span style="color:#24292E;">(RoShamBo5 </span><span style="color:#E36209;">it</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> table.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(it);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        RoShamBo.</span><span style="color:#6F42C1;">play</span><span style="color:#24292E;">(RoShamBo5.class, </span><span style="color:#005CC5;">20</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>输出为：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">ROCK vs. ROCK: DRAW</span></span>
<span class="line"><span style="color:#e1e4e8;">SCISSORS vs. ROCK: LOSE</span></span>
<span class="line"><span style="color:#e1e4e8;">SCISSORS vs. ROCK: LOSE</span></span>
<span class="line"><span style="color:#e1e4e8;">SCISSORS vs. ROCK: LOSE</span></span>
<span class="line"><span style="color:#e1e4e8;">PAPER vs. SCISSORS: LOSE</span></span>
<span class="line"><span style="color:#e1e4e8;">PAPER vs. PAPER: DRAW</span></span>
<span class="line"><span style="color:#e1e4e8;">PAPER vs. SCISSORS: LOSE</span></span>
<span class="line"><span style="color:#e1e4e8;">ROCK vs. SCISSORS: WIN</span></span>
<span class="line"><span style="color:#e1e4e8;">SCISSORS vs. SCISSORS: DRAW</span></span>
<span class="line"><span style="color:#e1e4e8;">ROCK vs. SCISSORS: WIN</span></span>
<span class="line"><span style="color:#e1e4e8;">SCISSORS vs. PAPER: WIN</span></span>
<span class="line"><span style="color:#e1e4e8;">SCISSORS vs. PAPER: WIN</span></span>
<span class="line"><span style="color:#e1e4e8;">ROCK vs. PAPER: LOSE</span></span>
<span class="line"><span style="color:#e1e4e8;">ROCK vs. SCISSORS: WIN</span></span>
<span class="line"><span style="color:#e1e4e8;">SCISSORS vs. ROCK: LOSE</span></span>
<span class="line"><span style="color:#e1e4e8;">PAPER vs. SCISSORS: LOSE</span></span>
<span class="line"><span style="color:#e1e4e8;">SCISSORS vs. PAPER: WIN</span></span>
<span class="line"><span style="color:#e1e4e8;">SCISSORS vs. PAPER: WIN</span></span>
<span class="line"><span style="color:#e1e4e8;">SCISSORS vs. PAPER: WIN</span></span>
<span class="line"><span style="color:#e1e4e8;">SCISSORS vs. PAPER: WIN</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">ROCK vs. ROCK: DRAW</span></span>
<span class="line"><span style="color:#24292e;">SCISSORS vs. ROCK: LOSE</span></span>
<span class="line"><span style="color:#24292e;">SCISSORS vs. ROCK: LOSE</span></span>
<span class="line"><span style="color:#24292e;">SCISSORS vs. ROCK: LOSE</span></span>
<span class="line"><span style="color:#24292e;">PAPER vs. SCISSORS: LOSE</span></span>
<span class="line"><span style="color:#24292e;">PAPER vs. PAPER: DRAW</span></span>
<span class="line"><span style="color:#24292e;">PAPER vs. SCISSORS: LOSE</span></span>
<span class="line"><span style="color:#24292e;">ROCK vs. SCISSORS: WIN</span></span>
<span class="line"><span style="color:#24292e;">SCISSORS vs. SCISSORS: DRAW</span></span>
<span class="line"><span style="color:#24292e;">ROCK vs. SCISSORS: WIN</span></span>
<span class="line"><span style="color:#24292e;">SCISSORS vs. PAPER: WIN</span></span>
<span class="line"><span style="color:#24292e;">SCISSORS vs. PAPER: WIN</span></span>
<span class="line"><span style="color:#24292e;">ROCK vs. PAPER: LOSE</span></span>
<span class="line"><span style="color:#24292e;">ROCK vs. SCISSORS: WIN</span></span>
<span class="line"><span style="color:#24292e;">SCISSORS vs. ROCK: LOSE</span></span>
<span class="line"><span style="color:#24292e;">PAPER vs. SCISSORS: LOSE</span></span>
<span class="line"><span style="color:#24292e;">SCISSORS vs. PAPER: WIN</span></span>
<span class="line"><span style="color:#24292e;">SCISSORS vs. PAPER: WIN</span></span>
<span class="line"><span style="color:#24292e;">SCISSORS vs. PAPER: WIN</span></span>
<span class="line"><span style="color:#24292e;">SCISSORS vs. PAPER: WIN</span></span></code></pre></div><p>该程序在一个 static 子句中初始化 EnumMap 对象，具体见表格似的 initRow() 方法调用。请注意 compete() 方法，您可以看到，在一行语句中发生了两次分发。</p><h3 id="使用二维数组" tabindex="-1">使用二维数组 <a class="header-anchor" href="#使用二维数组" aria-label="Permalink to &quot;使用二维数组&quot;">​</a></h3><p>我们还可以进一步简化实现两路分发的解决方案。我们注意到，每个 enum 实例都有一个固定的值（基于其声明的次序），并且可以通过 ordinal() 方法取得该值。因此我们可以使用二维数组，将竞争者映射到竞争结果。采用这种方式能够获得最简洁、最直接的解决方案（很可能也是最快速的，虽然我们知道 EnumMap 内部其实也是使用数组实现的）。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">We can simplify the solution even more by noting that each  </span><span style="color:#F97583;">enum</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">instance</span><span style="color:#E1E4E8;"> has a fixed</span></span>
<span class="line"><span style="color:#E1E4E8;">        value (based on its declaration order) and that  ordinal() produces this value. A two-</span></span>
<span class="line"><span style="color:#E1E4E8;">        dimensional array mapping the competitors onto the outcomes produces the smallest</span></span>
<span class="line"><span style="color:#E1E4E8;">        and most straightforward solution (and possibly the fastest, although remember that</span></span>
<span class="line"><span style="color:#E1E4E8;">        EnumMap uses an internal array):</span></span>
<span class="line"><span style="color:#E1E4E8;">// enums/RoShamBo6.java</span></span>
<span class="line"><span style="color:#E1E4E8;">// Enums using &quot;tables&quot; instead of multiple dispatch</span></span>
<span class="line"><span style="color:#E1E4E8;">// {</span><span style="color:#79B8FF;">java</span><span style="color:#E1E4E8;"> enums.RoShamBo6}</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">package</span><span style="color:#E1E4E8;"> enums;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> enums.Outcome.</span><span style="color:#79B8FF;">*</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">enum</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">RoShamBo6</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">implements</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Competitor</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#F97583;">RoShamBo6</span><span style="color:#E1E4E8;">&gt; {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">PAPER</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">SCISSORS</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">ROCK</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">Outcome</span><span style="color:#E1E4E8;">[][] table </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            { DRAW, LOSE, WIN }, </span><span style="color:#6A737D;">// PAPER</span></span>
<span class="line"><span style="color:#E1E4E8;">            { WIN, DRAW, LOSE }, </span><span style="color:#6A737D;">// SCISSORS</span></span>
<span class="line"><span style="color:#E1E4E8;">            { LOSE, WIN, DRAW }, </span><span style="color:#6A737D;">// ROCK</span></span>
<span class="line"><span style="color:#E1E4E8;">    };</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> Outcome </span><span style="color:#B392F0;">compete</span><span style="color:#E1E4E8;">(RoShamBo6 </span><span style="color:#FFAB70;">other</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> table[</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">ordinal</span><span style="color:#E1E4E8;">()][other.</span><span style="color:#B392F0;">ordinal</span><span style="color:#E1E4E8;">()];</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] </span><span style="color:#FFAB70;">args</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        RoShamBo.</span><span style="color:#B392F0;">play</span><span style="color:#E1E4E8;">(RoShamBo6.class, </span><span style="color:#79B8FF;">20</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">We can simplify the solution even more by noting that each  </span><span style="color:#D73A49;">enum</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">instance</span><span style="color:#24292E;"> has a fixed</span></span>
<span class="line"><span style="color:#24292E;">        value (based on its declaration order) and that  ordinal() produces this value. A two-</span></span>
<span class="line"><span style="color:#24292E;">        dimensional array mapping the competitors onto the outcomes produces the smallest</span></span>
<span class="line"><span style="color:#24292E;">        and most straightforward solution (and possibly the fastest, although remember that</span></span>
<span class="line"><span style="color:#24292E;">        EnumMap uses an internal array):</span></span>
<span class="line"><span style="color:#24292E;">// enums/RoShamBo6.java</span></span>
<span class="line"><span style="color:#24292E;">// Enums using &quot;tables&quot; instead of multiple dispatch</span></span>
<span class="line"><span style="color:#24292E;">// {</span><span style="color:#005CC5;">java</span><span style="color:#24292E;"> enums.RoShamBo6}</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">package</span><span style="color:#24292E;"> enums;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> enums.Outcome.</span><span style="color:#005CC5;">*</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">enum</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">RoShamBo6</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Competitor</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">RoShamBo6</span><span style="color:#24292E;">&gt; {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">PAPER</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">SCISSORS</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">ROCK</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">Outcome</span><span style="color:#24292E;">[][] table </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            { DRAW, LOSE, WIN }, </span><span style="color:#6A737D;">// PAPER</span></span>
<span class="line"><span style="color:#24292E;">            { WIN, DRAW, LOSE }, </span><span style="color:#6A737D;">// SCISSORS</span></span>
<span class="line"><span style="color:#24292E;">            { LOSE, WIN, DRAW }, </span><span style="color:#6A737D;">// ROCK</span></span>
<span class="line"><span style="color:#24292E;">    };</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Outcome </span><span style="color:#6F42C1;">compete</span><span style="color:#24292E;">(RoShamBo6 </span><span style="color:#E36209;">other</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> table[</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">ordinal</span><span style="color:#24292E;">()][other.</span><span style="color:#6F42C1;">ordinal</span><span style="color:#24292E;">()];</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        RoShamBo.</span><span style="color:#6F42C1;">play</span><span style="color:#24292E;">(RoShamBo6.class, </span><span style="color:#005CC5;">20</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>输出为：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">ROCK vs. ROCK: DRAW</span></span>
<span class="line"><span style="color:#e1e4e8;">SCISSORS vs. ROCK: LOSE</span></span>
<span class="line"><span style="color:#e1e4e8;">SCISSORS vs. ROCK: LOSE</span></span>
<span class="line"><span style="color:#e1e4e8;">SCISSORS vs. ROCK: LOSE</span></span>
<span class="line"><span style="color:#e1e4e8;">PAPER vs. SCISSORS: LOSE</span></span>
<span class="line"><span style="color:#e1e4e8;">PAPER vs. PAPER: DRAW</span></span>
<span class="line"><span style="color:#e1e4e8;">PAPER vs. SCISSORS: LOSE</span></span>
<span class="line"><span style="color:#e1e4e8;">ROCK vs. SCISSORS: WIN</span></span>
<span class="line"><span style="color:#e1e4e8;">SCISSORS vs. SCISSORS: DRAW</span></span>
<span class="line"><span style="color:#e1e4e8;">ROCK vs. SCISSORS: WIN</span></span>
<span class="line"><span style="color:#e1e4e8;">SCISSORS vs. PAPER: WIN</span></span>
<span class="line"><span style="color:#e1e4e8;">SCISSORS vs. PAPER: WIN</span></span>
<span class="line"><span style="color:#e1e4e8;">ROCK vs. PAPER: LOSE</span></span>
<span class="line"><span style="color:#e1e4e8;">ROCK vs. SCISSORS: WIN</span></span>
<span class="line"><span style="color:#e1e4e8;">SCISSORS vs. ROCK: LOSE</span></span>
<span class="line"><span style="color:#e1e4e8;">PAPER vs. SCISSORS: LOSE</span></span>
<span class="line"><span style="color:#e1e4e8;">SCISSORS vs. PAPER: WIN</span></span>
<span class="line"><span style="color:#e1e4e8;">SCISSORS vs. PAPER: WIN</span></span>
<span class="line"><span style="color:#e1e4e8;">SCISSORS vs. PAPER: WIN</span></span>
<span class="line"><span style="color:#e1e4e8;">SCISSORS vs. PAPER: WIN</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">ROCK vs. ROCK: DRAW</span></span>
<span class="line"><span style="color:#24292e;">SCISSORS vs. ROCK: LOSE</span></span>
<span class="line"><span style="color:#24292e;">SCISSORS vs. ROCK: LOSE</span></span>
<span class="line"><span style="color:#24292e;">SCISSORS vs. ROCK: LOSE</span></span>
<span class="line"><span style="color:#24292e;">PAPER vs. SCISSORS: LOSE</span></span>
<span class="line"><span style="color:#24292e;">PAPER vs. PAPER: DRAW</span></span>
<span class="line"><span style="color:#24292e;">PAPER vs. SCISSORS: LOSE</span></span>
<span class="line"><span style="color:#24292e;">ROCK vs. SCISSORS: WIN</span></span>
<span class="line"><span style="color:#24292e;">SCISSORS vs. SCISSORS: DRAW</span></span>
<span class="line"><span style="color:#24292e;">ROCK vs. SCISSORS: WIN</span></span>
<span class="line"><span style="color:#24292e;">SCISSORS vs. PAPER: WIN</span></span>
<span class="line"><span style="color:#24292e;">SCISSORS vs. PAPER: WIN</span></span>
<span class="line"><span style="color:#24292e;">ROCK vs. PAPER: LOSE</span></span>
<span class="line"><span style="color:#24292e;">ROCK vs. SCISSORS: WIN</span></span>
<span class="line"><span style="color:#24292e;">SCISSORS vs. ROCK: LOSE</span></span>
<span class="line"><span style="color:#24292e;">PAPER vs. SCISSORS: LOSE</span></span>
<span class="line"><span style="color:#24292e;">SCISSORS vs. PAPER: WIN</span></span>
<span class="line"><span style="color:#24292e;">SCISSORS vs. PAPER: WIN</span></span>
<span class="line"><span style="color:#24292e;">SCISSORS vs. PAPER: WIN</span></span>
<span class="line"><span style="color:#24292e;">SCISSORS vs. PAPER: WIN</span></span></code></pre></div><p>table 与前一个例子中 initRow() 方法的调用次序完全相同。</p><p>与前面一个例子相比，这个程序代码虽然简短，但表达能力却更强，部分原因是其代码更易于理解与修改，而且也更直接。不过，由于它使用的是数组，所以这种方式不太“安全”。如果使用一个大型数组，可能会不小心使用了错误的尺寸，而且，如果你的测试不能覆盖所有的可能性，有些错误可能会从你眼前溜过。</p><p>事实上，以上所有的解决方案只是各种不同类型的表罢了。不过，分析各种表的表现形式，找出最适合的那一种，还是很有价值的。注意，虽然上例是最简洁的一种解决方案，但它也是相当僵硬的方案，因为它只能针对给定的常量输入产生常量输出。然而，也没有什么特别的理由阻止你用 table 来生成功能对象。对于某类问题而言，“表驱动式编码”的概念具有非常强大的功能。</p><h2 id="本章小结" tabindex="-1">本章小结 <a class="header-anchor" href="#本章小结" aria-label="Permalink to &quot;本章小结&quot;">​</a></h2><p>虽然枚举类型本身并不是特别复杂，但我还是将本章安排在全书比较靠后的位置，这是因为，程序员可以将 enum 与 Java 语言的其他功能结合使用，例如多态、泛型和反射。</p><p>虽然 Java 中的枚举比 C 或 C++中的 enum 更成熟，但它仍然是一个“小”功能，Java 没有它也已经（虽然有点笨拙）存在很多年了。而本章正好说明了一个“小”功能所能带来的价值。有时恰恰因为它，你才能够优雅而干净地解决问题。正如我在本书中一再强调的那样，优雅与清晰很重要，正是它们区别了成功的解决方案与失败的解决方案。而失败的解决方案就是因为其他人无法理解它。</p><p>关于清晰的话题，Java 1.0 对术语 enumeration 的选择正是一个不幸的反例。对于一个专门用于从序列中选择每一个元素的对象而言，Java 竟然没有使用更通用、更普遍接受的术语 iterator 来表示它（参见<a href="./.html">集合 </a> 章节），有些语言甚至将枚举的数据类型称为 “enumerators”！Java 修正了这个错误，但是 Enumeration 接口已经无法轻易地抹去了，因此它将一直存在于旧的（甚至有些新的）代码、类库以及文档中。</p>`,225),e=[o];function c(t,r,E,y,i,F){return n(),a("div",null,e)}const C=s(p,[["render",c]]);export{A as __pageData,C as default};
