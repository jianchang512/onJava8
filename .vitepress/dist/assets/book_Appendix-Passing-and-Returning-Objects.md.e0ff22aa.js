import{_ as s,o as a,c as n,Q as p}from"./chunks/framework.c3fbb961.js";const u=JSON.parse('{"title":"附录:对象传递和返回","description":"","frontmatter":{},"headers":[],"relativePath":"book/Appendix-Passing-and-Returning-Objects.md","filePath":"book/Appendix-Passing-and-Returning-Objects.md"}'),l={name:"book/Appendix-Passing-and-Returning-Objects.md"},e=p(`<p>[TOC]</p><h1 id="附录-对象传递和返回" tabindex="-1">附录:对象传递和返回 <a class="header-anchor" href="#附录-对象传递和返回" aria-label="Permalink to &quot;附录:对象传递和返回&quot;">​</a></h1><blockquote><p>到现在为止，你已经对“传递”对象实际上是传递引用这一想法想法感到满意。</p></blockquote><p>在许多编程语言中，你可以使用该语言的“常规”方式来传递对象，并且大多数情况下一切正常。 但是通常会出现这种情况，你必须做一些不平常的事情，突然事情变得更加复杂。 Java也不例外，当您传递对象并对其进行操作时，准确了解正在发生的事情很重要。 本附录提供了这种见解。</p><p>提出本附录问题的另一种方法是，如果你之前使用类似C++的编程语言，则是“ Java是否有指针？” Java中的每个对象标识符（除原语外）都是这些指针之一，但它们的用法是不仅受编译器的约束，而且受运行时系统的约束。 换一种说法，Java有指针，但没有指针算法。 这些就是我一直所说的“引用”，您可以将它们视为“安全指针”，与小学的安全剪刀不同-它们不敏锐，因此您不费吹灰之力就无法伤害自己，但是它们有时可能很乏味。</p><h2 id="传递引用" tabindex="-1">传递引用 <a class="header-anchor" href="#传递引用" aria-label="Permalink to &quot;传递引用&quot;">​</a></h2><p>当你将引用传递给方法时，它仍指向同一对象。 一个简单的实验演示了这一点：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// references/PassReferences.java</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">PassReferences</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">f</span><span style="color:#E1E4E8;">(PassReferences </span><span style="color:#FFAB70;">h</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    	System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;h inside f(): &quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> h);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] </span><span style="color:#FFAB70;">args</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        PassReferences p </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">PassReferences</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;p inside main(): &quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> p);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">f</span><span style="color:#E1E4E8;">(p);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#6A737D;">/* Output:</span></span>
<span class="line"><span style="color:#6A737D;">p inside main(): PassReferences@15db9742</span></span>
<span class="line"><span style="color:#6A737D;">h inside f(): PassReferences@15db9742</span></span>
<span class="line"><span style="color:#6A737D;">*/</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// references/PassReferences.java</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">PassReferences</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">f</span><span style="color:#24292E;">(PassReferences </span><span style="color:#E36209;">h</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    	System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;h inside f(): &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> h);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        PassReferences p </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">PassReferences</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;p inside main(): &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> p);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">f</span><span style="color:#24292E;">(p);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6A737D;">/* Output:</span></span>
<span class="line"><span style="color:#6A737D;">p inside main(): PassReferences@15db9742</span></span>
<span class="line"><span style="color:#6A737D;">h inside f(): PassReferences@15db9742</span></span>
<span class="line"><span style="color:#6A737D;">*/</span></span></code></pre></div><p>方法 <code>toString() </code> 在打印语句中自动调用，并且 <code>PassReferences</code> 直接从 <code>Object</code> 继承而无需重新定义 <code>toString（）</code> 。 因此，使用的是 <code>Object</code> 的 <code>toString（）</code> 版本，它打印出对象的类，然后打印出该对象所在的地址（不是引用，而是实际的对象存储）。</p><h2 id="本地拷贝" tabindex="-1">本地拷贝 <a class="header-anchor" href="#本地拷贝" aria-label="Permalink to &quot;本地拷贝&quot;">​</a></h2><h2 id="控制克隆" tabindex="-1">控制克隆 <a class="header-anchor" href="#控制克隆" aria-label="Permalink to &quot;控制克隆&quot;">​</a></h2><h2 id="不可变类" tabindex="-1">不可变类 <a class="header-anchor" href="#不可变类" aria-label="Permalink to &quot;不可变类&quot;">​</a></h2><h2 id="本章小结" tabindex="-1">本章小结 <a class="header-anchor" href="#本章小结" aria-label="Permalink to &quot;本章小结&quot;">​</a></h2>`,13),o=[e];function c(t,r,i,E,y,d){return a(),n("div",null,o)}const f=s(l,[["render",c]]);export{u as __pageData,f as default};
