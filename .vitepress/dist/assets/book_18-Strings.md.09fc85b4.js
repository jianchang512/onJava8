import{_ as s,o as n,c as a,Q as l}from"./chunks/framework.c3fbb961.js";const u=JSON.parse('{"title":"第十八章 字符串","description":"","frontmatter":{},"headers":[],"relativePath":"book/18-Strings.md","filePath":"book/18-Strings.md"}'),p={name:"book/18-Strings.md"},o=l(`<p>[TOC]</p><h1 id="第十八章-字符串" tabindex="-1">第十八章 字符串 <a class="header-anchor" href="#第十八章-字符串" aria-label="Permalink to &quot;第十八章 字符串&quot;">​</a></h1><blockquote><p>字符串操作毫无疑问是计算机程序设计中最常见的行为之一。</p></blockquote><p>在 Java 大展拳脚的 Web 系统中更是如此。在本章中，我们将深入学习在 Java 语言中应用最广泛的 <code>String</code> 类，并研究与之相关的类及工具。</p><h2 id="字符串的不可变" tabindex="-1">字符串的不可变 <a class="header-anchor" href="#字符串的不可变" aria-label="Permalink to &quot;字符串的不可变&quot;">​</a></h2><p><code>String</code> 对象是不可变的。查看 JDK 文档你就会发现，<code>String</code> 类中每一个看起来会修改 <code>String</code> 值的方法，实际上都是创建了一个全新的 <code>String</code> 对象，以包含修改后的字符串内容。而最初的 <code>String</code> 对象则丝毫未动。</p><p>看看下面的代码：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// strings/Immutable.java</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Immutable</span><span style="color:#E1E4E8;"> { </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> String </span><span style="color:#B392F0;">upcase</span><span style="color:#E1E4E8;">(String </span><span style="color:#FFAB70;">s</span><span style="color:#E1E4E8;">) { </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> s.</span><span style="color:#B392F0;">toUpperCase</span><span style="color:#E1E4E8;">(); </span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] </span><span style="color:#FFAB70;">args</span><span style="color:#E1E4E8;">) { </span></span>
<span class="line"><span style="color:#E1E4E8;">        String q </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;howdy&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(q); </span><span style="color:#6A737D;">// howdy </span></span>
<span class="line"><span style="color:#E1E4E8;">        String qq </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">upcase</span><span style="color:#E1E4E8;">(q); </span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(qq); </span><span style="color:#6A737D;">// HOWDY </span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(q); </span><span style="color:#6A737D;">// howdy </span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span></span>
<span class="line"><span style="color:#E1E4E8;">} </span></span>
<span class="line"><span style="color:#6A737D;">/* Output: </span></span>
<span class="line"><span style="color:#6A737D;">howdy</span></span>
<span class="line"><span style="color:#6A737D;">HOWDY </span></span>
<span class="line"><span style="color:#6A737D;">howdy</span></span>
<span class="line"><span style="color:#6A737D;">*/</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// strings/Immutable.java</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Immutable</span><span style="color:#24292E;"> { </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> String </span><span style="color:#6F42C1;">upcase</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">s</span><span style="color:#24292E;">) { </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> s.</span><span style="color:#6F42C1;">toUpperCase</span><span style="color:#24292E;">(); </span></span>
<span class="line"><span style="color:#24292E;">    } </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) { </span></span>
<span class="line"><span style="color:#24292E;">        String q </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;howdy&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(q); </span><span style="color:#6A737D;">// howdy </span></span>
<span class="line"><span style="color:#24292E;">        String qq </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">upcase</span><span style="color:#24292E;">(q); </span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(qq); </span><span style="color:#6A737D;">// HOWDY </span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(q); </span><span style="color:#6A737D;">// howdy </span></span>
<span class="line"><span style="color:#24292E;">    } </span></span>
<span class="line"><span style="color:#24292E;">} </span></span>
<span class="line"><span style="color:#6A737D;">/* Output: </span></span>
<span class="line"><span style="color:#6A737D;">howdy</span></span>
<span class="line"><span style="color:#6A737D;">HOWDY </span></span>
<span class="line"><span style="color:#6A737D;">howdy</span></span>
<span class="line"><span style="color:#6A737D;">*/</span></span></code></pre></div><p>当把 <code>q</code> 传递给 <code>upcase()</code> 方法时，实际传递的是引用的一个拷贝。其实，每当把 String 对象作为方法的参数时，都会复制一份引用，而该引用所指向的对象其实一直待在单一的物理位置上，从未动过。</p><p>回到 <code>upcase()</code> 的定义，传入其中的引用有了名字 <code>s</code>，只有 <code>upcase()</code> 运行的时候，局部引用 <code>s</code> 才存在。一旦 <code>upcase()</code> 运行结束，<code>s</code> 就消失了。当然了，<code>upcase()</code> 的返回值，其实是最终结果的引用。这足以说明，<code>upcase()</code> 返回的引用已经指向了一个新的对象，而 <code>q</code> 仍然在原来的位置。</p><p><code>String</code> 的这种行为正是我们想要的。例如：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">String s </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;asdf&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">String x </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Immutable.</span><span style="color:#B392F0;">upcase</span><span style="color:#E1E4E8;">(s);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">String s </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;asdf&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">String x </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Immutable.</span><span style="color:#6F42C1;">upcase</span><span style="color:#24292E;">(s);</span></span></code></pre></div><p>难道你真的希望 <code>upcase()</code> 方法改变其参数吗？对于一个方法而言，参数是为该方法提供信息的，而不是想让该方法改变自己的。在阅读这段代码时，读者自然会有这样的感觉。这一点很重要，正是有了这种保障，才使得代码易于编写和阅读。</p><h2 id="的重载与-stringbuilder" tabindex="-1"><code>+</code> 的重载与 <code>StringBuilder</code> <a class="header-anchor" href="#的重载与-stringbuilder" aria-label="Permalink to &quot;\`+\` 的重载与 \`StringBuilder\`&quot;">​</a></h2><p><code>String</code> 对象是不可变的，你可以给一个 <code>String</code> 对象添加任意多的别名。因为 <code>String</code> 是只读的，所以指向它的任何引用都不可能修改它的值，因此，也就不会影响到其他引用。</p><p>不可变性会带来一定的效率问题。为 <code>String</code> 对象重载的 <code>+</code> 操作符就是一个例子。重载的意思是，一个操作符在用于特定的类时，被赋予了特殊的意义（用于 <code>String</code> 的 <code>+</code> 与 <code>+=</code> 是 Java 中仅有的两个重载过的操作符，Java 不允许程序员重载任何其他的操作符 [^1]）。</p><p>操作符 <code>+</code> 可以用来连接 <code>String</code>：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// strings/Concatenation.java</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Concatenation</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] </span><span style="color:#FFAB70;">args</span><span style="color:#E1E4E8;">) { </span></span>
<span class="line"><span style="color:#E1E4E8;">        String mango </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;mango&quot;</span><span style="color:#E1E4E8;">; </span></span>
<span class="line"><span style="color:#E1E4E8;">        String s </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;abc&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> mango </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;def&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">47</span><span style="color:#E1E4E8;">; </span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(s);</span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#6A737D;">/* Output:</span></span>
<span class="line"><span style="color:#6A737D;">abcmangodef47 </span></span>
<span class="line"><span style="color:#6A737D;">*/</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// strings/Concatenation.java</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Concatenation</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) { </span></span>
<span class="line"><span style="color:#24292E;">        String mango </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;mango&quot;</span><span style="color:#24292E;">; </span></span>
<span class="line"><span style="color:#24292E;">        String s </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;abc&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> mango </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;def&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">47</span><span style="color:#24292E;">; </span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(s);</span></span>
<span class="line"><span style="color:#24292E;">    } </span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6A737D;">/* Output:</span></span>
<span class="line"><span style="color:#6A737D;">abcmangodef47 </span></span>
<span class="line"><span style="color:#6A737D;">*/</span></span></code></pre></div><p>可以想象一下，这段代码是这样工作的：<code>String</code> 可能有一个 <code>append()</code> 方法，它会生成一个新的 <code>String</code> 对象，以包含“abc”与 <code>mango</code> 连接后的字符串。该对象会再创建另一个新的 <code>String</code> 对象，然后与“def”相连，生成另一个新的对象，依此类推。</p><p>这种方式当然是可行的，但是为了生成最终的 <code>String</code> 对象，会产生一大堆需要垃圾回收的中间对象。我猜想，Java 设计者一开始就是这么做的（这也是软件设计中的一个教训：除非你用代码将系统实现，并让它运行起来，否则你无法真正了解它会有什么问题），然后他们发现其性能相当糟糕。</p><p>想看看以上代码到底是如何工作的吗？可以用 JDK 自带的 <code>javap</code> 工具来反编译以上代码。命令如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">javap </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">c Concatenation</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">javap </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">c Concatenation</span></span></code></pre></div><p>这里的 <code>-c</code> 标志表示将生成 JVM 字节码。我们剔除不感兴趣的部分，然后做细微的修改，于是有了以下的字节码：</p><div class="language-x86asm vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">x86asm</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">public static void main(java.lang.String[]); </span></span>
<span class="line"><span style="color:#e1e4e8;"> Code:</span></span>
<span class="line"><span style="color:#e1e4e8;">  Stack=2, Locals=3, Args_size=1</span></span>
<span class="line"><span style="color:#e1e4e8;">  0: ldc #2; //String mango </span></span>
<span class="line"><span style="color:#e1e4e8;">  2: astore_1 </span></span>
<span class="line"><span style="color:#e1e4e8;">  3: new #3; //class StringBuilder </span></span>
<span class="line"><span style="color:#e1e4e8;">  6: dup </span></span>
<span class="line"><span style="color:#e1e4e8;">  7: invokespecial #4; //StringBuilder.&quot;&lt;init&gt;&quot;:() </span></span>
<span class="line"><span style="color:#e1e4e8;">  10: ldc #5; //String abc </span></span>
<span class="line"><span style="color:#e1e4e8;">  12: invokevirtual #6; //StringBuilder.append:(String) </span></span>
<span class="line"><span style="color:#e1e4e8;">  15: aload_1 </span></span>
<span class="line"><span style="color:#e1e4e8;">  16: invokevirtual #6; //StringBuilder.append:(String) </span></span>
<span class="line"><span style="color:#e1e4e8;">  19: ldc #7; //String def </span></span>
<span class="line"><span style="color:#e1e4e8;">  21: invokevirtual #6; //StringBuilder.append:(String) </span></span>
<span class="line"><span style="color:#e1e4e8;">  24: bipush 47 </span></span>
<span class="line"><span style="color:#e1e4e8;">  26: invokevirtual #8; //StringBuilder.append:(I) </span></span>
<span class="line"><span style="color:#e1e4e8;">  29: invokevirtual #9; //StringBuilder.toString:() </span></span>
<span class="line"><span style="color:#e1e4e8;">  32: astore_2 </span></span>
<span class="line"><span style="color:#e1e4e8;">  33: getstatic #10; //Field System.out:PrintStream;</span></span>
<span class="line"><span style="color:#e1e4e8;">  36: aload_2 </span></span>
<span class="line"><span style="color:#e1e4e8;">  37: invokevirtual #11; //PrintStream.println:(String) </span></span>
<span class="line"><span style="color:#e1e4e8;">  40: return</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">public static void main(java.lang.String[]); </span></span>
<span class="line"><span style="color:#24292e;"> Code:</span></span>
<span class="line"><span style="color:#24292e;">  Stack=2, Locals=3, Args_size=1</span></span>
<span class="line"><span style="color:#24292e;">  0: ldc #2; //String mango </span></span>
<span class="line"><span style="color:#24292e;">  2: astore_1 </span></span>
<span class="line"><span style="color:#24292e;">  3: new #3; //class StringBuilder </span></span>
<span class="line"><span style="color:#24292e;">  6: dup </span></span>
<span class="line"><span style="color:#24292e;">  7: invokespecial #4; //StringBuilder.&quot;&lt;init&gt;&quot;:() </span></span>
<span class="line"><span style="color:#24292e;">  10: ldc #5; //String abc </span></span>
<span class="line"><span style="color:#24292e;">  12: invokevirtual #6; //StringBuilder.append:(String) </span></span>
<span class="line"><span style="color:#24292e;">  15: aload_1 </span></span>
<span class="line"><span style="color:#24292e;">  16: invokevirtual #6; //StringBuilder.append:(String) </span></span>
<span class="line"><span style="color:#24292e;">  19: ldc #7; //String def </span></span>
<span class="line"><span style="color:#24292e;">  21: invokevirtual #6; //StringBuilder.append:(String) </span></span>
<span class="line"><span style="color:#24292e;">  24: bipush 47 </span></span>
<span class="line"><span style="color:#24292e;">  26: invokevirtual #8; //StringBuilder.append:(I) </span></span>
<span class="line"><span style="color:#24292e;">  29: invokevirtual #9; //StringBuilder.toString:() </span></span>
<span class="line"><span style="color:#24292e;">  32: astore_2 </span></span>
<span class="line"><span style="color:#24292e;">  33: getstatic #10; //Field System.out:PrintStream;</span></span>
<span class="line"><span style="color:#24292e;">  36: aload_2 </span></span>
<span class="line"><span style="color:#24292e;">  37: invokevirtual #11; //PrintStream.println:(String) </span></span>
<span class="line"><span style="color:#24292e;">  40: return</span></span></code></pre></div><p>如果你有汇编语言的经验，以上代码应该很眼熟(其中的 <code>dup</code> 和 <code>invokevirtual</code> 语句相当于Java虚拟机上的汇编语句。即使你完全不了解汇编语言也无需担心)。需要重点注意的是：编译器自动引入了 <code>java.lang.StringBuilder</code> 类。虽然源代码中并没有使用 <code>StringBuilder</code> 类，但是编译器却自作主张地使用了它，就因为它更高效。</p><p>在这里，编译器创建了一个 <code>StringBuilder</code> 对象，用于构建最终的 <code>String</code>，并对每个字符串调用了一次 <code>append()</code> 方法，共计 4 次。最后调用 <code>toString()</code> 生成结果，并存为 <code>s</code> (使用的命令为 <code>astore_2</code>)。</p><p>现在，也许你会觉得可以随意使用 <code>String</code> 对象，反正编译器会自动为你做性能优化。可是在这之前，让我们更深入地看看编译器能为我们优化到什么程度。下面的例子采用两种方式生成一个 <code>String</code>：方法一使用了多个 <code>String</code> 对象；方法二在代码中使用了 <code>StringBuilder</code>。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// strings/WhitherStringBuilder.java</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">WhitherStringBuilder</span><span style="color:#E1E4E8;"> { </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> String </span><span style="color:#B392F0;">implicit</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] </span><span style="color:#FFAB70;">fields</span><span style="color:#E1E4E8;">) { </span></span>
<span class="line"><span style="color:#E1E4E8;">        String result </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;&quot;</span><span style="color:#E1E4E8;">; </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;">(String field </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> fields) { </span></span>
<span class="line"><span style="color:#E1E4E8;">            result </span><span style="color:#F97583;">+=</span><span style="color:#E1E4E8;"> field;</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> result; </span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> String </span><span style="color:#B392F0;">explicit</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] </span><span style="color:#FFAB70;">fields</span><span style="color:#E1E4E8;">) { </span></span>
<span class="line"><span style="color:#E1E4E8;">        StringBuilder result </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">StringBuilder</span><span style="color:#E1E4E8;">(); </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;">(String field </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> fields) { </span></span>
<span class="line"><span style="color:#E1E4E8;">            result.</span><span style="color:#B392F0;">append</span><span style="color:#E1E4E8;">(field); </span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> result.</span><span style="color:#B392F0;">toString</span><span style="color:#E1E4E8;">(); </span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// strings/WhitherStringBuilder.java</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">WhitherStringBuilder</span><span style="color:#24292E;"> { </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> String </span><span style="color:#6F42C1;">implicit</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">fields</span><span style="color:#24292E;">) { </span></span>
<span class="line"><span style="color:#24292E;">        String result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;&quot;</span><span style="color:#24292E;">; </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">for</span><span style="color:#24292E;">(String field </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> fields) { </span></span>
<span class="line"><span style="color:#24292E;">            result </span><span style="color:#D73A49;">+=</span><span style="color:#24292E;"> field;</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> result; </span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> String </span><span style="color:#6F42C1;">explicit</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">fields</span><span style="color:#24292E;">) { </span></span>
<span class="line"><span style="color:#24292E;">        StringBuilder result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">StringBuilder</span><span style="color:#24292E;">(); </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">for</span><span style="color:#24292E;">(String field </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> fields) { </span></span>
<span class="line"><span style="color:#24292E;">            result.</span><span style="color:#6F42C1;">append</span><span style="color:#24292E;">(field); </span></span>
<span class="line"><span style="color:#24292E;">        } </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> result.</span><span style="color:#6F42C1;">toString</span><span style="color:#24292E;">(); </span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>现在运行 <code>javap -c WitherStringBuilder</code>，可以看到两种不同方法（我已经去掉不相关的细节）对应的字节码。首先是 <code>implicit()</code> 方法：</p><div class="language-x86asm vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">x86asm</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">public java.lang.String implicit(java.lang.String[]); </span></span>
<span class="line"><span style="color:#e1e4e8;">0: ldc #2 // String </span></span>
<span class="line"><span style="color:#e1e4e8;">2: astore_2</span></span>
<span class="line"><span style="color:#e1e4e8;">3: aload_1 </span></span>
<span class="line"><span style="color:#e1e4e8;">4: astore_3 </span></span>
<span class="line"><span style="color:#e1e4e8;">5: aload_3 </span></span>
<span class="line"><span style="color:#e1e4e8;">6: arraylength </span></span>
<span class="line"><span style="color:#e1e4e8;">7: istore 4 </span></span>
<span class="line"><span style="color:#e1e4e8;">9: iconst_0 </span></span>
<span class="line"><span style="color:#e1e4e8;">10: istore 5 </span></span>
<span class="line"><span style="color:#e1e4e8;">12: iload 5 </span></span>
<span class="line"><span style="color:#e1e4e8;">14: iload 4 </span></span>
<span class="line"><span style="color:#e1e4e8;">16: if_icmpge 51 </span></span>
<span class="line"><span style="color:#e1e4e8;">19: aload_3 </span></span>
<span class="line"><span style="color:#e1e4e8;">20: iload 5 </span></span>
<span class="line"><span style="color:#e1e4e8;">22: aaload </span></span>
<span class="line"><span style="color:#e1e4e8;">23: astore 6 </span></span>
<span class="line"><span style="color:#e1e4e8;">25: new #3 // StringBuilder </span></span>
<span class="line"><span style="color:#e1e4e8;">28: dup </span></span>
<span class="line"><span style="color:#e1e4e8;">29: invokespecial #4 // StringBuilder.&quot;&lt;init&gt;&quot;</span></span>
<span class="line"><span style="color:#e1e4e8;">32: aload_2 </span></span>
<span class="line"><span style="color:#e1e4e8;">33: invokevirtual #5 // StringBuilder.append:(String) </span></span>
<span class="line"><span style="color:#e1e4e8;">36: aload 6 </span></span>
<span class="line"><span style="color:#e1e4e8;">38: invokevirtual #5 // StringBuilder.append:(String;) </span></span>
<span class="line"><span style="color:#e1e4e8;">41: invokevirtual #6 // StringBuilder.toString:() </span></span>
<span class="line"><span style="color:#e1e4e8;">44: astore_2 </span></span>
<span class="line"><span style="color:#e1e4e8;">45: iinc 5, 1 </span></span>
<span class="line"><span style="color:#e1e4e8;">48: goto 12 </span></span>
<span class="line"><span style="color:#e1e4e8;">51: aload_2 </span></span>
<span class="line"><span style="color:#e1e4e8;">52: areturn</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">public java.lang.String implicit(java.lang.String[]); </span></span>
<span class="line"><span style="color:#24292e;">0: ldc #2 // String </span></span>
<span class="line"><span style="color:#24292e;">2: astore_2</span></span>
<span class="line"><span style="color:#24292e;">3: aload_1 </span></span>
<span class="line"><span style="color:#24292e;">4: astore_3 </span></span>
<span class="line"><span style="color:#24292e;">5: aload_3 </span></span>
<span class="line"><span style="color:#24292e;">6: arraylength </span></span>
<span class="line"><span style="color:#24292e;">7: istore 4 </span></span>
<span class="line"><span style="color:#24292e;">9: iconst_0 </span></span>
<span class="line"><span style="color:#24292e;">10: istore 5 </span></span>
<span class="line"><span style="color:#24292e;">12: iload 5 </span></span>
<span class="line"><span style="color:#24292e;">14: iload 4 </span></span>
<span class="line"><span style="color:#24292e;">16: if_icmpge 51 </span></span>
<span class="line"><span style="color:#24292e;">19: aload_3 </span></span>
<span class="line"><span style="color:#24292e;">20: iload 5 </span></span>
<span class="line"><span style="color:#24292e;">22: aaload </span></span>
<span class="line"><span style="color:#24292e;">23: astore 6 </span></span>
<span class="line"><span style="color:#24292e;">25: new #3 // StringBuilder </span></span>
<span class="line"><span style="color:#24292e;">28: dup </span></span>
<span class="line"><span style="color:#24292e;">29: invokespecial #4 // StringBuilder.&quot;&lt;init&gt;&quot;</span></span>
<span class="line"><span style="color:#24292e;">32: aload_2 </span></span>
<span class="line"><span style="color:#24292e;">33: invokevirtual #5 // StringBuilder.append:(String) </span></span>
<span class="line"><span style="color:#24292e;">36: aload 6 </span></span>
<span class="line"><span style="color:#24292e;">38: invokevirtual #5 // StringBuilder.append:(String;) </span></span>
<span class="line"><span style="color:#24292e;">41: invokevirtual #6 // StringBuilder.toString:() </span></span>
<span class="line"><span style="color:#24292e;">44: astore_2 </span></span>
<span class="line"><span style="color:#24292e;">45: iinc 5, 1 </span></span>
<span class="line"><span style="color:#24292e;">48: goto 12 </span></span>
<span class="line"><span style="color:#24292e;">51: aload_2 </span></span>
<span class="line"><span style="color:#24292e;">52: areturn</span></span></code></pre></div><p>注意从第 16 行到第 48 行构成了一个循环体。第 16 行：对堆栈中的操作数进行“大于或等于的整数比较运算”，循环结束时跳转到第 51 行。第 48 行：重新回到循环体的起始位置（第 12 行）。注意：<code>StringBuilder</code> 是在循环内构造的，这意味着每进行一次循环，会创建一个新的 <code>StringBuilder</code> 对象。</p><p>下面是 <code>explicit()</code> 方法对应的字节码：</p><div class="language-x86asm vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">x86asm</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">public java.lang.String explicit(java.lang.String[]); </span></span>
<span class="line"><span style="color:#e1e4e8;">0: new #3 // StringBuilder </span></span>
<span class="line"><span style="color:#e1e4e8;">3: dup</span></span>
<span class="line"><span style="color:#e1e4e8;">4: invokespecial #4 // StringBuilder.&quot;&lt;init&gt;&quot; </span></span>
<span class="line"><span style="color:#e1e4e8;">7: astore_2 </span></span>
<span class="line"><span style="color:#e1e4e8;">8: aload_1 </span></span>
<span class="line"><span style="color:#e1e4e8;">9: astore_3 </span></span>
<span class="line"><span style="color:#e1e4e8;">10: aload_3 </span></span>
<span class="line"><span style="color:#e1e4e8;">11: arraylength </span></span>
<span class="line"><span style="color:#e1e4e8;">12: istore 4 </span></span>
<span class="line"><span style="color:#e1e4e8;">14: iconst_0 </span></span>
<span class="line"><span style="color:#e1e4e8;">15: istore 5 </span></span>
<span class="line"><span style="color:#e1e4e8;">17: iload 5 </span></span>
<span class="line"><span style="color:#e1e4e8;">19: iload 4 </span></span>
<span class="line"><span style="color:#e1e4e8;">21: if_icmpge 43 </span></span>
<span class="line"><span style="color:#e1e4e8;">24: aload_3 </span></span>
<span class="line"><span style="color:#e1e4e8;">25: iload 5 </span></span>
<span class="line"><span style="color:#e1e4e8;">27: aaload </span></span>
<span class="line"><span style="color:#e1e4e8;">28: astore 6 </span></span>
<span class="line"><span style="color:#e1e4e8;">30: aload_2 </span></span>
<span class="line"><span style="color:#e1e4e8;">31: aload 6 </span></span>
<span class="line"><span style="color:#e1e4e8;">33: invokevirtual #5 // StringBuilder.append:(String) </span></span>
<span class="line"><span style="color:#e1e4e8;">36: pop</span></span>
<span class="line"><span style="color:#e1e4e8;">37: iinc 5, 1 </span></span>
<span class="line"><span style="color:#e1e4e8;">40: goto 17 </span></span>
<span class="line"><span style="color:#e1e4e8;">43: aload_2 </span></span>
<span class="line"><span style="color:#e1e4e8;">44: invokevirtual #6 // StringBuilder.toString:() </span></span>
<span class="line"><span style="color:#e1e4e8;">47: areturn</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">public java.lang.String explicit(java.lang.String[]); </span></span>
<span class="line"><span style="color:#24292e;">0: new #3 // StringBuilder </span></span>
<span class="line"><span style="color:#24292e;">3: dup</span></span>
<span class="line"><span style="color:#24292e;">4: invokespecial #4 // StringBuilder.&quot;&lt;init&gt;&quot; </span></span>
<span class="line"><span style="color:#24292e;">7: astore_2 </span></span>
<span class="line"><span style="color:#24292e;">8: aload_1 </span></span>
<span class="line"><span style="color:#24292e;">9: astore_3 </span></span>
<span class="line"><span style="color:#24292e;">10: aload_3 </span></span>
<span class="line"><span style="color:#24292e;">11: arraylength </span></span>
<span class="line"><span style="color:#24292e;">12: istore 4 </span></span>
<span class="line"><span style="color:#24292e;">14: iconst_0 </span></span>
<span class="line"><span style="color:#24292e;">15: istore 5 </span></span>
<span class="line"><span style="color:#24292e;">17: iload 5 </span></span>
<span class="line"><span style="color:#24292e;">19: iload 4 </span></span>
<span class="line"><span style="color:#24292e;">21: if_icmpge 43 </span></span>
<span class="line"><span style="color:#24292e;">24: aload_3 </span></span>
<span class="line"><span style="color:#24292e;">25: iload 5 </span></span>
<span class="line"><span style="color:#24292e;">27: aaload </span></span>
<span class="line"><span style="color:#24292e;">28: astore 6 </span></span>
<span class="line"><span style="color:#24292e;">30: aload_2 </span></span>
<span class="line"><span style="color:#24292e;">31: aload 6 </span></span>
<span class="line"><span style="color:#24292e;">33: invokevirtual #5 // StringBuilder.append:(String) </span></span>
<span class="line"><span style="color:#24292e;">36: pop</span></span>
<span class="line"><span style="color:#24292e;">37: iinc 5, 1 </span></span>
<span class="line"><span style="color:#24292e;">40: goto 17 </span></span>
<span class="line"><span style="color:#24292e;">43: aload_2 </span></span>
<span class="line"><span style="color:#24292e;">44: invokevirtual #6 // StringBuilder.toString:() </span></span>
<span class="line"><span style="color:#24292e;">47: areturn</span></span></code></pre></div><p>可以看到，不仅循环部分的代码更简短、更简单，而且它只生成了一个 <code>StringBuilder</code> 对象。显式地创建 <code>StringBuilder</code> 还允许你预先为其指定大小。如果你已经知道最终字符串的大概长度，那预先指定 <code>StringBuilder</code> 的大小可以避免频繁地重新分配缓冲。</p><p>因此，当你为一个类编写 <code>toString()</code> 方法时，如果字符串操作比较简单，那就可以信赖编译器，它会为你合理地构造最终的字符串结果。但是，如果你要在 <code>toString()</code> 方法中使用循环，且可能有性能问题，那么最好自己创建一个 <code>StringBuilder</code> 对象，用它来构建最终结果。请参考以下示例：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// strings/UsingStringBuilder.java </span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> java.util.</span><span style="color:#79B8FF;">*</span><span style="color:#E1E4E8;">; </span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> java.util.stream.</span><span style="color:#79B8FF;">*</span><span style="color:#E1E4E8;">; </span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">UsingStringBuilder</span><span style="color:#E1E4E8;"> { </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> String </span><span style="color:#B392F0;">string1</span><span style="color:#E1E4E8;">() { </span></span>
<span class="line"><span style="color:#E1E4E8;">        Random rand </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Random</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">47</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        StringBuilder result </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">StringBuilder</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;[&quot;</span><span style="color:#E1E4E8;">); </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">25</span><span style="color:#E1E4E8;">; i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) { </span></span>
<span class="line"><span style="color:#E1E4E8;">            result.</span><span style="color:#B392F0;">append</span><span style="color:#E1E4E8;">(rand.</span><span style="color:#B392F0;">nextInt</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">100</span><span style="color:#E1E4E8;">)); </span></span>
<span class="line"><span style="color:#E1E4E8;">            result.</span><span style="color:#B392F0;">append</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;, &quot;</span><span style="color:#E1E4E8;">); </span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span></span>
<span class="line"><span style="color:#E1E4E8;">        result.</span><span style="color:#B392F0;">delete</span><span style="color:#E1E4E8;">(result.</span><span style="color:#B392F0;">length</span><span style="color:#E1E4E8;">()</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, result.</span><span style="color:#B392F0;">length</span><span style="color:#E1E4E8;">()); </span></span>
<span class="line"><span style="color:#E1E4E8;">        result.</span><span style="color:#B392F0;">append</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;]&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> result.</span><span style="color:#B392F0;">toString</span><span style="color:#E1E4E8;">(); </span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> String </span><span style="color:#B392F0;">string2</span><span style="color:#E1E4E8;">() { </span></span>
<span class="line"><span style="color:#E1E4E8;">        String result </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Random</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">47</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">            .</span><span style="color:#B392F0;">ints</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">25</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">100</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">            .</span><span style="color:#B392F0;">mapToObj</span><span style="color:#E1E4E8;">(Integer</span><span style="color:#F97583;">::</span><span style="color:#E1E4E8;">toString)</span></span>
<span class="line"><span style="color:#E1E4E8;">            .</span><span style="color:#B392F0;">collect</span><span style="color:#E1E4E8;">(Collectors.</span><span style="color:#B392F0;">joining</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;, &quot;</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;[&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> result </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;]&quot;</span><span style="color:#E1E4E8;">; </span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] </span><span style="color:#FFAB70;">args</span><span style="color:#E1E4E8;">) { </span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">string1</span><span style="color:#E1E4E8;">()); </span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">string2</span><span style="color:#E1E4E8;">()); </span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">} </span></span>
<span class="line"><span style="color:#6A737D;">/* Output: </span></span>
<span class="line"><span style="color:#6A737D;">[58, 55, 93, 61, 61, 29, 68, 0, 22, 7, 88, 28, 51, 89, </span></span>
<span class="line"><span style="color:#6A737D;">9, 78, 98, 61, 20, 58, 16, 40, 11, 22, 4] </span></span>
<span class="line"><span style="color:#6A737D;">[58, 55, 93, 61, 61, 29, 68, 0, 22, 7, 88, 28, 51, 89,</span></span>
<span class="line"><span style="color:#6A737D;">9, 78, 98, 61, 20, 58, 16, 40, 11, 22, 4] </span></span>
<span class="line"><span style="color:#6A737D;">*/</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// strings/UsingStringBuilder.java </span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> java.util.</span><span style="color:#005CC5;">*</span><span style="color:#24292E;">; </span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> java.util.stream.</span><span style="color:#005CC5;">*</span><span style="color:#24292E;">; </span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">UsingStringBuilder</span><span style="color:#24292E;"> { </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> String </span><span style="color:#6F42C1;">string1</span><span style="color:#24292E;">() { </span></span>
<span class="line"><span style="color:#24292E;">        Random rand </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Random</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">47</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        StringBuilder result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">StringBuilder</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;[&quot;</span><span style="color:#24292E;">); </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">for</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">25</span><span style="color:#24292E;">; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) { </span></span>
<span class="line"><span style="color:#24292E;">            result.</span><span style="color:#6F42C1;">append</span><span style="color:#24292E;">(rand.</span><span style="color:#6F42C1;">nextInt</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">100</span><span style="color:#24292E;">)); </span></span>
<span class="line"><span style="color:#24292E;">            result.</span><span style="color:#6F42C1;">append</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;, &quot;</span><span style="color:#24292E;">); </span></span>
<span class="line"><span style="color:#24292E;">        } </span></span>
<span class="line"><span style="color:#24292E;">        result.</span><span style="color:#6F42C1;">delete</span><span style="color:#24292E;">(result.</span><span style="color:#6F42C1;">length</span><span style="color:#24292E;">()</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, result.</span><span style="color:#6F42C1;">length</span><span style="color:#24292E;">()); </span></span>
<span class="line"><span style="color:#24292E;">        result.</span><span style="color:#6F42C1;">append</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;]&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> result.</span><span style="color:#6F42C1;">toString</span><span style="color:#24292E;">(); </span></span>
<span class="line"><span style="color:#24292E;">    } </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> String </span><span style="color:#6F42C1;">string2</span><span style="color:#24292E;">() { </span></span>
<span class="line"><span style="color:#24292E;">        String result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Random</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">47</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">            .</span><span style="color:#6F42C1;">ints</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">25</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">100</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">            .</span><span style="color:#6F42C1;">mapToObj</span><span style="color:#24292E;">(Integer</span><span style="color:#D73A49;">::</span><span style="color:#24292E;">toString)</span></span>
<span class="line"><span style="color:#24292E;">            .</span><span style="color:#6F42C1;">collect</span><span style="color:#24292E;">(Collectors.</span><span style="color:#6F42C1;">joining</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;, &quot;</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;[&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> result </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;]&quot;</span><span style="color:#24292E;">; </span></span>
<span class="line"><span style="color:#24292E;">    } </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) { </span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">string1</span><span style="color:#24292E;">()); </span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">string2</span><span style="color:#24292E;">()); </span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">} </span></span>
<span class="line"><span style="color:#6A737D;">/* Output: </span></span>
<span class="line"><span style="color:#6A737D;">[58, 55, 93, 61, 61, 29, 68, 0, 22, 7, 88, 28, 51, 89, </span></span>
<span class="line"><span style="color:#6A737D;">9, 78, 98, 61, 20, 58, 16, 40, 11, 22, 4] </span></span>
<span class="line"><span style="color:#6A737D;">[58, 55, 93, 61, 61, 29, 68, 0, 22, 7, 88, 28, 51, 89,</span></span>
<span class="line"><span style="color:#6A737D;">9, 78, 98, 61, 20, 58, 16, 40, 11, 22, 4] </span></span>
<span class="line"><span style="color:#6A737D;">*/</span></span></code></pre></div><p>在方法 <code>string1()</code> 中，最终结果是用 <code>append()</code> 语句拼接起来的。如果你想走捷径，例如：<code>append(a + &quot;: &quot; + c)</code>，编译器就会掉入陷阱，从而为你另外创建一个 <code>StringBuilder</code> 对象处理括号内的字符串操作。如果拿不准该用哪种方式，随时可以用 <code>javap</code> 来分析你的程序。</p><p><code>StringBuilder</code> 提供了丰富而全面的方法，包括 <code>insert()</code>、<code>replace()</code>、<code>substring()</code>，甚至还有<code>reverse()</code>，但是最常用的还是 <code>append()</code> 和 <code>toString()</code>。还有 <code>delete()</code>，上面的例子中我们用它删除最后一个逗号和空格，以便添加右括号。</p><p><code>string2()</code> 使用了 <code>Stream</code>，这样代码更加简洁美观。可以证明，<code>Collectors.joining()</code> 内部也是使用的 <code>StringBuilder</code>，这种写法不会影响性能！</p><p><code>StringBuilder </code>是 Java SE5 引入的，在这之前用的是 <code>StringBuffer</code>。后者是线程安全的（参见<a href="./24-Concurrent-Programming.html">并发编程</a>），因此开销也会大些。使用 <code>StringBuilder</code> 进行字符串操作更快一点。</p><h2 id="意外递归" tabindex="-1">意外递归 <a class="header-anchor" href="#意外递归" aria-label="Permalink to &quot;意外递归&quot;">​</a></h2><p>Java 中的每个类从根本上都是继承自 <code>Object</code>，标准集合类也是如此，它们都有 <code>toString()</code> 方法，并且覆盖了该方法，使得它生成的 <code>String</code> 结果能够表达集合自身，以及集合包含的对象。例如 <code>ArrayList.toString()</code>，它会遍历 <code>ArrayList</code> 中包含的所有对象，调用每个元素上的 <code>toString()</code> 方法：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// strings/ArrayListDisplay.java </span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> java.util.</span><span style="color:#79B8FF;">*</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> java.util.stream.</span><span style="color:#79B8FF;">*</span><span style="color:#E1E4E8;">; </span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> generics.coffee.</span><span style="color:#79B8FF;">*</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ArrayListDisplay</span><span style="color:#E1E4E8;"> { </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] </span><span style="color:#FFAB70;">args</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        List&lt;</span><span style="color:#F97583;">Coffee</span><span style="color:#E1E4E8;">&gt; coffees </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">            Stream.</span><span style="color:#B392F0;">generate</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">CoffeeSupplier</span><span style="color:#E1E4E8;">())</span></span>
<span class="line"><span style="color:#E1E4E8;">                .</span><span style="color:#B392F0;">limit</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">                .</span><span style="color:#B392F0;">collect</span><span style="color:#E1E4E8;">(Collectors.</span><span style="color:#B392F0;">toList</span><span style="color:#E1E4E8;">()); </span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(coffees); </span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#6A737D;">/* Output: </span></span>
<span class="line"><span style="color:#6A737D;">[Americano 0, Latte 1, Americano 2, Mocha 3, Mocha 4, </span></span>
<span class="line"><span style="color:#6A737D;">Breve 5, Americano 6, Latte 7, Cappuccino 8, Cappuccino 9] </span></span>
<span class="line"><span style="color:#6A737D;">*/</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// strings/ArrayListDisplay.java </span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> java.util.</span><span style="color:#005CC5;">*</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> java.util.stream.</span><span style="color:#005CC5;">*</span><span style="color:#24292E;">; </span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> generics.coffee.</span><span style="color:#005CC5;">*</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ArrayListDisplay</span><span style="color:#24292E;"> { </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        List&lt;</span><span style="color:#D73A49;">Coffee</span><span style="color:#24292E;">&gt; coffees </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">            Stream.</span><span style="color:#6F42C1;">generate</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">CoffeeSupplier</span><span style="color:#24292E;">())</span></span>
<span class="line"><span style="color:#24292E;">                .</span><span style="color:#6F42C1;">limit</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">10</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">                .</span><span style="color:#6F42C1;">collect</span><span style="color:#24292E;">(Collectors.</span><span style="color:#6F42C1;">toList</span><span style="color:#24292E;">()); </span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(coffees); </span></span>
<span class="line"><span style="color:#24292E;">    } </span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6A737D;">/* Output: </span></span>
<span class="line"><span style="color:#6A737D;">[Americano 0, Latte 1, Americano 2, Mocha 3, Mocha 4, </span></span>
<span class="line"><span style="color:#6A737D;">Breve 5, Americano 6, Latte 7, Cappuccino 8, Cappuccino 9] </span></span>
<span class="line"><span style="color:#6A737D;">*/</span></span></code></pre></div><p>如果你希望 <code>toString()</code> 打印出类的内存地址，也许你会考虑使用 <code>this</code> 关键字：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// strings/InfiniteRecursion.java </span></span>
<span class="line"><span style="color:#6A737D;">// Accidental recursion </span></span>
<span class="line"><span style="color:#6A737D;">// {ThrowsException} </span></span>
<span class="line"><span style="color:#6A737D;">// {VisuallyInspectOutput} Throws very long exception</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> java.util.</span><span style="color:#79B8FF;">*</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> java.util.stream.</span><span style="color:#79B8FF;">*</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">InfiniteRecursion</span><span style="color:#E1E4E8;"> { </span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Override</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> String </span><span style="color:#B392F0;">toString</span><span style="color:#E1E4E8;">() { </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot; InfiniteRecursion address: &quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] </span><span style="color:#FFAB70;">args</span><span style="color:#E1E4E8;">) { </span></span>
<span class="line"><span style="color:#E1E4E8;">        Stream.</span><span style="color:#B392F0;">generate</span><span style="color:#E1E4E8;">(InfiniteRecursion</span><span style="color:#F97583;">::new</span><span style="color:#E1E4E8;">) </span></span>
<span class="line"><span style="color:#E1E4E8;">            .</span><span style="color:#B392F0;">limit</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">) </span></span>
<span class="line"><span style="color:#E1E4E8;">            .</span><span style="color:#B392F0;">forEach</span><span style="color:#E1E4E8;">(System.out</span><span style="color:#F97583;">::</span><span style="color:#E1E4E8;">println); </span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// strings/InfiniteRecursion.java </span></span>
<span class="line"><span style="color:#6A737D;">// Accidental recursion </span></span>
<span class="line"><span style="color:#6A737D;">// {ThrowsException} </span></span>
<span class="line"><span style="color:#6A737D;">// {VisuallyInspectOutput} Throws very long exception</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> java.util.</span><span style="color:#005CC5;">*</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> java.util.stream.</span><span style="color:#005CC5;">*</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">InfiniteRecursion</span><span style="color:#24292E;"> { </span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> String </span><span style="color:#6F42C1;">toString</span><span style="color:#24292E;">() { </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot; InfiniteRecursion address: &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">&quot;</span></span>
<span class="line"><span style="color:#24292E;">    } </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) { </span></span>
<span class="line"><span style="color:#24292E;">        Stream.</span><span style="color:#6F42C1;">generate</span><span style="color:#24292E;">(InfiniteRecursion</span><span style="color:#D73A49;">::new</span><span style="color:#24292E;">) </span></span>
<span class="line"><span style="color:#24292E;">            .</span><span style="color:#6F42C1;">limit</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">10</span><span style="color:#24292E;">) </span></span>
<span class="line"><span style="color:#24292E;">            .</span><span style="color:#6F42C1;">forEach</span><span style="color:#24292E;">(System.out</span><span style="color:#D73A49;">::</span><span style="color:#24292E;">println); </span></span>
<span class="line"><span style="color:#24292E;">    } </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>当你创建了 <code>InfiniteRecursion</code> 对象，并将其打印出来的时候，你会得到一串很长的异常信息。如果你将该 <code>InfiniteRecursion</code> 对象存入一个 <code>ArrayList</code> 中，然后打印该 <code>ArrayList</code>，同样也会抛出异常。其实，当运行到如下代码时：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#9ECBFF;">&quot;InfiniteRecursion address: &quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#032F62;">&quot;InfiniteRecursion address: &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span></span></code></pre></div><p>这里发生了自动类型转换，由 <code>InfiniteRecursion</code> 类型转换为 <code>String</code> 类型。因为编译器发现一个 <code>String</code> 对象后面跟着一个 “+”，而 “+” 后面的对象不是 <code>String</code>，于是编译器试着将 <code>this</code> 转换成一个 <code>String</code>。它怎么转换呢？正是通过调用 <code>this</code> 上的 <code>toString()</code> 方法，于是就发生了递归调用。</p><p>如果你真的想要打印对象的内存地址，应该调用 <code>Object.toString()</code> 方法，这才是负责此任务的方法。所以，不要使用 <code>this</code>，而是应该调用 <code>super.toString()</code> 方法。</p><h2 id="字符串操作" tabindex="-1">字符串操作 <a class="header-anchor" href="#字符串操作" aria-label="Permalink to &quot;字符串操作&quot;">​</a></h2><p>以下是 <code>String</code> 对象具备的一些基本方法。重载的方法归纳在同一行中：</p><table><thead><tr><th>方法</th><th>参数，重载版本</th><th>作用</th></tr></thead><tbody><tr><td>构造方法</td><td>默认版本，<code>String</code>，<code>StringBuilder</code>，<code>StringBuffer</code>，<code>char</code>数组，<code>byte</code>数组</td><td>创建<code>String</code>对象</td></tr><tr><td><code>length()</code></td><td></td><td><code>String</code>中字符的个数</td></tr><tr><td><code>charAt()</code></td><td><code>int</code>索引</td><td>获取<code>String</code>中索引位置上的<code>char</code></td></tr><tr><td><code>getChars()</code>，<code>getBytes()</code></td><td>待复制部分的开始和结束索引，复制的目标数组，目标数组的开始索引</td><td>复制<code>char</code>或<code>byte</code>到一个目标数组中</td></tr><tr><td><code>toCharArray()</code></td><td></td><td>生成一个<code>char[]</code>，包含<code>String</code>中的所有字符</td></tr><tr><td><code>equals()</code>，<code>equalsIgnoreCase()</code></td><td>与之进行比较的<code>String</code></td><td>比较两个<code>String</code>的内容是否相同。如果相同，结果为<code>true</code></td></tr><tr><td><code>compareTo()</code>，<code>compareToIgnoreCase()</code></td><td>与之进行比较的<code>String</code></td><td>按词典顺序比较<code>String</code>的内容，比较结果为负数、零或正数。注意，大小写不等价</td></tr><tr><td><code>contains()</code></td><td>要搜索的<code>CharSequence</code></td><td>如果该<code>String</code>对象包含参数的内容，则返回<code>true</code></td></tr><tr><td><code>contentEquals()</code></td><td>与之进行比较的<code>CharSequence</code>或<code>StringBuffer</code></td><td>如果该<code>String</code>对象与参数的内容完全一致，则返回<code>true</code></td></tr><tr><td><code>isEmpty()</code></td><td></td><td>返回<code>boolean</code>结果，以表明<code>String</code>对象的长度是否为0</td></tr><tr><td><code>regionMatches()</code></td><td>该<code>String</code>的索引偏移量，另一个<code>String</code>及其索引偏移量，要比较的长度。重载版本增加了“忽略大小写”功能</td><td>返回<code>boolean</code>结果，以表明所比较区域是否相等</td></tr><tr><td><code>startsWith()</code></td><td>可能的起始<code>String</code>。重载版本在参数中增加了偏移量</td><td>返回<code>boolean</code>结果，以表明该<code>String</code>是否以传入参数开始</td></tr><tr><td><code>endsWith()</code></td><td>该<code>String</code>可能的后缀<code>String</code></td><td>返回<code>boolean</code>结果，以表明此参数是否是该字符串的后缀</td></tr><tr><td><code>indexOf()</code>，<code>lastIndexOf()</code></td><td>重载版本包括：<code>char</code>，<code>char</code>与起始索引，<code>String</code>，<code>String</code>与起始索引</td><td>如果该<code>String</code>并不包含此参数，就返回-1；否则返回此参数在<code>String</code>中的起始索引。<code>lastIndexOf</code>()是从后往前搜索</td></tr><tr><td><code>matches()</code></td><td>一个正则表达式</td><td>返回<code>boolean</code>结果，以表明该<code>String</code>和给出的正则表达式是否匹配</td></tr><tr><td><code>split()</code></td><td>一个正则表达式。可选参数为需要拆分的最大数量</td><td>按照正则表达式拆分<code>String</code>，返回一个结果数组</td></tr><tr><td><code>join()</code>（Java8引入的）</td><td>分隔符，待拼字符序列。用分隔符将字符序列拼接成一个新的<code>String</code></td><td>用分隔符拼接字符片段，产生一个新的<code>String</code></td></tr><tr><td><code>substring()</code>（即<code>subSequence()</code>）</td><td>重载版本：起始索引；起始索引+终止索引</td><td>返回一个新的<code>String</code>对象，以包含参数指定的子串</td></tr><tr><td><code>concat()</code></td><td>要连接的<code>String</code></td><td>返回一个新的<code>String</code>对象，内容为原始<code>String</code>连接上参数<code>String</code></td></tr><tr><td><code>replace()</code></td><td>要替换的字符，用来进行替换的新字符。也可以用一个<code>CharSequence</code>替换另一个<code>CharSequence</code></td><td>返回替换字符后的新<code>String</code>对象。如果没有替换发生，则返回原始的<code>String</code>对象</td></tr><tr><td><code>replaceFirst()</code></td><td>要替换的正则表达式，用来进行替换的<code>String</code></td><td>返回替换首个目标字符串后的<code>String</code>对象</td></tr><tr><td><code>replaceAll()</code></td><td>要替换的正则表达式，用来进行替换的<code>String</code></td><td>返回替换所有目标字符串后的<code>String</code>对象</td></tr><tr><td><code>toLowerCase()</code>，<code>toUpperCase()</code></td><td></td><td>将字符的大小写改变后，返回一个新的<code>String</code>对象。如果没有任何改变，则返回原始的<code>String</code>对象</td></tr><tr><td><code>trim()</code></td><td></td><td>将<code>String</code>两端的空白符删除后，返回一个新的<code>String</code>对象。如果没有任何改变，则返回原始的<code>String</code>对象</td></tr><tr><td><code>valueOf()</code>（<code>static</code>）</td><td>重载版本：<code>Object</code>；<code>char[]</code>；<code>char[]</code>，偏移量，与字符个数；<code>boolean</code>；<code>char</code>；<code>int</code>；<code>long</code>；<code>float</code>；<code>double</code></td><td>返回一个表示参数内容的<code>String</code></td></tr><tr><td><code>intern()</code></td><td></td><td>为每个唯一的字符序列生成一个且仅生成一个<code>String</code>引用</td></tr><tr><td><code>format()</code></td><td>要格式化的字符串，要替换到格式化字符串的参数</td><td>返回格式化结果<code>String</code></td></tr></tbody></table><p>从这个表可以看出，当需要改变字符串的内容时，<code>String</code> 类的方法都会返回一个新的 <code>String</code> 对象。同时，如果内容不改变，<code>String</code> 方法只是返回原始对象的一个引用而已。这可以节约存储空间以及避免额外的开销。</p><p>本章稍后还将介绍正则表达式在 <code>String</code> 方法中的应用。</p><h2 id="格式化输出" tabindex="-1">格式化输出 <a class="header-anchor" href="#格式化输出" aria-label="Permalink to &quot;格式化输出&quot;">​</a></h2><p>在长久的等待之后，Java SE5 终于推出了 C 语言中 <code>printf()</code> 风格的格式化输出这一功能。这不仅使得控制输出的代码更加简单，同时也给与Java开发者对于输出格式与排列更强大的控制能力。</p><h3 id="printf" tabindex="-1"><code>printf()</code> <a class="header-anchor" href="#printf" aria-label="Permalink to &quot;\`printf()\`&quot;">​</a></h3><p>C 语言的 <code>printf()</code> 并不像 Java 那样连接字符串，它使用一个简单的格式化字符串，加上要插入其中的值，然后将其格式化输出。 <code>printf()</code> 并不使用重载的 <code>+</code> 操作符（C语言没有重载）来连接引号内的字符串或字符串变量，而是使用特殊的占位符来表示数据将来的位置。而且它还将插入格式化字符串的参数，以逗号分隔，排成一行。例如：</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">System.out.</span><span style="color:#B392F0;">printf</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Row 1: [</span><span style="color:#79B8FF;">%d</span><span style="color:#9ECBFF;"> </span><span style="color:#79B8FF;">%f</span><span style="color:#9ECBFF;">]</span><span style="color:#79B8FF;">%n</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">, x, y);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">System.out.</span><span style="color:#6F42C1;">printf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Row 1: [</span><span style="color:#005CC5;">%d</span><span style="color:#032F62;"> </span><span style="color:#005CC5;">%f</span><span style="color:#032F62;">]</span><span style="color:#005CC5;">%n</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">, x, y);</span></span></code></pre></div><p>这一行代码在运行的时候，首先将 <code>x</code> 的值插入到 <code>%d_</code> 的位置，然后将 <code>y</code> 的值插入到 <code>%f</code> 的位置。这些占位符叫做<em>格式修饰符</em>，它们不仅指明了插入数据的位置，同时还指明了将会插入什么类型的变量，以及如何格式化。在这个例子中 <code>%d</code> 表示 <code>x</code> 是一个整数，<code>%f</code> 表示 <code>y</code> 是一个浮点数（<code>float</code> 或者 <code>double</code>）。</p><h3 id="system-out-format" tabindex="-1"><code>System.out.format()</code> <a class="header-anchor" href="#system-out-format" aria-label="Permalink to &quot;\`System.out.format()\`&quot;">​</a></h3><p>Java SE5 引入了 <code>format()</code> 方法，可用于 <code>PrintStream</code> 或者 <code>PrintWriter</code> 对象（你可以在 <a href="./Appendix-IO-Streams.html">附录:流式 I/O</a> 了解更多内容），其中也包括 <code>System.out</code> 对象。<code>format()</code> 方法模仿了 C 语言的 <code>printf()</code>。如果你比较怀旧的话，也可以使用 <code>printf()</code>。以下是一个简单的示例：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// strings/SimpleFormat.java </span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SimpleFormat</span><span style="color:#E1E4E8;"> {   </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] </span><span style="color:#FFAB70;">args</span><span style="color:#E1E4E8;">) {     </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> x </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">;     </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">double</span><span style="color:#E1E4E8;"> y </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">5.332542</span><span style="color:#E1E4E8;">;     </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// The old way: </span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Row 1: [&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> x </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot; &quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> y </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;]&quot;</span><span style="color:#E1E4E8;">);     </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// The new way:     </span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">format</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Row 1: [%d %f]%n&quot;</span><span style="color:#E1E4E8;">, x, y);     </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// or     </span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">printf</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Row 1: [%d %f]%n&quot;</span><span style="color:#E1E4E8;">, x, y);   </span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span></span>
<span class="line"><span style="color:#E1E4E8;">} </span></span>
<span class="line"><span style="color:#6A737D;">/* Output: </span></span>
<span class="line"><span style="color:#6A737D;">Row 1: [5 5.332542] </span></span>
<span class="line"><span style="color:#6A737D;">Row 1: [5 5.332542] </span></span>
<span class="line"><span style="color:#6A737D;">Row 1: [5 5.332542] </span></span>
<span class="line"><span style="color:#6A737D;">*/</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// strings/SimpleFormat.java </span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SimpleFormat</span><span style="color:#24292E;"> {   </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) {     </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> x </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">5</span><span style="color:#24292E;">;     </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">double</span><span style="color:#24292E;"> y </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">5.332542</span><span style="color:#24292E;">;     </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// The old way: </span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Row 1: [&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> x </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot; &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> y </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;]&quot;</span><span style="color:#24292E;">);     </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// The new way:     </span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">format</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Row 1: [%d %f]%n&quot;</span><span style="color:#24292E;">, x, y);     </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// or     </span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">printf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Row 1: [%d %f]%n&quot;</span><span style="color:#24292E;">, x, y);   </span></span>
<span class="line"><span style="color:#24292E;">    } </span></span>
<span class="line"><span style="color:#24292E;">} </span></span>
<span class="line"><span style="color:#6A737D;">/* Output: </span></span>
<span class="line"><span style="color:#6A737D;">Row 1: [5 5.332542] </span></span>
<span class="line"><span style="color:#6A737D;">Row 1: [5 5.332542] </span></span>
<span class="line"><span style="color:#6A737D;">Row 1: [5 5.332542] </span></span>
<span class="line"><span style="color:#6A737D;">*/</span></span></code></pre></div><p>可以看到，<code>format()</code> 和 <code>printf()</code> 是等价的，它们只需要一个简单的格式化字符串，加上一串参数即可，每个参数对应一个格式修饰符。</p><p><code>String</code> 类也有一个 <code>static format()</code> 方法，可以格式化字符串。</p><h3 id="formatter-类" tabindex="-1"><code>Formatter</code> 类 <a class="header-anchor" href="#formatter-类" aria-label="Permalink to &quot;\`Formatter\` 类&quot;">​</a></h3><p>在 Java 中，所有的格式化功能都是由 <code>java.util.Formatter</code> 类处理的。可以将 <code>Formatter</code> 看做一个翻译器，它将你的格式化字符串与数据翻译成需要的结果。当你创建一个 <code>Formatter</code> 对象时，需要向其构造器传递一些信息，告诉它最终的结果将向哪里输出：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// strings/Turtle.java </span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> java.io.</span><span style="color:#79B8FF;">*</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> java.util.</span><span style="color:#79B8FF;">*</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Turtle</span><span style="color:#E1E4E8;"> {   </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> String name;   </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> Formatter f;  </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Turtle</span><span style="color:#E1E4E8;">(String </span><span style="color:#FFAB70;">name</span><span style="color:#E1E4E8;">, Formatter </span><span style="color:#FFAB70;">f</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.name </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> name;     </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.f </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> f;   </span></span>
<span class="line"><span style="color:#E1E4E8;">    }   </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">move</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">x</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">y</span><span style="color:#E1E4E8;">) {     </span></span>
<span class="line"><span style="color:#E1E4E8;">        f.</span><span style="color:#B392F0;">format</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;%s The Turtle is at (%d,%d)%n&quot;</span><span style="color:#E1E4E8;">,       </span></span>
<span class="line"><span style="color:#E1E4E8;">            name, x, y);   </span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] </span><span style="color:#FFAB70;">args</span><span style="color:#E1E4E8;">) {    </span></span>
<span class="line"><span style="color:#E1E4E8;">        PrintStream outAlias </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> System.out;     </span></span>
<span class="line"><span style="color:#E1E4E8;">        Turtle tommy </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Turtle</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Tommy&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Formatter</span><span style="color:#E1E4E8;">(System.out));     </span></span>
<span class="line"><span style="color:#E1E4E8;">        Turtle terry </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Turtle</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Terry&quot;</span><span style="color:#E1E4E8;">,       </span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Formatter</span><span style="color:#E1E4E8;">(outAlias));     </span></span>
<span class="line"><span style="color:#E1E4E8;">        tommy.</span><span style="color:#B392F0;">move</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">);     </span></span>
<span class="line"><span style="color:#E1E4E8;">        terry.</span><span style="color:#B392F0;">move</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">8</span><span style="color:#E1E4E8;">);     </span></span>
<span class="line"><span style="color:#E1E4E8;">        tommy.</span><span style="color:#B392F0;">move</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">);     </span></span>
<span class="line"><span style="color:#E1E4E8;">        terry.</span><span style="color:#B392F0;">move</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">);     </span></span>
<span class="line"><span style="color:#E1E4E8;">        tommy.</span><span style="color:#B392F0;">move</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">);     </span></span>
<span class="line"><span style="color:#E1E4E8;">        terry.</span><span style="color:#B392F0;">move</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">);   </span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span></span>
<span class="line"><span style="color:#E1E4E8;">} </span></span>
<span class="line"><span style="color:#6A737D;">/* Output: </span></span>
<span class="line"><span style="color:#6A737D;">Tommy The Turtle is at (0,0) </span></span>
<span class="line"><span style="color:#6A737D;">Terry The Turtle is at (4,8) </span></span>
<span class="line"><span style="color:#6A737D;">Tommy The Turtle is at (3,4) </span></span>
<span class="line"><span style="color:#6A737D;">Terry The Turtle is at (2,5) </span></span>
<span class="line"><span style="color:#6A737D;">Tommy The Turtle is at (3,3) </span></span>
<span class="line"><span style="color:#6A737D;">Terry The Turtle is at (3,3) </span></span>
<span class="line"><span style="color:#6A737D;">*/</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// strings/Turtle.java </span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> java.io.</span><span style="color:#005CC5;">*</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> java.util.</span><span style="color:#005CC5;">*</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Turtle</span><span style="color:#24292E;"> {   </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> String name;   </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> Formatter f;  </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Turtle</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">name</span><span style="color:#24292E;">, Formatter </span><span style="color:#E36209;">f</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.name </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> name;     </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.f </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> f;   </span></span>
<span class="line"><span style="color:#24292E;">    }   </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">move</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">x</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">y</span><span style="color:#24292E;">) {     </span></span>
<span class="line"><span style="color:#24292E;">        f.</span><span style="color:#6F42C1;">format</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;%s The Turtle is at (%d,%d)%n&quot;</span><span style="color:#24292E;">,       </span></span>
<span class="line"><span style="color:#24292E;">            name, x, y);   </span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) {    </span></span>
<span class="line"><span style="color:#24292E;">        PrintStream outAlias </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> System.out;     </span></span>
<span class="line"><span style="color:#24292E;">        Turtle tommy </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Turtle</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Tommy&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Formatter</span><span style="color:#24292E;">(System.out));     </span></span>
<span class="line"><span style="color:#24292E;">        Turtle terry </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Turtle</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Terry&quot;</span><span style="color:#24292E;">,       </span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Formatter</span><span style="color:#24292E;">(outAlias));     </span></span>
<span class="line"><span style="color:#24292E;">        tommy.</span><span style="color:#6F42C1;">move</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">);     </span></span>
<span class="line"><span style="color:#24292E;">        terry.</span><span style="color:#6F42C1;">move</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">4</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">8</span><span style="color:#24292E;">);     </span></span>
<span class="line"><span style="color:#24292E;">        tommy.</span><span style="color:#6F42C1;">move</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">4</span><span style="color:#24292E;">);     </span></span>
<span class="line"><span style="color:#24292E;">        terry.</span><span style="color:#6F42C1;">move</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">5</span><span style="color:#24292E;">);     </span></span>
<span class="line"><span style="color:#24292E;">        tommy.</span><span style="color:#6F42C1;">move</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">);     </span></span>
<span class="line"><span style="color:#24292E;">        terry.</span><span style="color:#6F42C1;">move</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">);   </span></span>
<span class="line"><span style="color:#24292E;">    } </span></span>
<span class="line"><span style="color:#24292E;">} </span></span>
<span class="line"><span style="color:#6A737D;">/* Output: </span></span>
<span class="line"><span style="color:#6A737D;">Tommy The Turtle is at (0,0) </span></span>
<span class="line"><span style="color:#6A737D;">Terry The Turtle is at (4,8) </span></span>
<span class="line"><span style="color:#6A737D;">Tommy The Turtle is at (3,4) </span></span>
<span class="line"><span style="color:#6A737D;">Terry The Turtle is at (2,5) </span></span>
<span class="line"><span style="color:#6A737D;">Tommy The Turtle is at (3,3) </span></span>
<span class="line"><span style="color:#6A737D;">Terry The Turtle is at (3,3) </span></span>
<span class="line"><span style="color:#6A737D;">*/</span></span></code></pre></div><p>格式化修饰符 <code>%s</code> 表明这里需要 <code>String</code> 参数。</p><p>所有的 <code>tommy</code> 都将输出到 <code>System.out</code>，而所有的 <code>terry</code> 则都输出到 <code>System.out</code> 的一个别名中。<code>Formatter</code> 的重载构造器支持输出到多个路径，不过最常用的还是 <code>PrintStream()</code>（如上例）、<code>OutputStream</code> 和 <code>File</code>。你可以在 <a href="././Appendix-IO-Streams.html">附录:流式 I/O</a> 中了解更多信息。</p><h3 id="格式化修饰符" tabindex="-1">格式化修饰符 <a class="header-anchor" href="#格式化修饰符" aria-label="Permalink to &quot;格式化修饰符&quot;">​</a></h3><p>在插入数据时，如果想要优化空格与对齐，你需要更精细复杂的格式修饰符。以下是其通用语法：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">%</span><span style="color:#E1E4E8;">[argument_index$][flags][width][.precision]conversion</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">%</span><span style="color:#24292E;">[argument_index$][flags][width][.precision]conversion</span></span></code></pre></div><p>最常见的应用是控制一个字段的最小长度，这可以通过指定 <em>width</em> 来实现。<code>Formatter </code>对象通过在必要时添加空格，来确保一个字段至少达到设定长度。默认情况下，数据是右对齐的，不过可以通过使用 <code>-</code> 标志来改变对齐方向。</p><p>与 <em>width</em> 相对的是 <em>precision</em>，用于指定最大长度。<em>width</em> 可以应用于各种类型的数据转换，并且其行为方式都一样。<em>precision</em> 则不然，当应用于不同类型的数据转换时，<em>precision</em> 的意义也不同。在将 <em>precision</em> 应用于 <code>String</code> 时，它表示打印 <code>string</code> 时输出字符的最大数量。而在将 <em>precision</em> 应用于浮点数时，它表示小数部分要显示出来的位数（默认是 6 位小数），如果小数位数过多则舍入，太少则在尾部补零。由于整数没有小数部分，所以 <em>precision</em> 无法应用于整数，如果你对整数应用 <em>precision</em>，则会触发异常。</p><p>下面的程序应用格式修饰符来打印一个购物收据。这是 <em>Builder</em> 设计模式的一个简单实现，即先创建一个初始对象，然后逐渐添加新东西，最后调用 <code>build()</code> 方法完成构建：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// strings/ReceiptBuilder.java </span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> java.util.</span><span style="color:#79B8FF;">*</span><span style="color:#E1E4E8;">; </span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ReceiptBuilder</span><span style="color:#E1E4E8;"> {   </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">double</span><span style="color:#E1E4E8;"> total </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;   </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> Formatter f </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">     </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Formatter</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">StringBuilder</span><span style="color:#E1E4E8;">());   </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ReceiptBuilder</span><span style="color:#E1E4E8;">() {     </span></span>
<span class="line"><span style="color:#E1E4E8;">        f.</span><span style="color:#B392F0;">format</span><span style="color:#E1E4E8;">(       </span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#9ECBFF;">&quot;%-15s %5s %10s%n&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;Item&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;Qty&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;Price&quot;</span><span style="color:#E1E4E8;">);     </span></span>
<span class="line"><span style="color:#E1E4E8;">        f.</span><span style="color:#B392F0;">format</span><span style="color:#E1E4E8;">(       </span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#9ECBFF;">&quot;%-15s %5s %10s%n&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;----&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;---&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;-----&quot;</span><span style="color:#E1E4E8;">);   </span></span>
<span class="line"><span style="color:#E1E4E8;">        }   </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(String </span><span style="color:#FFAB70;">name</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">qty</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">double</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">price</span><span style="color:#E1E4E8;">) {     </span></span>
<span class="line"><span style="color:#E1E4E8;">        f.</span><span style="color:#B392F0;">format</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;%-15.15s %5d %10.2f%n&quot;</span><span style="color:#E1E4E8;">, name, qty, price);     </span></span>
<span class="line"><span style="color:#E1E4E8;">        total </span><span style="color:#F97583;">+=</span><span style="color:#E1E4E8;"> price </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> qty;   </span></span>
<span class="line"><span style="color:#E1E4E8;">    }  </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> String </span><span style="color:#B392F0;">build</span><span style="color:#E1E4E8;">() {     </span></span>
<span class="line"><span style="color:#E1E4E8;">        f.</span><span style="color:#B392F0;">format</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;%-15s %5s %10.2f%n&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;Tax&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;&quot;</span><span style="color:#E1E4E8;">,       </span></span>
<span class="line"><span style="color:#E1E4E8;">          total </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0.06</span><span style="color:#E1E4E8;">);     </span></span>
<span class="line"><span style="color:#E1E4E8;">        f.</span><span style="color:#B392F0;">format</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;%-15s %5s %10s%n&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;-----&quot;</span><span style="color:#E1E4E8;">);     </span></span>
<span class="line"><span style="color:#E1E4E8;">        f.</span><span style="color:#B392F0;">format</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;%-15s %5s %10.2f%n&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;Total&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;&quot;</span><span style="color:#E1E4E8;">,       </span></span>
<span class="line"><span style="color:#E1E4E8;">          total </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1.06</span><span style="color:#E1E4E8;">);     </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> f.</span><span style="color:#B392F0;">toString</span><span style="color:#E1E4E8;">();   </span></span>
<span class="line"><span style="color:#E1E4E8;">    }   </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] </span><span style="color:#FFAB70;">args</span><span style="color:#E1E4E8;">) {     </span></span>
<span class="line"><span style="color:#E1E4E8;">        ReceiptBuilder receiptBuilder </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">       </span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ReceiptBuilder</span><span style="color:#E1E4E8;">();     </span></span>
<span class="line"><span style="color:#E1E4E8;">        receiptBuilder.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Jack&#39;s Magic Beans&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">4.25</span><span style="color:#E1E4E8;">);     </span></span>
<span class="line"><span style="color:#E1E4E8;">        receiptBuilder.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Princess Peas&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">5.1</span><span style="color:#E1E4E8;">);     </span></span>
<span class="line"><span style="color:#E1E4E8;">        receiptBuilder.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(       </span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#9ECBFF;">&quot;Three Bears Porridge&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">14.29</span><span style="color:#E1E4E8;">);     </span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(receiptBuilder.</span><span style="color:#B392F0;">build</span><span style="color:#E1E4E8;">());   </span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span></span>
<span class="line"><span style="color:#E1E4E8;">} </span></span>
<span class="line"><span style="color:#6A737D;">/* Output: </span></span>
<span class="line"><span style="color:#6A737D;">Item              Qty      Price </span></span>
<span class="line"><span style="color:#6A737D;">----              ---      ----- </span></span>
<span class="line"><span style="color:#6A737D;">Jack&#39;s Magic Be     4       4.25 </span></span>
<span class="line"><span style="color:#6A737D;">Princess Peas       3       5.10 </span></span>
<span class="line"><span style="color:#6A737D;">Three Bears Por     1      14.29 </span></span>
<span class="line"><span style="color:#6A737D;">Tax                         2.80 </span></span>
<span class="line"><span style="color:#6A737D;">                           ----- </span></span>
<span class="line"><span style="color:#6A737D;">Total                      49.39 </span></span>
<span class="line"><span style="color:#6A737D;">*/</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// strings/ReceiptBuilder.java </span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> java.util.</span><span style="color:#005CC5;">*</span><span style="color:#24292E;">; </span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ReceiptBuilder</span><span style="color:#24292E;"> {   </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">double</span><span style="color:#24292E;"> total </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;   </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> Formatter f </span><span style="color:#D73A49;">=</span><span style="color:#24292E;">     </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Formatter</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">StringBuilder</span><span style="color:#24292E;">());   </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ReceiptBuilder</span><span style="color:#24292E;">() {     </span></span>
<span class="line"><span style="color:#24292E;">        f.</span><span style="color:#6F42C1;">format</span><span style="color:#24292E;">(       </span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#032F62;">&quot;%-15s %5s %10s%n&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;Item&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;Qty&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;Price&quot;</span><span style="color:#24292E;">);     </span></span>
<span class="line"><span style="color:#24292E;">        f.</span><span style="color:#6F42C1;">format</span><span style="color:#24292E;">(       </span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#032F62;">&quot;%-15s %5s %10s%n&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;----&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;---&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;-----&quot;</span><span style="color:#24292E;">);   </span></span>
<span class="line"><span style="color:#24292E;">        }   </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">name</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">qty</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">double</span><span style="color:#24292E;"> </span><span style="color:#E36209;">price</span><span style="color:#24292E;">) {     </span></span>
<span class="line"><span style="color:#24292E;">        f.</span><span style="color:#6F42C1;">format</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;%-15.15s %5d %10.2f%n&quot;</span><span style="color:#24292E;">, name, qty, price);     </span></span>
<span class="line"><span style="color:#24292E;">        total </span><span style="color:#D73A49;">+=</span><span style="color:#24292E;"> price </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> qty;   </span></span>
<span class="line"><span style="color:#24292E;">    }  </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> String </span><span style="color:#6F42C1;">build</span><span style="color:#24292E;">() {     </span></span>
<span class="line"><span style="color:#24292E;">        f.</span><span style="color:#6F42C1;">format</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;%-15s %5s %10.2f%n&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;Tax&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;&quot;</span><span style="color:#24292E;">,       </span></span>
<span class="line"><span style="color:#24292E;">          total </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0.06</span><span style="color:#24292E;">);     </span></span>
<span class="line"><span style="color:#24292E;">        f.</span><span style="color:#6F42C1;">format</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;%-15s %5s %10s%n&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;-----&quot;</span><span style="color:#24292E;">);     </span></span>
<span class="line"><span style="color:#24292E;">        f.</span><span style="color:#6F42C1;">format</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;%-15s %5s %10.2f%n&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;Total&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;&quot;</span><span style="color:#24292E;">,       </span></span>
<span class="line"><span style="color:#24292E;">          total </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1.06</span><span style="color:#24292E;">);     </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> f.</span><span style="color:#6F42C1;">toString</span><span style="color:#24292E;">();   </span></span>
<span class="line"><span style="color:#24292E;">    }   </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) {     </span></span>
<span class="line"><span style="color:#24292E;">        ReceiptBuilder receiptBuilder </span><span style="color:#D73A49;">=</span><span style="color:#24292E;">       </span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ReceiptBuilder</span><span style="color:#24292E;">();     </span></span>
<span class="line"><span style="color:#24292E;">        receiptBuilder.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Jack&#39;s Magic Beans&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">4.25</span><span style="color:#24292E;">);     </span></span>
<span class="line"><span style="color:#24292E;">        receiptBuilder.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Princess Peas&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">5.1</span><span style="color:#24292E;">);     </span></span>
<span class="line"><span style="color:#24292E;">        receiptBuilder.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(       </span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#032F62;">&quot;Three Bears Porridge&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">14.29</span><span style="color:#24292E;">);     </span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(receiptBuilder.</span><span style="color:#6F42C1;">build</span><span style="color:#24292E;">());   </span></span>
<span class="line"><span style="color:#24292E;">    } </span></span>
<span class="line"><span style="color:#24292E;">} </span></span>
<span class="line"><span style="color:#6A737D;">/* Output: </span></span>
<span class="line"><span style="color:#6A737D;">Item              Qty      Price </span></span>
<span class="line"><span style="color:#6A737D;">----              ---      ----- </span></span>
<span class="line"><span style="color:#6A737D;">Jack&#39;s Magic Be     4       4.25 </span></span>
<span class="line"><span style="color:#6A737D;">Princess Peas       3       5.10 </span></span>
<span class="line"><span style="color:#6A737D;">Three Bears Por     1      14.29 </span></span>
<span class="line"><span style="color:#6A737D;">Tax                         2.80 </span></span>
<span class="line"><span style="color:#6A737D;">                           ----- </span></span>
<span class="line"><span style="color:#6A737D;">Total                      49.39 </span></span>
<span class="line"><span style="color:#6A737D;">*/</span></span></code></pre></div><p>通过传入一个 <code>StringBuilder</code> 对象到 <code>Formatter</code> 的构造器，我们指定了一个容器来构建目标 <code>String</code>。你也可以通过不同的构造器参数，把结果输出到标准输出，甚至是一个文件里。</p><p>正如你所见，通过相当简洁的语法，<code>Formatter </code> 提供了对空格与对齐的强大控制能力。在该程序中，为了恰当地控制间隔，格式化字符串被重复利用了多遍。</p><h3 id="formatter-转换" tabindex="-1"><code>Formatter</code> 转换 <a class="header-anchor" href="#formatter-转换" aria-label="Permalink to &quot;\`Formatter\` 转换&quot;">​</a></h3><p>下面的表格展示了最常用的类型转换：</p><table><thead><tr><th style="text-align:center;">类型</th><th style="text-align:left;">含义</th></tr></thead><tbody><tr><td style="text-align:center;"><code>d</code></td><td style="text-align:left;">整型（十进制）</td></tr><tr><td style="text-align:center;"><code>c</code></td><td style="text-align:left;">Unicode字符</td></tr><tr><td style="text-align:center;"><code>b</code></td><td style="text-align:left;">Boolean值</td></tr><tr><td style="text-align:center;"><code>s</code></td><td style="text-align:left;">String</td></tr><tr><td style="text-align:center;"><code>f</code></td><td style="text-align:left;">浮点数（十进制）</td></tr><tr><td style="text-align:center;"><code>e</code></td><td style="text-align:left;">浮点数（科学计数）</td></tr><tr><td style="text-align:center;"><code>x</code></td><td style="text-align:left;">整型（十六进制）</td></tr><tr><td style="text-align:center;"><code>h</code></td><td style="text-align:left;">散列码（十六进制）</td></tr><tr><td style="text-align:center;"><code>%</code></td><td style="text-align:left;">字面值“%”</td></tr></tbody></table><p>下面的程序演示了这些转换是如何工作的：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// strings/Conversion.java </span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> java.math.</span><span style="color:#79B8FF;">*</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> java.util.</span><span style="color:#79B8FF;">*</span><span style="color:#E1E4E8;">; </span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Conversion</span><span style="color:#E1E4E8;"> {   </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] </span><span style="color:#FFAB70;">args</span><span style="color:#E1E4E8;">) {     </span></span>
<span class="line"><span style="color:#E1E4E8;">        Formatter f </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Formatter</span><span style="color:#E1E4E8;">(System.out); </span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">char</span><span style="color:#E1E4E8;"> u </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;a&#39;</span><span style="color:#E1E4E8;">;     </span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;u = &#39;a&#39;&quot;</span><span style="color:#E1E4E8;">);     </span></span>
<span class="line"><span style="color:#E1E4E8;">        f.</span><span style="color:#B392F0;">format</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;s: %s%n&quot;</span><span style="color:#E1E4E8;">, u);     </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// f.format(&quot;d: %d%n&quot;, u);     </span></span>
<span class="line"><span style="color:#E1E4E8;">        f.</span><span style="color:#B392F0;">format</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;c: %c%n&quot;</span><span style="color:#E1E4E8;">, u);     </span></span>
<span class="line"><span style="color:#E1E4E8;">        f.</span><span style="color:#B392F0;">format</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;b: %b%n&quot;</span><span style="color:#E1E4E8;">, u);     </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// f.format(&quot;f: %f%n&quot;, u);     </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// f.format(&quot;e: %e%n&quot;, u);     </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// f.format(&quot;x: %x%n&quot;, u);     </span></span>
<span class="line"><span style="color:#E1E4E8;">        f.</span><span style="color:#B392F0;">format</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;h: %h%n&quot;</span><span style="color:#E1E4E8;">, u); </span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> v </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">121</span><span style="color:#E1E4E8;">;     </span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;v = 121&quot;</span><span style="color:#E1E4E8;">);    </span></span>
<span class="line"><span style="color:#E1E4E8;">        f.</span><span style="color:#B392F0;">format</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;d: %d%n&quot;</span><span style="color:#E1E4E8;">, v);     </span></span>
<span class="line"><span style="color:#E1E4E8;">        f.</span><span style="color:#B392F0;">format</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;c: %c%n&quot;</span><span style="color:#E1E4E8;">, v);     </span></span>
<span class="line"><span style="color:#E1E4E8;">        f.</span><span style="color:#B392F0;">format</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;b: %b%n&quot;</span><span style="color:#E1E4E8;">, v);     </span></span>
<span class="line"><span style="color:#E1E4E8;">        f.</span><span style="color:#B392F0;">format</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;s: %s%n&quot;</span><span style="color:#E1E4E8;">, v);     </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// f.format(&quot;f: %f%n&quot;, v);     </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// f.format(&quot;e: %e%n&quot;, v);     </span></span>
<span class="line"><span style="color:#E1E4E8;">        f.</span><span style="color:#B392F0;">format</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;x: %x%n&quot;</span><span style="color:#E1E4E8;">, v);     </span></span>
<span class="line"><span style="color:#E1E4E8;">        f.</span><span style="color:#B392F0;">format</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;h: %h%n&quot;</span><span style="color:#E1E4E8;">, v); </span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        BigInteger w </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">BigInteger</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;50000000000000&quot;</span><span style="color:#E1E4E8;">);     </span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(       </span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#9ECBFF;">&quot;w = new BigInteger(</span><span style="color:#79B8FF;">\\&quot;</span><span style="color:#9ECBFF;">50000000000000</span><span style="color:#79B8FF;">\\&quot;</span><span style="color:#9ECBFF;">)&quot;</span><span style="color:#E1E4E8;">);     </span></span>
<span class="line"><span style="color:#E1E4E8;">        f.</span><span style="color:#B392F0;">format</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;d: %d%n&quot;</span><span style="color:#E1E4E8;">, w);     </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// f.format(&quot;c: %c%n&quot;, w);     </span></span>
<span class="line"><span style="color:#E1E4E8;">        f.</span><span style="color:#B392F0;">format</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;b: %b%n&quot;</span><span style="color:#E1E4E8;">, w);     </span></span>
<span class="line"><span style="color:#E1E4E8;">        f.</span><span style="color:#B392F0;">format</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;s: %s%n&quot;</span><span style="color:#E1E4E8;">, w);     </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// f.format(&quot;f: %f%n&quot;, w);     </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// f.format(&quot;e: %e%n&quot;, w);     </span></span>
<span class="line"><span style="color:#E1E4E8;">        f.</span><span style="color:#B392F0;">format</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;x: %x%n&quot;</span><span style="color:#E1E4E8;">, w);     </span></span>
<span class="line"><span style="color:#E1E4E8;">        f.</span><span style="color:#B392F0;">format</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;h: %h%n&quot;</span><span style="color:#E1E4E8;">, w); </span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">double</span><span style="color:#E1E4E8;"> x </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">179.543</span><span style="color:#E1E4E8;">;     </span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;x = 179.543&quot;</span><span style="color:#E1E4E8;">);     </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// f.format(&quot;d: %d%n&quot;, x);     </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// f.format(&quot;c: %c%n&quot;, x);     </span></span>
<span class="line"><span style="color:#E1E4E8;">        f.</span><span style="color:#B392F0;">format</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;b: %b%n&quot;</span><span style="color:#E1E4E8;">, x);     </span></span>
<span class="line"><span style="color:#E1E4E8;">        f.</span><span style="color:#B392F0;">format</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;s: %s%n&quot;</span><span style="color:#E1E4E8;">, x);     </span></span>
<span class="line"><span style="color:#E1E4E8;">        f.</span><span style="color:#B392F0;">format</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;f: %f%n&quot;</span><span style="color:#E1E4E8;">, x);     </span></span>
<span class="line"><span style="color:#E1E4E8;">        f.</span><span style="color:#B392F0;">format</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;e: %e%n&quot;</span><span style="color:#E1E4E8;">, x);     </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// f.format(&quot;x: %x%n&quot;, x);     </span></span>
<span class="line"><span style="color:#E1E4E8;">        f.</span><span style="color:#B392F0;">format</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;h: %h%n&quot;</span><span style="color:#E1E4E8;">, x); </span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        Conversion y </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Conversion</span><span style="color:#E1E4E8;">();     </span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;y = new Conversion()&quot;</span><span style="color:#E1E4E8;">); </span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// f.format(&quot;d: %d%n&quot;, y);     </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// f.format(&quot;c: %c%n&quot;, y);     </span></span>
<span class="line"><span style="color:#E1E4E8;">        f.</span><span style="color:#B392F0;">format</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;b: %b%n&quot;</span><span style="color:#E1E4E8;">, y);     </span></span>
<span class="line"><span style="color:#E1E4E8;">        f.</span><span style="color:#B392F0;">format</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;s: %s%n&quot;</span><span style="color:#E1E4E8;">, y);     </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// f.format(&quot;f: %f%n&quot;, y);     </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// f.format(&quot;e: %e%n&quot;, y);     </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// f.format(&quot;x: %x%n&quot;, y);     </span></span>
<span class="line"><span style="color:#E1E4E8;">        f.</span><span style="color:#B392F0;">format</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;h: %h%n&quot;</span><span style="color:#E1E4E8;">, y); </span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> z </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">;     </span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;z = false&quot;</span><span style="color:#E1E4E8;">);     </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// f.format(&quot;d: %d%n&quot;, z);     </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// f.format(&quot;c: %c%n&quot;, z);     </span></span>
<span class="line"><span style="color:#E1E4E8;">        f.</span><span style="color:#B392F0;">format</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;b: %b%n&quot;</span><span style="color:#E1E4E8;">, z);     </span></span>
<span class="line"><span style="color:#E1E4E8;">        f.</span><span style="color:#B392F0;">format</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;s: %s%n&quot;</span><span style="color:#E1E4E8;">, z);     </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// f.format(&quot;f: %f%n&quot;, z);     </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// f.format(&quot;e: %e%n&quot;, z);     </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// f.format(&quot;x: %x%n&quot;, z);     </span></span>
<span class="line"><span style="color:#E1E4E8;">        f.</span><span style="color:#B392F0;">format</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;h: %h%n&quot;</span><span style="color:#E1E4E8;">, z);   </span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span></span>
<span class="line"><span style="color:#E1E4E8;">} </span></span>
<span class="line"><span style="color:#6A737D;">/* Output: </span></span>
<span class="line"><span style="color:#6A737D;">u = &#39;a&#39; </span></span>
<span class="line"><span style="color:#6A737D;">s: a </span></span>
<span class="line"><span style="color:#6A737D;">c: a </span></span>
<span class="line"><span style="color:#6A737D;">b: true </span></span>
<span class="line"><span style="color:#6A737D;">h: 61 </span></span>
<span class="line"><span style="color:#6A737D;">v = 121 </span></span>
<span class="line"><span style="color:#6A737D;">d: 121 </span></span>
<span class="line"><span style="color:#6A737D;">c: y </span></span>
<span class="line"><span style="color:#6A737D;">b: true </span></span>
<span class="line"><span style="color:#6A737D;">s: 121 </span></span>
<span class="line"><span style="color:#6A737D;">x: 79 </span></span>
<span class="line"><span style="color:#6A737D;">h: 79 </span></span>
<span class="line"><span style="color:#6A737D;">w = new BigInteger(&quot;50000000000000&quot;) </span></span>
<span class="line"><span style="color:#6A737D;">d: 50000000000000 </span></span>
<span class="line"><span style="color:#6A737D;">b: true </span></span>
<span class="line"><span style="color:#6A737D;">s: 50000000000000 </span></span>
<span class="line"><span style="color:#6A737D;">x: 2d79883d2000 </span></span>
<span class="line"><span style="color:#6A737D;">h: 8842a1a7 </span></span>
<span class="line"><span style="color:#6A737D;">x = 179.543 </span></span>
<span class="line"><span style="color:#6A737D;">b: true </span></span>
<span class="line"><span style="color:#6A737D;">s: 179.543 </span></span>
<span class="line"><span style="color:#6A737D;">f: 179.543000 </span></span>
<span class="line"><span style="color:#6A737D;">e: 1.795430e+02 </span></span>
<span class="line"><span style="color:#6A737D;">h: 1ef462c </span></span>
<span class="line"><span style="color:#6A737D;">y = new Conversion() </span></span>
<span class="line"><span style="color:#6A737D;">b: true </span></span>
<span class="line"><span style="color:#6A737D;">s: Conversion@15db9742 </span></span>
<span class="line"><span style="color:#6A737D;">h: 15db9742 </span></span>
<span class="line"><span style="color:#6A737D;">z = false </span></span>
<span class="line"><span style="color:#6A737D;">b: false </span></span>
<span class="line"><span style="color:#6A737D;">s: false</span></span>
<span class="line"><span style="color:#6A737D;">h: 4d5 </span></span>
<span class="line"><span style="color:#6A737D;">*/</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// strings/Conversion.java </span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> java.math.</span><span style="color:#005CC5;">*</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> java.util.</span><span style="color:#005CC5;">*</span><span style="color:#24292E;">; </span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Conversion</span><span style="color:#24292E;"> {   </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) {     </span></span>
<span class="line"><span style="color:#24292E;">        Formatter f </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Formatter</span><span style="color:#24292E;">(System.out); </span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">char</span><span style="color:#24292E;"> u </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;a&#39;</span><span style="color:#24292E;">;     </span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;u = &#39;a&#39;&quot;</span><span style="color:#24292E;">);     </span></span>
<span class="line"><span style="color:#24292E;">        f.</span><span style="color:#6F42C1;">format</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;s: %s%n&quot;</span><span style="color:#24292E;">, u);     </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// f.format(&quot;d: %d%n&quot;, u);     </span></span>
<span class="line"><span style="color:#24292E;">        f.</span><span style="color:#6F42C1;">format</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;c: %c%n&quot;</span><span style="color:#24292E;">, u);     </span></span>
<span class="line"><span style="color:#24292E;">        f.</span><span style="color:#6F42C1;">format</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;b: %b%n&quot;</span><span style="color:#24292E;">, u);     </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// f.format(&quot;f: %f%n&quot;, u);     </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// f.format(&quot;e: %e%n&quot;, u);     </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// f.format(&quot;x: %x%n&quot;, u);     </span></span>
<span class="line"><span style="color:#24292E;">        f.</span><span style="color:#6F42C1;">format</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;h: %h%n&quot;</span><span style="color:#24292E;">, u); </span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> v </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">121</span><span style="color:#24292E;">;     </span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;v = 121&quot;</span><span style="color:#24292E;">);    </span></span>
<span class="line"><span style="color:#24292E;">        f.</span><span style="color:#6F42C1;">format</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;d: %d%n&quot;</span><span style="color:#24292E;">, v);     </span></span>
<span class="line"><span style="color:#24292E;">        f.</span><span style="color:#6F42C1;">format</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;c: %c%n&quot;</span><span style="color:#24292E;">, v);     </span></span>
<span class="line"><span style="color:#24292E;">        f.</span><span style="color:#6F42C1;">format</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;b: %b%n&quot;</span><span style="color:#24292E;">, v);     </span></span>
<span class="line"><span style="color:#24292E;">        f.</span><span style="color:#6F42C1;">format</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;s: %s%n&quot;</span><span style="color:#24292E;">, v);     </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// f.format(&quot;f: %f%n&quot;, v);     </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// f.format(&quot;e: %e%n&quot;, v);     </span></span>
<span class="line"><span style="color:#24292E;">        f.</span><span style="color:#6F42C1;">format</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;x: %x%n&quot;</span><span style="color:#24292E;">, v);     </span></span>
<span class="line"><span style="color:#24292E;">        f.</span><span style="color:#6F42C1;">format</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;h: %h%n&quot;</span><span style="color:#24292E;">, v); </span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        BigInteger w </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">BigInteger</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;50000000000000&quot;</span><span style="color:#24292E;">);     </span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(       </span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#032F62;">&quot;w = new BigInteger(</span><span style="color:#005CC5;">\\&quot;</span><span style="color:#032F62;">50000000000000</span><span style="color:#005CC5;">\\&quot;</span><span style="color:#032F62;">)&quot;</span><span style="color:#24292E;">);     </span></span>
<span class="line"><span style="color:#24292E;">        f.</span><span style="color:#6F42C1;">format</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;d: %d%n&quot;</span><span style="color:#24292E;">, w);     </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// f.format(&quot;c: %c%n&quot;, w);     </span></span>
<span class="line"><span style="color:#24292E;">        f.</span><span style="color:#6F42C1;">format</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;b: %b%n&quot;</span><span style="color:#24292E;">, w);     </span></span>
<span class="line"><span style="color:#24292E;">        f.</span><span style="color:#6F42C1;">format</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;s: %s%n&quot;</span><span style="color:#24292E;">, w);     </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// f.format(&quot;f: %f%n&quot;, w);     </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// f.format(&quot;e: %e%n&quot;, w);     </span></span>
<span class="line"><span style="color:#24292E;">        f.</span><span style="color:#6F42C1;">format</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;x: %x%n&quot;</span><span style="color:#24292E;">, w);     </span></span>
<span class="line"><span style="color:#24292E;">        f.</span><span style="color:#6F42C1;">format</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;h: %h%n&quot;</span><span style="color:#24292E;">, w); </span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">double</span><span style="color:#24292E;"> x </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">179.543</span><span style="color:#24292E;">;     </span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;x = 179.543&quot;</span><span style="color:#24292E;">);     </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// f.format(&quot;d: %d%n&quot;, x);     </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// f.format(&quot;c: %c%n&quot;, x);     </span></span>
<span class="line"><span style="color:#24292E;">        f.</span><span style="color:#6F42C1;">format</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;b: %b%n&quot;</span><span style="color:#24292E;">, x);     </span></span>
<span class="line"><span style="color:#24292E;">        f.</span><span style="color:#6F42C1;">format</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;s: %s%n&quot;</span><span style="color:#24292E;">, x);     </span></span>
<span class="line"><span style="color:#24292E;">        f.</span><span style="color:#6F42C1;">format</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;f: %f%n&quot;</span><span style="color:#24292E;">, x);     </span></span>
<span class="line"><span style="color:#24292E;">        f.</span><span style="color:#6F42C1;">format</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;e: %e%n&quot;</span><span style="color:#24292E;">, x);     </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// f.format(&quot;x: %x%n&quot;, x);     </span></span>
<span class="line"><span style="color:#24292E;">        f.</span><span style="color:#6F42C1;">format</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;h: %h%n&quot;</span><span style="color:#24292E;">, x); </span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        Conversion y </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Conversion</span><span style="color:#24292E;">();     </span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;y = new Conversion()&quot;</span><span style="color:#24292E;">); </span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// f.format(&quot;d: %d%n&quot;, y);     </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// f.format(&quot;c: %c%n&quot;, y);     </span></span>
<span class="line"><span style="color:#24292E;">        f.</span><span style="color:#6F42C1;">format</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;b: %b%n&quot;</span><span style="color:#24292E;">, y);     </span></span>
<span class="line"><span style="color:#24292E;">        f.</span><span style="color:#6F42C1;">format</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;s: %s%n&quot;</span><span style="color:#24292E;">, y);     </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// f.format(&quot;f: %f%n&quot;, y);     </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// f.format(&quot;e: %e%n&quot;, y);     </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// f.format(&quot;x: %x%n&quot;, y);     </span></span>
<span class="line"><span style="color:#24292E;">        f.</span><span style="color:#6F42C1;">format</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;h: %h%n&quot;</span><span style="color:#24292E;">, y); </span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> z </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">;     </span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;z = false&quot;</span><span style="color:#24292E;">);     </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// f.format(&quot;d: %d%n&quot;, z);     </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// f.format(&quot;c: %c%n&quot;, z);     </span></span>
<span class="line"><span style="color:#24292E;">        f.</span><span style="color:#6F42C1;">format</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;b: %b%n&quot;</span><span style="color:#24292E;">, z);     </span></span>
<span class="line"><span style="color:#24292E;">        f.</span><span style="color:#6F42C1;">format</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;s: %s%n&quot;</span><span style="color:#24292E;">, z);     </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// f.format(&quot;f: %f%n&quot;, z);     </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// f.format(&quot;e: %e%n&quot;, z);     </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// f.format(&quot;x: %x%n&quot;, z);     </span></span>
<span class="line"><span style="color:#24292E;">        f.</span><span style="color:#6F42C1;">format</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;h: %h%n&quot;</span><span style="color:#24292E;">, z);   </span></span>
<span class="line"><span style="color:#24292E;">    } </span></span>
<span class="line"><span style="color:#24292E;">} </span></span>
<span class="line"><span style="color:#6A737D;">/* Output: </span></span>
<span class="line"><span style="color:#6A737D;">u = &#39;a&#39; </span></span>
<span class="line"><span style="color:#6A737D;">s: a </span></span>
<span class="line"><span style="color:#6A737D;">c: a </span></span>
<span class="line"><span style="color:#6A737D;">b: true </span></span>
<span class="line"><span style="color:#6A737D;">h: 61 </span></span>
<span class="line"><span style="color:#6A737D;">v = 121 </span></span>
<span class="line"><span style="color:#6A737D;">d: 121 </span></span>
<span class="line"><span style="color:#6A737D;">c: y </span></span>
<span class="line"><span style="color:#6A737D;">b: true </span></span>
<span class="line"><span style="color:#6A737D;">s: 121 </span></span>
<span class="line"><span style="color:#6A737D;">x: 79 </span></span>
<span class="line"><span style="color:#6A737D;">h: 79 </span></span>
<span class="line"><span style="color:#6A737D;">w = new BigInteger(&quot;50000000000000&quot;) </span></span>
<span class="line"><span style="color:#6A737D;">d: 50000000000000 </span></span>
<span class="line"><span style="color:#6A737D;">b: true </span></span>
<span class="line"><span style="color:#6A737D;">s: 50000000000000 </span></span>
<span class="line"><span style="color:#6A737D;">x: 2d79883d2000 </span></span>
<span class="line"><span style="color:#6A737D;">h: 8842a1a7 </span></span>
<span class="line"><span style="color:#6A737D;">x = 179.543 </span></span>
<span class="line"><span style="color:#6A737D;">b: true </span></span>
<span class="line"><span style="color:#6A737D;">s: 179.543 </span></span>
<span class="line"><span style="color:#6A737D;">f: 179.543000 </span></span>
<span class="line"><span style="color:#6A737D;">e: 1.795430e+02 </span></span>
<span class="line"><span style="color:#6A737D;">h: 1ef462c </span></span>
<span class="line"><span style="color:#6A737D;">y = new Conversion() </span></span>
<span class="line"><span style="color:#6A737D;">b: true </span></span>
<span class="line"><span style="color:#6A737D;">s: Conversion@15db9742 </span></span>
<span class="line"><span style="color:#6A737D;">h: 15db9742 </span></span>
<span class="line"><span style="color:#6A737D;">z = false </span></span>
<span class="line"><span style="color:#6A737D;">b: false </span></span>
<span class="line"><span style="color:#6A737D;">s: false</span></span>
<span class="line"><span style="color:#6A737D;">h: 4d5 </span></span>
<span class="line"><span style="color:#6A737D;">*/</span></span></code></pre></div><p>被注释的代码表示，针对相应类型的变量，这些转换是无效的。如果执行这些转换，则会触发异常。</p><p>注意，程序中的每个变量都用到了 <code>b</code> 转换。虽然它对各种类型都是合法的，但其行为却不一定与你想象的一致。对于 <code>boolean</code> 基本类型或 <code>Boolean</code> 对象，其转换结果是对应的 <code>true</code> 或 <code>false</code>。但是，对其他类型的参数，只要该参数不为 <code>null</code>，其转换结果永远都是 <code>true</code>。即使是数字 0，转换结果依然为 <code>true</code>，而这在其他语言中（包括C），往往转换为 <code>false</code>。所以，将 <code>b</code> 应用于非布尔类型的对象时请格外小心。</p><p>还有许多不常用的类型转换与格式修饰符选项，你可以在 JDK 文档中的 <code>Formatter</code> 类部分找到它们。</p><h3 id="string-format" tabindex="-1"><code>String.format()</code> <a class="header-anchor" href="#string-format" aria-label="Permalink to &quot;\`String.format()\`&quot;">​</a></h3><p>Java SE5 也参考了 C 中的 <code>sprintf()</code> 方法，以生成格式化的 <code>String</code> 对象。<code>String.format()</code> 是一个 <code>static</code> 方法，它接受与 <code>Formatter.format()</code> 方法一样的参数，但返回一个 <code>String</code> 对象。当你只需使用一次 <code>format()</code> 方法的时候，<code>String.format()</code> 用起来很方便。例如：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// strings/DatabaseException.java </span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">DatabaseException</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Exception</span><span style="color:#E1E4E8;"> {   </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">DatabaseException</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">transactionID</span><span style="color:#E1E4E8;">,     </span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">queryID</span><span style="color:#E1E4E8;">, String </span><span style="color:#FFAB70;">message</span><span style="color:#E1E4E8;">) {     </span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">super</span><span style="color:#E1E4E8;">(String.</span><span style="color:#B392F0;">format</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;(t%d, q%d) %s&quot;</span><span style="color:#E1E4E8;">, transactionID,         </span></span>
<span class="line"><span style="color:#E1E4E8;">        queryID, message));   </span></span>
<span class="line"><span style="color:#E1E4E8;">    }   </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] </span><span style="color:#FFAB70;">args</span><span style="color:#E1E4E8;">) {     </span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> {       </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">DatabaseException</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">7</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;Write failed&quot;</span><span style="color:#E1E4E8;">);     </span></span>
<span class="line"><span style="color:#E1E4E8;">      } </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;">(Exception </span><span style="color:#FFAB70;">e</span><span style="color:#E1E4E8;">) {       </span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(e);     </span></span>
<span class="line"><span style="color:#E1E4E8;">      }   </span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span></span>
<span class="line"><span style="color:#E1E4E8;">} </span></span>
<span class="line"><span style="color:#6A737D;">/* </span></span>
<span class="line"><span style="color:#6A737D;">Output: </span></span>
<span class="line"><span style="color:#6A737D;">DatabaseException: (t3, q7) Write failed </span></span>
<span class="line"><span style="color:#6A737D;">*/</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// strings/DatabaseException.java </span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">DatabaseException</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Exception</span><span style="color:#24292E;"> {   </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">DatabaseException</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">transactionID</span><span style="color:#24292E;">,     </span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">queryID</span><span style="color:#24292E;">, String </span><span style="color:#E36209;">message</span><span style="color:#24292E;">) {     </span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#005CC5;">super</span><span style="color:#24292E;">(String.</span><span style="color:#6F42C1;">format</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;(t%d, q%d) %s&quot;</span><span style="color:#24292E;">, transactionID,         </span></span>
<span class="line"><span style="color:#24292E;">        queryID, message));   </span></span>
<span class="line"><span style="color:#24292E;">    }   </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) {     </span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {       </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">DatabaseException</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">7</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;Write failed&quot;</span><span style="color:#24292E;">);     </span></span>
<span class="line"><span style="color:#24292E;">      } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;">(Exception </span><span style="color:#E36209;">e</span><span style="color:#24292E;">) {       </span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(e);     </span></span>
<span class="line"><span style="color:#24292E;">      }   </span></span>
<span class="line"><span style="color:#24292E;">    } </span></span>
<span class="line"><span style="color:#24292E;">} </span></span>
<span class="line"><span style="color:#6A737D;">/* </span></span>
<span class="line"><span style="color:#6A737D;">Output: </span></span>
<span class="line"><span style="color:#6A737D;">DatabaseException: (t3, q7) Write failed </span></span>
<span class="line"><span style="color:#6A737D;">*/</span></span></code></pre></div><p>其实在 <code>String.format()</code> 内部，它也是创建了一个 <code>Formatter</code> 对象，然后将你传入的参数转给 <code>Formatter</code>。不过，与其自己做这些事情，不如使用便捷的 <code>String.format()</code> 方法，何况这样的代码更清晰易读。</p><h4 id="一个十六进制转储-dump-工具" tabindex="-1">一个十六进制转储（dump）工具 <a class="header-anchor" href="#一个十六进制转储-dump-工具" aria-label="Permalink to &quot;一个十六进制转储（dump）工具&quot;">​</a></h4><p>在第二个例子中，我们把二进制文件转换为十六进制格式。下面的小工具使用了 <code>String.format()</code> 方法，以可读的十六进制格式将字节数组打印出来：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// strings/Hex.java </span></span>
<span class="line"><span style="color:#6A737D;">// {java onjava.Hex} </span></span>
<span class="line"><span style="color:#F97583;">package</span><span style="color:#E1E4E8;"> onjava;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> java.io.</span><span style="color:#79B8FF;">*</span><span style="color:#E1E4E8;">; </span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> java.nio.file.</span><span style="color:#79B8FF;">*</span><span style="color:#E1E4E8;">; </span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Hex</span><span style="color:#E1E4E8;"> {   </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> String </span><span style="color:#B392F0;">format</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">byte</span><span style="color:#E1E4E8;">[] </span><span style="color:#FFAB70;">data</span><span style="color:#E1E4E8;">) {     </span></span>
<span class="line"><span style="color:#E1E4E8;">        StringBuilder result </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">StringBuilder</span><span style="color:#E1E4E8;">();     </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> n </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;     </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">byte</span><span style="color:#E1E4E8;"> b </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> data) {       </span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(n </span><span style="color:#F97583;">%</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">16</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">)         </span></span>
<span class="line"><span style="color:#E1E4E8;">                result.</span><span style="color:#B392F0;">append</span><span style="color:#E1E4E8;">(String.</span><span style="color:#B392F0;">format</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;%05X: &quot;</span><span style="color:#E1E4E8;">, n));       </span></span>
<span class="line"><span style="color:#E1E4E8;">            result.</span><span style="color:#B392F0;">append</span><span style="color:#E1E4E8;">(String.</span><span style="color:#B392F0;">format</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;%02X &quot;</span><span style="color:#E1E4E8;">, b));       </span></span>
<span class="line"><span style="color:#E1E4E8;">            n</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">;       </span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(n </span><span style="color:#F97583;">%</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">16</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">) result.</span><span style="color:#B392F0;">append</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">);     </span></span>
<span class="line"><span style="color:#E1E4E8;">        }     </span></span>
<span class="line"><span style="color:#E1E4E8;">        result.</span><span style="color:#B392F0;">append</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">);     </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> result.</span><span style="color:#B392F0;">toString</span><span style="color:#E1E4E8;">();   </span></span>
<span class="line"><span style="color:#E1E4E8;">    }   </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] </span><span style="color:#FFAB70;">args</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> Exception {  </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(args.length </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">)       </span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// Test by displaying this class file:       </span></span>
<span class="line"><span style="color:#E1E4E8;">            System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">format</span><span style="color:#E1E4E8;">(         </span></span>
<span class="line"><span style="color:#E1E4E8;">                Files.</span><span style="color:#B392F0;">readAllBytes</span><span style="color:#E1E4E8;">(Paths.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(           </span></span>
<span class="line"><span style="color:#E1E4E8;">                  </span><span style="color:#9ECBFF;">&quot;build/classes/main/onjava/Hex.class&quot;</span><span style="color:#E1E4E8;">))));     </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;">       </span></span>
<span class="line"><span style="color:#E1E4E8;">            System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">format</span><span style="color:#E1E4E8;">(         </span></span>
<span class="line"><span style="color:#E1E4E8;">                Files.</span><span style="color:#B392F0;">readAllBytes</span><span style="color:#E1E4E8;">(Paths.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(args[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">]))));   </span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span></span>
<span class="line"><span style="color:#E1E4E8;">} </span></span>
<span class="line"><span style="color:#6A737D;">/* Output: (First 6 Lines) </span></span>
<span class="line"><span style="color:#6A737D;">00000: CA FE BA BE 00 00 00 34 00 61 0A 00 05 00 31 07 </span></span>
<span class="line"><span style="color:#6A737D;">00010: 00 32 0A 00 02 00 31 08 00 33 07 00 34 0A 00 35 </span></span>
<span class="line"><span style="color:#6A737D;">00020: 00 36 0A 00 0F 00 37 0A 00 02 00 38 08 00 39 0A </span></span>
<span class="line"><span style="color:#6A737D;">00030: 00 3A 00 3B 08 00 3C 0A 00 02 00 3D 09 00 3E 00 </span></span>
<span class="line"><span style="color:#6A737D;">00040: 3F 08 00 40 07 00 41 0A 00 42 00 43 0A 00 44 00 </span></span>
<span class="line"><span style="color:#6A737D;">00050: 45 0A 00 14 00 46 0A 00 47 00 48 07 00 49 01 00</span></span>
<span class="line"><span style="color:#6A737D;">                  ... </span></span>
<span class="line"><span style="color:#6A737D;">*/</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// strings/Hex.java </span></span>
<span class="line"><span style="color:#6A737D;">// {java onjava.Hex} </span></span>
<span class="line"><span style="color:#D73A49;">package</span><span style="color:#24292E;"> onjava;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> java.io.</span><span style="color:#005CC5;">*</span><span style="color:#24292E;">; </span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> java.nio.file.</span><span style="color:#005CC5;">*</span><span style="color:#24292E;">; </span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Hex</span><span style="color:#24292E;"> {   </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> String </span><span style="color:#6F42C1;">format</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">byte</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">data</span><span style="color:#24292E;">) {     </span></span>
<span class="line"><span style="color:#24292E;">        StringBuilder result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">StringBuilder</span><span style="color:#24292E;">();     </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> n </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;     </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">for</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">byte</span><span style="color:#24292E;"> b </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> data) {       </span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(n </span><span style="color:#D73A49;">%</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">16</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">)         </span></span>
<span class="line"><span style="color:#24292E;">                result.</span><span style="color:#6F42C1;">append</span><span style="color:#24292E;">(String.</span><span style="color:#6F42C1;">format</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;%05X: &quot;</span><span style="color:#24292E;">, n));       </span></span>
<span class="line"><span style="color:#24292E;">            result.</span><span style="color:#6F42C1;">append</span><span style="color:#24292E;">(String.</span><span style="color:#6F42C1;">format</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;%02X &quot;</span><span style="color:#24292E;">, b));       </span></span>
<span class="line"><span style="color:#24292E;">            n</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">;       </span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(n </span><span style="color:#D73A49;">%</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">16</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">) result.</span><span style="color:#6F42C1;">append</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">);     </span></span>
<span class="line"><span style="color:#24292E;">        }     </span></span>
<span class="line"><span style="color:#24292E;">        result.</span><span style="color:#6F42C1;">append</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">);     </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> result.</span><span style="color:#6F42C1;">toString</span><span style="color:#24292E;">();   </span></span>
<span class="line"><span style="color:#24292E;">    }   </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> Exception {  </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(args.length </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">)       </span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// Test by displaying this class file:       </span></span>
<span class="line"><span style="color:#24292E;">            System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">format</span><span style="color:#24292E;">(         </span></span>
<span class="line"><span style="color:#24292E;">                Files.</span><span style="color:#6F42C1;">readAllBytes</span><span style="color:#24292E;">(Paths.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(           </span></span>
<span class="line"><span style="color:#24292E;">                  </span><span style="color:#032F62;">&quot;build/classes/main/onjava/Hex.class&quot;</span><span style="color:#24292E;">))));     </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">else</span><span style="color:#24292E;">       </span></span>
<span class="line"><span style="color:#24292E;">            System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">format</span><span style="color:#24292E;">(         </span></span>
<span class="line"><span style="color:#24292E;">                Files.</span><span style="color:#6F42C1;">readAllBytes</span><span style="color:#24292E;">(Paths.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(args[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">]))));   </span></span>
<span class="line"><span style="color:#24292E;">    } </span></span>
<span class="line"><span style="color:#24292E;">} </span></span>
<span class="line"><span style="color:#6A737D;">/* Output: (First 6 Lines) </span></span>
<span class="line"><span style="color:#6A737D;">00000: CA FE BA BE 00 00 00 34 00 61 0A 00 05 00 31 07 </span></span>
<span class="line"><span style="color:#6A737D;">00010: 00 32 0A 00 02 00 31 08 00 33 07 00 34 0A 00 35 </span></span>
<span class="line"><span style="color:#6A737D;">00020: 00 36 0A 00 0F 00 37 0A 00 02 00 38 08 00 39 0A </span></span>
<span class="line"><span style="color:#6A737D;">00030: 00 3A 00 3B 08 00 3C 0A 00 02 00 3D 09 00 3E 00 </span></span>
<span class="line"><span style="color:#6A737D;">00040: 3F 08 00 40 07 00 41 0A 00 42 00 43 0A 00 44 00 </span></span>
<span class="line"><span style="color:#6A737D;">00050: 45 0A 00 14 00 46 0A 00 47 00 48 07 00 49 01 00</span></span>
<span class="line"><span style="color:#6A737D;">                  ... </span></span>
<span class="line"><span style="color:#6A737D;">*/</span></span></code></pre></div><p>为了打开及读入二进制文件，我们用到了另一个工具 <code>Files.readAllBytes()</code>，这已经在 <a href="./17-Files.html">Files章节</a> 介绍过了。这里的 <code>readAllBytes()</code> 方法将整个文件以 <code>byte</code> 数组的形式返回。</p><h2 id="正则表达式" tabindex="-1">正则表达式 <a class="header-anchor" href="#正则表达式" aria-label="Permalink to &quot;正则表达式&quot;">​</a></h2><p>很久之前，<em>正则表达式</em>就已经整合到标准 Unix 工具集之中，例如 sed、awk 和程序语言之中了，如 Python 和Perl（有些人认为正是正则表达式促成了 Perl 的成功）。而在 Java 中，字符串操作还主要集中于<code>String</code>、<code>StringBuffer</code> 和 <code>StringTokenizer</code> 类。与正则表达式相比较，它们只能提供相当简单的功能。</p><p>正则表达式是一种强大而灵活的文本处理工具。使用正则表达式，我们能够以编程的方式，构造复杂的文本模式，并对输入 <code>String</code> 进行搜索。一旦找到了匹配这些模式的部分，你就能随心所欲地对它们进行处理。初学正则表达式时，其语法是一个难点，但它确实是一种简洁、动态的语言。正则表达式提供了一种完全通用的方式，能够解决各种 <code>String</code> 处理相关的问题：匹配、选择、编辑以及验证。</p><h3 id="基础" tabindex="-1">基础 <a class="header-anchor" href="#基础" aria-label="Permalink to &quot;基础&quot;">​</a></h3><p>一般来说，正则表达式就是以某种方式来描述字符串，因此你可以说：“如果一个字符串含有这些东西，那么它就是我正在找的东西。”例如，要找一个数字，它可能有一个负号在最前面，那你就写一个负号加上一个问号，就像这样：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">-?</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">-?</span></span></code></pre></div><p>要描述一个整数，你可以说它有一位或多位阿拉伯数字。在正则表达式中，用 <code>\\d</code> 表示一位数字。如果在其他语言中使用过正则表达式，那你可能就能发现 Java 对反斜线 \\ 的不同处理方式。在其他语言中，<code>\\\\</code> 表示“我想要在正则表达式中插入一个普通的（字面上的）反斜线，请不要给它任何特殊的意义。”而在Java中，<code>\\\\</code> 的意思是“我要插入一个正则表达式的反斜线，所以其后的字符具有特殊的意义。”例如，如果你想表示一位数字，那么正则表达式应该是 <code>\\\\d</code>。如果你想插入一个普通的反斜线，应该这样写 <code>\\\\\\</code>。不过换行符和制表符之类的东西只需要使用单反斜线：<code>\\n\\t</code>。 <a href="./Java并非在一开始就支持正则表达式，因此这个令人费解的语法是硬塞进来的。.html">^2</a></p><p>要表示“一个或多个之前的表达式”，应该使用 <code>+</code>。所以，如果要表示“可能有一个负号，后面跟着一位或多位数字”，可以这样：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">-?</span><span style="color:#E1E4E8;">\\\\d</span><span style="color:#F97583;">+</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">-?</span><span style="color:#24292E;">\\\\d</span><span style="color:#D73A49;">+</span></span></code></pre></div><p>应用正则表达式最简单的途径，就是利用 <code>String</code> 类内建的功能。例如，你可以检查一个 <code>String</code> 是否匹配如上所述的正则表达式：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// strings/IntegerMatch.java </span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">IntegerMatch</span><span style="color:#E1E4E8;"> {  </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] </span><span style="color:#FFAB70;">args</span><span style="color:#E1E4E8;">) {     </span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;-1234&quot;</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">matches</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;-?</span><span style="color:#79B8FF;">\\\\</span><span style="color:#9ECBFF;">d+&quot;</span><span style="color:#E1E4E8;">));    </span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;5678&quot;</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">matches</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;-?</span><span style="color:#79B8FF;">\\\\</span><span style="color:#9ECBFF;">d+&quot;</span><span style="color:#E1E4E8;">));     </span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;+911&quot;</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">matches</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;-?</span><span style="color:#79B8FF;">\\\\</span><span style="color:#9ECBFF;">d+&quot;</span><span style="color:#E1E4E8;">));     </span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;+911&quot;</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">matches</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;(-|</span><span style="color:#79B8FF;">\\\\</span><span style="color:#9ECBFF;">+)?</span><span style="color:#79B8FF;">\\\\</span><span style="color:#9ECBFF;">d+&quot;</span><span style="color:#E1E4E8;">));   </span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#6A737D;">/* Output: </span></span>
<span class="line"><span style="color:#6A737D;">true </span></span>
<span class="line"><span style="color:#6A737D;">true </span></span>
<span class="line"><span style="color:#6A737D;">false </span></span>
<span class="line"><span style="color:#6A737D;">true </span></span>
<span class="line"><span style="color:#6A737D;">*/</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// strings/IntegerMatch.java </span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">IntegerMatch</span><span style="color:#24292E;"> {  </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) {     </span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;-1234&quot;</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">matches</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;-?</span><span style="color:#005CC5;">\\\\</span><span style="color:#032F62;">d+&quot;</span><span style="color:#24292E;">));    </span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;5678&quot;</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">matches</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;-?</span><span style="color:#005CC5;">\\\\</span><span style="color:#032F62;">d+&quot;</span><span style="color:#24292E;">));     </span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;+911&quot;</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">matches</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;-?</span><span style="color:#005CC5;">\\\\</span><span style="color:#032F62;">d+&quot;</span><span style="color:#24292E;">));     </span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;+911&quot;</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">matches</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;(-|</span><span style="color:#005CC5;">\\\\</span><span style="color:#032F62;">+)?</span><span style="color:#005CC5;">\\\\</span><span style="color:#032F62;">d+&quot;</span><span style="color:#24292E;">));   </span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6A737D;">/* Output: </span></span>
<span class="line"><span style="color:#6A737D;">true </span></span>
<span class="line"><span style="color:#6A737D;">true </span></span>
<span class="line"><span style="color:#6A737D;">false </span></span>
<span class="line"><span style="color:#6A737D;">true </span></span>
<span class="line"><span style="color:#6A737D;">*/</span></span></code></pre></div><p>前两个字符串都满足对应的正则表达式，匹配成功。第三个字符串以 <code>+</code> 开头，这也是一个合法的符号，但与对应的正则表达式却不匹配。因此，我们的正则表达式应该描述为：“可能以一个加号或减号开头”。在正则表达式中，用括号将表达式进行分组，用竖线 <code>|</code> 表示或操作。也就是：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">-|</span><span style="color:#E1E4E8;">\\\\</span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">?</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">(</span><span style="color:#D73A49;">-|</span><span style="color:#24292E;">\\\\</span><span style="color:#D73A49;">+</span><span style="color:#24292E;">)</span><span style="color:#D73A49;">?</span></span></code></pre></div><p>这个正则表达式表示字符串的起始字符可能是一个 <code>-</code> 或 <code>+</code>，或者二者都没有（因为后面跟着 <code>?</code> 修饰符）。因为字符 <code>+</code> 在正则表达式中有特殊的意义，所以必须使用 <code>\\\\</code> 将其转义，使之成为表达式中的一个普通字符。</p><p><code>String</code>类还自带了一个非常有用的正则表达式工具——<code>split()</code> 方法，其功能是“将字符串从正则表达式匹配的地方切开。”</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// strings/Splitting.java import java.util.*; </span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Splitting</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> String knights </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">   </span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#9ECBFF;">&quot;Then, when you have found the shrubbery, &quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#9ECBFF;">&quot;you must cut down the mightiest tree in the &quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#9ECBFF;">&quot;forest...with... a herring!&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">split</span><span style="color:#E1E4E8;">(String </span><span style="color:#FFAB70;">regex</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">          Arrays.</span><span style="color:#B392F0;">toString</span><span style="color:#E1E4E8;">(knights.</span><span style="color:#B392F0;">split</span><span style="color:#E1E4E8;">(regex)));</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] </span><span style="color:#FFAB70;">args</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">split</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot; &quot;</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// Doesn&#39;t have to contain regex chars</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">split</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#79B8FF;">\\\\</span><span style="color:#9ECBFF;">W+&quot;</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// Non-word characters</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">split</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;n</span><span style="color:#79B8FF;">\\\\</span><span style="color:#9ECBFF;">W+&quot;</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// &#39;n&#39; followed by non-words</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#6A737D;">/* Output:</span></span>
<span class="line"><span style="color:#6A737D;">[Then,, when, you, have, found, the, shrubbery,, you,</span></span>
<span class="line"><span style="color:#6A737D;">must, cut, down, the, mightiest, tree, in, the,</span></span>
<span class="line"><span style="color:#6A737D;">forest...with..., a, herring!]</span></span>
<span class="line"><span style="color:#6A737D;">[Then, when, you, have, found, the, shrubbery, you,</span></span>
<span class="line"><span style="color:#6A737D;">must, cut, down, the, mightiest, tree, in, the, forest,</span></span>
<span class="line"><span style="color:#6A737D;">with, a, herring]</span></span>
<span class="line"><span style="color:#6A737D;">[The, whe, you have found the shrubbery, you must cut</span></span>
<span class="line"><span style="color:#6A737D;">dow, the mightiest tree i, the forest...with... a</span></span>
<span class="line"><span style="color:#6A737D;">herring!]</span></span>
<span class="line"><span style="color:#6A737D;">*/</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// strings/Splitting.java import java.util.*; </span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Splitting</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> String knights </span><span style="color:#D73A49;">=</span><span style="color:#24292E;">   </span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#032F62;">&quot;Then, when you have found the shrubbery, &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#032F62;">&quot;you must cut down the mightiest tree in the &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#032F62;">&quot;forest...with... a herring!&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">split</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">regex</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">          Arrays.</span><span style="color:#6F42C1;">toString</span><span style="color:#24292E;">(knights.</span><span style="color:#6F42C1;">split</span><span style="color:#24292E;">(regex)));</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">split</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot; &quot;</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// Doesn&#39;t have to contain regex chars</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">split</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;</span><span style="color:#005CC5;">\\\\</span><span style="color:#032F62;">W+&quot;</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// Non-word characters</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">split</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;n</span><span style="color:#005CC5;">\\\\</span><span style="color:#032F62;">W+&quot;</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// &#39;n&#39; followed by non-words</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6A737D;">/* Output:</span></span>
<span class="line"><span style="color:#6A737D;">[Then,, when, you, have, found, the, shrubbery,, you,</span></span>
<span class="line"><span style="color:#6A737D;">must, cut, down, the, mightiest, tree, in, the,</span></span>
<span class="line"><span style="color:#6A737D;">forest...with..., a, herring!]</span></span>
<span class="line"><span style="color:#6A737D;">[Then, when, you, have, found, the, shrubbery, you,</span></span>
<span class="line"><span style="color:#6A737D;">must, cut, down, the, mightiest, tree, in, the, forest,</span></span>
<span class="line"><span style="color:#6A737D;">with, a, herring]</span></span>
<span class="line"><span style="color:#6A737D;">[The, whe, you have found the shrubbery, you must cut</span></span>
<span class="line"><span style="color:#6A737D;">dow, the mightiest tree i, the forest...with... a</span></span>
<span class="line"><span style="color:#6A737D;">herring!]</span></span>
<span class="line"><span style="color:#6A737D;">*/</span></span></code></pre></div><p>首先看第一个语句，注意这里用的是普通的字符作为正则表达式，其中并不包含任何特殊字符。因此第一个 <code>split()</code> 只是按空格来划分字符串。</p><p>第二个和第三个 <code>split()</code> 都用到了 <code>\\\\W</code>，它的意思是一个非单词字符（如果 W 小写，<code>\\\\w</code>，则表示一个单词字符）。通过第二个例子可以看到，它将标点字符删除了。第三个 <code>split()</code> 表示“字母 <code>n</code> 后面跟着一个或多个非单词字符。”可以看到，在原始字符串中，与正则表达式匹配的部分，在最终结果中都不存在了。</p><p><code>String.split()</code> 还有一个重载的版本，它允许你限制字符串分割的次数。</p><p>用正则表达式进行替换操作时，你可以只替换第一处匹配，也可以替换所有的匹配：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// strings/Replacing.java </span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Replacing</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> String s </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Splitting.knights;   </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] </span><span style="color:#FFAB70;">args</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">          s.</span><span style="color:#B392F0;">replaceFirst</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;f</span><span style="color:#79B8FF;">\\\\</span><span style="color:#9ECBFF;">w+&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;located&quot;</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(       </span></span>
<span class="line"><span style="color:#E1E4E8;">          s.</span><span style="color:#B392F0;">replaceAll</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;shrubbery|tree|herring&quot;</span><span style="color:#E1E4E8;">,</span><span style="color:#9ECBFF;">&quot;banana&quot;</span><span style="color:#E1E4E8;">));   </span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#6A737D;">/* Output: </span></span>
<span class="line"><span style="color:#6A737D;">Then, when you have located the shrubbery, you must cut </span></span>
<span class="line"><span style="color:#6A737D;">down the mightiest tree in the forest...with... a </span></span>
<span class="line"><span style="color:#6A737D;">herring! </span></span>
<span class="line"><span style="color:#6A737D;">Then, when you have found the banana, you must cut down</span></span>
<span class="line"><span style="color:#6A737D;">the mightiest banana in the forest...with... a banana! </span></span>
<span class="line"><span style="color:#6A737D;">*/</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// strings/Replacing.java </span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Replacing</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> String s </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Splitting.knights;   </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">          s.</span><span style="color:#6F42C1;">replaceFirst</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;f</span><span style="color:#005CC5;">\\\\</span><span style="color:#032F62;">w+&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;located&quot;</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(       </span></span>
<span class="line"><span style="color:#24292E;">          s.</span><span style="color:#6F42C1;">replaceAll</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;shrubbery|tree|herring&quot;</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&quot;banana&quot;</span><span style="color:#24292E;">));   </span></span>
<span class="line"><span style="color:#24292E;">    } </span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6A737D;">/* Output: </span></span>
<span class="line"><span style="color:#6A737D;">Then, when you have located the shrubbery, you must cut </span></span>
<span class="line"><span style="color:#6A737D;">down the mightiest tree in the forest...with... a </span></span>
<span class="line"><span style="color:#6A737D;">herring! </span></span>
<span class="line"><span style="color:#6A737D;">Then, when you have found the banana, you must cut down</span></span>
<span class="line"><span style="color:#6A737D;">the mightiest banana in the forest...with... a banana! </span></span>
<span class="line"><span style="color:#6A737D;">*/</span></span></code></pre></div><p>第一个表达式要匹配的是，以字母 <code>f</code> 开头，后面跟一个或多个字母（注意这里的 <code>w</code> 是小写的）。并且只替换掉第一个匹配的部分，所以 “found” 被替换成 “located”。</p><p>第二个表达式要匹配的是三个单词中的任意一个，因为它们以竖线分割表示“或”，并且替换所有匹配的部分。</p><p>稍后你会看到，<code>String</code> 之外的正则表达式还有更强大的替换工具，例如，可以通过方法调用执行替换。而且，如果正则表达式不是只使用一次的话，非 <code>String</code> 对象的正则表达式明显具备更佳的性能。</p><h3 id="创建正则表达式" tabindex="-1">创建正则表达式 <a class="header-anchor" href="#创建正则表达式" aria-label="Permalink to &quot;创建正则表达式&quot;">​</a></h3><p>我们首先从正则表达式可能存在的构造集中选取一个很有用的子集，以此开始学习正则表达式。正则表达式的完整构造子列表，请参考JDK文档 <code>java.util.regex</code> 包中的 <code>Pattern</code>类。</p><table><thead><tr><th style="text-align:left;">表达式</th><th style="text-align:left;">含义</th></tr></thead><tbody><tr><td style="text-align:left;"><code>B</code></td><td style="text-align:left;">指定字符<code>B</code></td></tr><tr><td style="text-align:left;"><code>\\xhh</code></td><td style="text-align:left;">十六进制值为<code>0xhh</code>的字符</td></tr><tr><td style="text-align:left;"><code>\\uhhhh</code></td><td style="text-align:left;">十六进制表现为<code>0xhhhh</code>的Unicode字符</td></tr><tr><td style="text-align:left;"><code>\\t</code></td><td style="text-align:left;">制表符Tab</td></tr><tr><td style="text-align:left;"><code>\\n</code></td><td style="text-align:left;">换行符</td></tr><tr><td style="text-align:left;"><code>\\r</code></td><td style="text-align:left;">回车</td></tr><tr><td style="text-align:left;"><code>\\f</code></td><td style="text-align:left;">换页</td></tr><tr><td style="text-align:left;"><code>\\e</code></td><td style="text-align:left;">转义（Escape）</td></tr></tbody></table><p>当你学会了使用字符类（character classes）之后，正则表达式的威力才能真正显现出来。以下是一些创建字符类的典型方式，以及一些预定义的类：</p><table><thead><tr><th style="text-align:left;">表达式</th><th style="text-align:left;">含义</th></tr></thead><tbody><tr><td style="text-align:left;"><code>.</code></td><td style="text-align:left;">任意字符</td></tr><tr><td style="text-align:left;"><code>[abc]</code></td><td style="text-align:left;">包含<code>a</code>、<code>b</code>或<code>c</code>的任何字符（和\`a</td></tr><tr><td style="text-align:left;"><code>[^abc]</code></td><td style="text-align:left;">除<code>a</code>、<code>b</code>和<code>c</code>之外的任何字符（否定）</td></tr><tr><td style="text-align:left;"><code>[a-zA-Z]</code></td><td style="text-align:left;">从<code>a</code>到<code>z</code>或从<code>A</code>到<code>Z</code>的任何字符（范围）</td></tr><tr><td style="text-align:left;"><code>[abc[hij]]</code></td><td style="text-align:left;"><code>a</code>、<code>b</code>、<code>c</code>、<code>h</code>、<code>i</code>、<code>j</code>中的任意字符（与\`a</td></tr><tr><td style="text-align:left;"><code>[a-z&amp;&amp;[hij]]</code></td><td style="text-align:left;">任意<code>h</code>、<code>i</code>或<code>j</code>（交）</td></tr><tr><td style="text-align:left;"><code>\\s</code></td><td style="text-align:left;">空白符（空格、tab、换行、换页、回车）</td></tr><tr><td style="text-align:left;"><code>\\S</code></td><td style="text-align:left;">非空白符（<code>[^\\s]</code>）</td></tr><tr><td style="text-align:left;"><code>\\d</code></td><td style="text-align:left;">数字（<code>[0-9]</code>）</td></tr><tr><td style="text-align:left;"><code>\\D</code></td><td style="text-align:left;">非数字（<code>[^0-9]</code>）</td></tr><tr><td style="text-align:left;"><code>\\w</code></td><td style="text-align:left;">词字符（<code>[a-zA-Z_0-9]</code>）</td></tr><tr><td style="text-align:left;"><code>\\W</code></td><td style="text-align:left;">非词字符（<code>[^\\w]</code>）</td></tr></tbody></table><p>这里只列出了部分常用的表达式，你应该将JDK文档中 <code>java.util.regex.Pattern</code> 那一页加入浏览器书签中，以便在需要的时候方便查询。</p><table><thead><tr><th style="text-align:center;">逻辑操作符</th><th style="text-align:left;">含义</th></tr></thead><tbody><tr><td style="text-align:center;"><code>XY</code></td><td style="text-align:left;"><code>Y</code>跟在<code>X</code>后面</td></tr><tr><td style="text-align:center;">\`X</td><td style="text-align:left;">Y\`</td></tr><tr><td style="text-align:center;"><code>(X)</code></td><td style="text-align:left;">捕获组（capturing group）。可以在表达式中用<code>\\i</code>引用第i个捕获组</td></tr></tbody></table><p>下面是不同的边界匹配符：</p><table><thead><tr><th style="text-align:center;">边界匹配符</th><th style="text-align:left;">含义</th></tr></thead><tbody><tr><td style="text-align:center;"><code>^</code></td><td style="text-align:left;">一行的开始</td></tr><tr><td style="text-align:center;"><code>$</code></td><td style="text-align:left;">一行的结束</td></tr><tr><td style="text-align:center;"><code>\\b</code></td><td style="text-align:left;">词的边界</td></tr><tr><td style="text-align:center;"><code>\\B</code></td><td style="text-align:left;">非词的边界</td></tr><tr><td style="text-align:center;"><code>\\G</code></td><td style="text-align:left;">前一个匹配的结束</td></tr></tbody></table><p>作为演示，下面的每一个正则表达式都能成功匹配字符序列“Rudolph”：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// strings/Rudolph.java </span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Rudolph</span><span style="color:#E1E4E8;"> {   </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] </span><span style="color:#FFAB70;">args</span><span style="color:#E1E4E8;">) {     </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;">(String pattern </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[]{       </span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#9ECBFF;">&quot;Rudolph&quot;</span><span style="color:#E1E4E8;">,       </span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#9ECBFF;">&quot;[rR]udolph&quot;</span><span style="color:#E1E4E8;">,       </span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#9ECBFF;">&quot;[rR][aeiou][a-z]ol.*&quot;</span><span style="color:#E1E4E8;">,       </span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#9ECBFF;">&quot;R.*&quot;</span><span style="color:#E1E4E8;"> })       </span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Rudolph&quot;</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">matches</span><span style="color:#E1E4E8;">(pattern));   </span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span></span>
<span class="line"><span style="color:#E1E4E8;">} </span></span>
<span class="line"><span style="color:#6A737D;">/* Output: </span></span>
<span class="line"><span style="color:#6A737D;">true </span></span>
<span class="line"><span style="color:#6A737D;">true </span></span>
<span class="line"><span style="color:#6A737D;">true </span></span>
<span class="line"><span style="color:#6A737D;">true </span></span>
<span class="line"><span style="color:#6A737D;">*/</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// strings/Rudolph.java </span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Rudolph</span><span style="color:#24292E;"> {   </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) {     </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">for</span><span style="color:#24292E;">(String pattern </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[]{       </span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#032F62;">&quot;Rudolph&quot;</span><span style="color:#24292E;">,       </span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#032F62;">&quot;[rR]udolph&quot;</span><span style="color:#24292E;">,       </span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#032F62;">&quot;[rR][aeiou][a-z]ol.*&quot;</span><span style="color:#24292E;">,       </span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#032F62;">&quot;R.*&quot;</span><span style="color:#24292E;"> })       </span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Rudolph&quot;</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">matches</span><span style="color:#24292E;">(pattern));   </span></span>
<span class="line"><span style="color:#24292E;">    } </span></span>
<span class="line"><span style="color:#24292E;">} </span></span>
<span class="line"><span style="color:#6A737D;">/* Output: </span></span>
<span class="line"><span style="color:#6A737D;">true </span></span>
<span class="line"><span style="color:#6A737D;">true </span></span>
<span class="line"><span style="color:#6A737D;">true </span></span>
<span class="line"><span style="color:#6A737D;">true </span></span>
<span class="line"><span style="color:#6A737D;">*/</span></span></code></pre></div><p>我们的目的并不是编写最难理解的正则表达式，而是尽量编写能够完成任务的、最简单以及最必要的正则表达式。一旦真正开始使用正则表达式了，你就会发现，在编写新的表达式之前，你通常会参考代码中已经用到的正则表达式。</p><h3 id="量词" tabindex="-1">量词 <a class="header-anchor" href="#量词" aria-label="Permalink to &quot;量词&quot;">​</a></h3><p>量词描述了一个模式捕获输入文本的方式：</p><ul><li><p><strong>贪婪型</strong>： 量词总是贪婪的，除非有其他的选项被设置。贪婪表达式会为所有可能的模式发现尽可能多的匹配。导致此问题的一个典型理由就是假定我们的模式仅能匹配第一个可能的字符组，如果它是贪婪的，那么它就会继续往下匹配。</p></li><li><p><strong>勉强型</strong>： 用问号来指定，这个量词匹配满足模式所需的最少字符数。因此也被称作懒惰的、最少匹配的、非贪婪的或不贪婪的。</p></li><li><p><strong>占有型</strong>： 目前，这种类型的量词只有在 Java 语言中才可用（在其他语言中不可用），并且也更高级，因此我们大概不会立刻用到它。当正则表达式被应用于 <code>String</code> 时，它会产生相当多的状态，以便在匹配失败时可以回溯。而“占有的”量词并不保存这些中间状态，因此它们可以防止回溯。它们常常用于防止正则表达式失控，因此可以使正则表达式执行起来更高效。</p></li></ul><table><thead><tr><th>贪婪型</th><th>勉强型</th><th>占有型</th><th>如何匹配</th></tr></thead><tbody><tr><td><code>X?</code></td><td><code>X??</code></td><td><code>X?+</code></td><td>一个或零个<code>X</code></td></tr><tr><td><code>X*</code></td><td><code>X*?</code></td><td><code>X*+</code></td><td>零个或多个<code>X</code></td></tr><tr><td><code>X+</code></td><td><code>X+?</code></td><td><code>X++</code></td><td>一个或多个<code>X</code></td></tr><tr><td><code>X{n}</code></td><td><code>X{n}?</code></td><td><code>X{n}+</code></td><td>恰好<code>n</code>次<code>X</code></td></tr><tr><td><code>X{n,}</code></td><td><code>X{n,}?</code></td><td><code>X{n,}+</code></td><td>至少<code>n</code>次<code>X</code></td></tr><tr><td><code>X{n,m}</code></td><td><code>X{n,m}?</code></td><td><code>X{n,m}+</code></td><td><code>X</code>至少<code>n</code>次，但不超过<code>m</code>次</td></tr></tbody></table><p>应该非常清楚地意识到，表达式 <code>X</code> 通常必须要用圆括号括起来，以便它能够按照我们期望的效果去执行。例如：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">abc</span><span style="color:#F97583;">+</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">abc</span><span style="color:#D73A49;">+</span></span></code></pre></div><p>看起来它似乎应该匹配1个或多个<code>abc</code>序列，如果我们把它应用于输入字符串<code>abcabcabc</code>，则实际上会获得3个匹配。然而，这个表达式实际上表示的是：匹配<code>ab</code>，后面跟随1个或多个<code>c</code>。要表明匹配1个或多个完整的字符串<code>abc</code>，我们必须这样表示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">(abc)</span><span style="color:#F97583;">+</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">(abc)</span><span style="color:#D73A49;">+</span></span></code></pre></div><p>你会发现，在使用正则表达式时很容易混淆，因为它是一种在 Java 之上的新语言。</p><h3 id="charsequence" tabindex="-1"><code>CharSequence</code> <a class="header-anchor" href="#charsequence" aria-label="Permalink to &quot;\`CharSequence\`&quot;">​</a></h3><p>接口 <code>CharSequence</code> 从 <code>CharBuffer</code>、<code>String</code>、<code>StringBuffer</code>、<code>StringBuilder</code> 类中抽象出了字符序列的一般化定义：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">CharSequence</span><span style="color:#E1E4E8;"> {   </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">char</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">charAt</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">i</span><span style="color:#E1E4E8;">);   </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">length</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    CharSequence </span><span style="color:#B392F0;">subSequence</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">start</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">end</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    String </span><span style="color:#B392F0;">toString</span><span style="color:#E1E4E8;">(); </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">CharSequence</span><span style="color:#24292E;"> {   </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">char</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">charAt</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">i</span><span style="color:#24292E;">);   </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">length</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    CharSequence </span><span style="color:#6F42C1;">subSequence</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">start</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">end</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    String </span><span style="color:#6F42C1;">toString</span><span style="color:#24292E;">(); </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>因此，这些类都实现了该接口。多数正则表达式操作都接受 <code>CharSequence</code> 类型参数。</p><h3 id="pattern-和-matcher" tabindex="-1"><code>Pattern</code> 和 <code>Matcher</code> <a class="header-anchor" href="#pattern-和-matcher" aria-label="Permalink to &quot;\`Pattern\` 和 \`Matcher\`&quot;">​</a></h3><p>通常，比起功能有限的 <code>String</code> 类，我们更愿意构造功能强大的正则表达式对象。只需导入 <code>java.util.regex</code>包，然后用 <code>static Pattern.compile()</code> 方法来编译你的正则表达式即可。它会根据你的 <code>String</code> 类型的正则表达式生成一个 <code>Pattern</code> 对象。接下来，把你想要检索的字符串传入 <code>Pattern</code> 对象的 <code>matcher()</code> 方法。<code>matcher()</code> 方法会生成一个 <code>Matcher</code> 对象，它有很多功能可用（可以参考 <code>java.util.regext.Matcher</code> 的 JDK 文档）。例如，它的 <code>replaceAll()</code> 方法能将所有匹配的部分都替换成你传入的参数。</p><p>作为第一个示例，下面的类可以用来测试正则表达式，看看它们能否匹配一个输入字符串。第一个控制台参数是将要用来搜索匹配的输入字符串，后面的一个或多个参数都是正则表达式，它们将被用来在输入的第一个字符串中查找匹配。在Unix/Linux上，命令行中的正则表达式必须用引号括起来。这个程序在测试正则表达式时很有用，特别是当你想验证它们是否具备你所期待的匹配功能的时候。<a href="./网上还有很多实用并且成熟的正则表达式工具。.html">^3</a></p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// strings/TestRegularExpression.java </span></span>
<span class="line"><span style="color:#6A737D;">// Simple regular expression demonstration </span></span>
<span class="line"><span style="color:#6A737D;">// {java TestRegularExpression </span></span>
<span class="line"><span style="color:#6A737D;">// abcabcabcdefabc &quot;abc+&quot; &quot;(abc)+&quot; } </span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> java.util.regex.</span><span style="color:#79B8FF;">*</span><span style="color:#E1E4E8;">; </span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">TestRegularExpression</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] </span><span style="color:#FFAB70;">args</span><span style="color:#E1E4E8;">) {     </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(args.length </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">) {     </span></span>
<span class="line"><span style="color:#E1E4E8;">            System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(       </span></span>
<span class="line"><span style="color:#E1E4E8;">              </span><span style="color:#9ECBFF;">&quot;Usage:</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">java TestRegularExpression &quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;">         </span></span>
<span class="line"><span style="color:#E1E4E8;">              </span><span style="color:#9ECBFF;">&quot;characterSequence regularExpression+&quot;</span><span style="color:#E1E4E8;">);      </span></span>
<span class="line"><span style="color:#E1E4E8;">            System.</span><span style="color:#B392F0;">exit</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">);    </span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Input: </span><span style="color:#79B8FF;">\\&quot;</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> args[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;</span><span style="color:#79B8FF;">\\&quot;</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">);     </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;">(String arg </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> args) {       </span></span>
<span class="line"><span style="color:#E1E4E8;">            System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(         </span></span>
<span class="line"><span style="color:#E1E4E8;">              </span><span style="color:#9ECBFF;">&quot;Regular expression: </span><span style="color:#79B8FF;">\\&quot;</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> arg </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;</span><span style="color:#79B8FF;">\\&quot;</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">);       </span></span>
<span class="line"><span style="color:#E1E4E8;">            Pattern p </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Pattern.</span><span style="color:#B392F0;">compile</span><span style="color:#E1E4E8;">(arg);       </span></span>
<span class="line"><span style="color:#E1E4E8;">            Matcher m </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> p.</span><span style="color:#B392F0;">matcher</span><span style="color:#E1E4E8;">(args[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">]);       </span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">while</span><span style="color:#E1E4E8;">(m.</span><span style="color:#B392F0;">find</span><span style="color:#E1E4E8;">()) {         </span></span>
<span class="line"><span style="color:#E1E4E8;">                System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(           </span></span>
<span class="line"><span style="color:#E1E4E8;">                  </span><span style="color:#9ECBFF;">&quot;Match </span><span style="color:#79B8FF;">\\&quot;</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> m.</span><span style="color:#B392F0;">group</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;</span><span style="color:#79B8FF;">\\&quot;</span><span style="color:#9ECBFF;"> at positions &quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;">           </span></span>
<span class="line"><span style="color:#E1E4E8;">                m.</span><span style="color:#B392F0;">start</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;-&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> (m.</span><span style="color:#B392F0;">end</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">));       </span></span>
<span class="line"><span style="color:#E1E4E8;">            }     </span></span>
<span class="line"><span style="color:#E1E4E8;">        }  </span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#6A737D;">/* Output: </span></span>
<span class="line"><span style="color:#6A737D;">Input: &quot;abcabcabcdefabc&quot; </span></span>
<span class="line"><span style="color:#6A737D;">Regular expression: &quot;abcabcabcdefabc&quot; </span></span>
<span class="line"><span style="color:#6A737D;">Match &quot;abcabcabcdefabc&quot; at positions 0-14 </span></span>
<span class="line"><span style="color:#6A737D;">Regular expression: &quot;abc+&quot; </span></span>
<span class="line"><span style="color:#6A737D;">Match &quot;abc&quot; at positions 0-2 </span></span>
<span class="line"><span style="color:#6A737D;">Match &quot;abc&quot; at positions 3-5 </span></span>
<span class="line"><span style="color:#6A737D;">Match &quot;abc&quot; at positions 6-8 </span></span>
<span class="line"><span style="color:#6A737D;">Match &quot;abc&quot; at positions 12-14 </span></span>
<span class="line"><span style="color:#6A737D;">Regular expression: &quot;(abc)+&quot;</span></span>
<span class="line"><span style="color:#6A737D;">Match &quot;abcabcabc&quot; at positions 0-8 </span></span>
<span class="line"><span style="color:#6A737D;">Match &quot;abc&quot; at positions 12-14 </span></span>
<span class="line"><span style="color:#6A737D;">*/</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// strings/TestRegularExpression.java </span></span>
<span class="line"><span style="color:#6A737D;">// Simple regular expression demonstration </span></span>
<span class="line"><span style="color:#6A737D;">// {java TestRegularExpression </span></span>
<span class="line"><span style="color:#6A737D;">// abcabcabcdefabc &quot;abc+&quot; &quot;(abc)+&quot; } </span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> java.util.regex.</span><span style="color:#005CC5;">*</span><span style="color:#24292E;">; </span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TestRegularExpression</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) {     </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(args.length </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">) {     </span></span>
<span class="line"><span style="color:#24292E;">            System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(       </span></span>
<span class="line"><span style="color:#24292E;">              </span><span style="color:#032F62;">&quot;Usage:</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">java TestRegularExpression &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;">         </span></span>
<span class="line"><span style="color:#24292E;">              </span><span style="color:#032F62;">&quot;characterSequence regularExpression+&quot;</span><span style="color:#24292E;">);      </span></span>
<span class="line"><span style="color:#24292E;">            System.</span><span style="color:#6F42C1;">exit</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">);    </span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Input: </span><span style="color:#005CC5;">\\&quot;</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> args[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;</span><span style="color:#005CC5;">\\&quot;</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">);     </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">for</span><span style="color:#24292E;">(String arg </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> args) {       </span></span>
<span class="line"><span style="color:#24292E;">            System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(         </span></span>
<span class="line"><span style="color:#24292E;">              </span><span style="color:#032F62;">&quot;Regular expression: </span><span style="color:#005CC5;">\\&quot;</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> arg </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;</span><span style="color:#005CC5;">\\&quot;</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">);       </span></span>
<span class="line"><span style="color:#24292E;">            Pattern p </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Pattern.</span><span style="color:#6F42C1;">compile</span><span style="color:#24292E;">(arg);       </span></span>
<span class="line"><span style="color:#24292E;">            Matcher m </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> p.</span><span style="color:#6F42C1;">matcher</span><span style="color:#24292E;">(args[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">]);       </span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">while</span><span style="color:#24292E;">(m.</span><span style="color:#6F42C1;">find</span><span style="color:#24292E;">()) {         </span></span>
<span class="line"><span style="color:#24292E;">                System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(           </span></span>
<span class="line"><span style="color:#24292E;">                  </span><span style="color:#032F62;">&quot;Match </span><span style="color:#005CC5;">\\&quot;</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> m.</span><span style="color:#6F42C1;">group</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;</span><span style="color:#005CC5;">\\&quot;</span><span style="color:#032F62;"> at positions &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;">           </span></span>
<span class="line"><span style="color:#24292E;">                m.</span><span style="color:#6F42C1;">start</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;-&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> (m.</span><span style="color:#6F42C1;">end</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">));       </span></span>
<span class="line"><span style="color:#24292E;">            }     </span></span>
<span class="line"><span style="color:#24292E;">        }  </span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6A737D;">/* Output: </span></span>
<span class="line"><span style="color:#6A737D;">Input: &quot;abcabcabcdefabc&quot; </span></span>
<span class="line"><span style="color:#6A737D;">Regular expression: &quot;abcabcabcdefabc&quot; </span></span>
<span class="line"><span style="color:#6A737D;">Match &quot;abcabcabcdefabc&quot; at positions 0-14 </span></span>
<span class="line"><span style="color:#6A737D;">Regular expression: &quot;abc+&quot; </span></span>
<span class="line"><span style="color:#6A737D;">Match &quot;abc&quot; at positions 0-2 </span></span>
<span class="line"><span style="color:#6A737D;">Match &quot;abc&quot; at positions 3-5 </span></span>
<span class="line"><span style="color:#6A737D;">Match &quot;abc&quot; at positions 6-8 </span></span>
<span class="line"><span style="color:#6A737D;">Match &quot;abc&quot; at positions 12-14 </span></span>
<span class="line"><span style="color:#6A737D;">Regular expression: &quot;(abc)+&quot;</span></span>
<span class="line"><span style="color:#6A737D;">Match &quot;abcabcabc&quot; at positions 0-8 </span></span>
<span class="line"><span style="color:#6A737D;">Match &quot;abc&quot; at positions 12-14 </span></span>
<span class="line"><span style="color:#6A737D;">*/</span></span></code></pre></div><p>还可以在控制台参数中加入<code>“(abc){2,}”</code>，看看执行结果。</p><p><code>Pattern</code> 对象表示编译后的正则表达式。从这个例子可以看到，我们使用已编译的 <code>Pattern</code> 对象上的 <code>matcher()</code> 方法，加上一个输入字符串，从而共同构造了一个 <code>Matcher</code> 对象。同时，<code>Pattern</code> 类还提供了一个<code>static</code>方法：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">matches</span><span style="color:#E1E4E8;">(String regex, CharSequence input)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">matches</span><span style="color:#24292E;">(String regex, CharSequence input)</span></span></code></pre></div><p>该方法用以检查 <code>regex</code> 是否匹配整个 <code>CharSequence</code> 类型的 <code>input</code> 参数。编译后的 <code>Pattern</code> 对象还提供了 <code>split()</code> 方法，它从匹配了 <code>regex</code> 的地方分割输入字符串，返回分割后的子字符串 <code>String</code> 数组。</p><p>通过调用 <code>Pattern.matcher()</code> 方法，并传入一个字符串参数，我们得到了一个 <code>Matcher</code> 对象。使用 <code>Matcher</code> 上的方法，我们将能够判断各种不同类型的匹配是否成功：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">matches</span><span style="color:#E1E4E8;">() </span></span>
<span class="line"><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">lookingAt</span><span style="color:#E1E4E8;">() </span></span>
<span class="line"><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">find</span><span style="color:#E1E4E8;">() </span></span>
<span class="line"><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">find</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> start)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">matches</span><span style="color:#24292E;">() </span></span>
<span class="line"><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">lookingAt</span><span style="color:#24292E;">() </span></span>
<span class="line"><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">find</span><span style="color:#24292E;">() </span></span>
<span class="line"><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">find</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> start)</span></span></code></pre></div><p>其中的 <code>matches()</code> 方法用来判断整个输入字符串是否匹配正则表达式模式，而 <code>lookingAt()</code> 则用来判断该字符串（不必是整个字符串）的起始部分是否能够匹配模式。</p><h3 id="find" tabindex="-1"><code>find()</code> <a class="header-anchor" href="#find" aria-label="Permalink to &quot;\`find()\`&quot;">​</a></h3><p><code>Matcher.find()</code> 方法可用来在 <code>CharSequence</code> 中查找多个匹配。例如：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// strings/Finding.java </span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> java.util.regex.</span><span style="color:#79B8FF;">*</span><span style="color:#E1E4E8;">; </span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Finding</span><span style="color:#E1E4E8;"> {   </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] </span><span style="color:#FFAB70;">args</span><span style="color:#E1E4E8;">) {     </span></span>
<span class="line"><span style="color:#E1E4E8;">        Matcher m </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Pattern.</span><span style="color:#B392F0;">compile</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#79B8FF;">\\\\</span><span style="color:#9ECBFF;">w+&quot;</span><span style="color:#E1E4E8;">)       </span></span>
<span class="line"><span style="color:#E1E4E8;">          .</span><span style="color:#B392F0;">matcher</span><span style="color:#E1E4E8;">(         </span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#9ECBFF;">&quot;Evening is full of the linnet&#39;s wings&quot;</span><span style="color:#E1E4E8;">);     </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">while</span><span style="color:#E1E4E8;">(m.</span><span style="color:#B392F0;">find</span><span style="color:#E1E4E8;">())       </span></span>
<span class="line"><span style="color:#E1E4E8;">            System.out.</span><span style="color:#B392F0;">print</span><span style="color:#E1E4E8;">(m.</span><span style="color:#B392F0;">group</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot; &quot;</span><span style="color:#E1E4E8;">);   </span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">();     </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;     </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">while</span><span style="color:#E1E4E8;">(m.</span><span style="color:#B392F0;">find</span><span style="color:#E1E4E8;">(i)) {       </span></span>
<span class="line"><span style="color:#E1E4E8;">            System.out.</span><span style="color:#B392F0;">print</span><span style="color:#E1E4E8;">(m.</span><span style="color:#B392F0;">group</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot; &quot;</span><span style="color:#E1E4E8;">);       </span></span>
<span class="line"><span style="color:#E1E4E8;">            i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">;     </span></span>
<span class="line"><span style="color:#E1E4E8;">        }   </span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#6A737D;">/* Output: </span></span>
<span class="line"><span style="color:#6A737D;">Evening is full of the linnet s wings</span></span>
<span class="line"><span style="color:#6A737D;">Evening vening ening ning ing ng g is is s full full </span></span>
<span class="line"><span style="color:#6A737D;">ull ll l of of f the the he e linnet linnet innet nnet </span></span>
<span class="line"><span style="color:#6A737D;">net et t s s wings wings ings ngs gs s </span></span>
<span class="line"><span style="color:#6A737D;">*/</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// strings/Finding.java </span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> java.util.regex.</span><span style="color:#005CC5;">*</span><span style="color:#24292E;">; </span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Finding</span><span style="color:#24292E;"> {   </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) {     </span></span>
<span class="line"><span style="color:#24292E;">        Matcher m </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Pattern.</span><span style="color:#6F42C1;">compile</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;</span><span style="color:#005CC5;">\\\\</span><span style="color:#032F62;">w+&quot;</span><span style="color:#24292E;">)       </span></span>
<span class="line"><span style="color:#24292E;">          .</span><span style="color:#6F42C1;">matcher</span><span style="color:#24292E;">(         </span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#032F62;">&quot;Evening is full of the linnet&#39;s wings&quot;</span><span style="color:#24292E;">);     </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">while</span><span style="color:#24292E;">(m.</span><span style="color:#6F42C1;">find</span><span style="color:#24292E;">())       </span></span>
<span class="line"><span style="color:#24292E;">            System.out.</span><span style="color:#6F42C1;">print</span><span style="color:#24292E;">(m.</span><span style="color:#6F42C1;">group</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot; &quot;</span><span style="color:#24292E;">);   </span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">();     </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;     </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">while</span><span style="color:#24292E;">(m.</span><span style="color:#6F42C1;">find</span><span style="color:#24292E;">(i)) {       </span></span>
<span class="line"><span style="color:#24292E;">            System.out.</span><span style="color:#6F42C1;">print</span><span style="color:#24292E;">(m.</span><span style="color:#6F42C1;">group</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot; &quot;</span><span style="color:#24292E;">);       </span></span>
<span class="line"><span style="color:#24292E;">            i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">;     </span></span>
<span class="line"><span style="color:#24292E;">        }   </span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6A737D;">/* Output: </span></span>
<span class="line"><span style="color:#6A737D;">Evening is full of the linnet s wings</span></span>
<span class="line"><span style="color:#6A737D;">Evening vening ening ning ing ng g is is s full full </span></span>
<span class="line"><span style="color:#6A737D;">ull ll l of of f the the he e linnet linnet innet nnet </span></span>
<span class="line"><span style="color:#6A737D;">net et t s s wings wings ings ngs gs s </span></span>
<span class="line"><span style="color:#6A737D;">*/</span></span></code></pre></div><p>模式 <code>\\\\w+</code> 将字符串划分为词。<code>find()</code> 方法像迭代器那样向前遍历输入字符串。而第二个重载的 <code>find()</code> 接收一个整型参数，该整数表示字符串中字符的位置，并以其作为搜索的起点。从结果可以看出，后一个版本的 <code>find()</code> 方法能够根据其参数的值，不断重新设定搜索的起始位置。</p><h3 id="组-groups" tabindex="-1">组（Groups） <a class="header-anchor" href="#组-groups" aria-label="Permalink to &quot;组（Groups）&quot;">​</a></h3><p>组是用括号划分的正则表达式，可以根据组的编号来引用某个组。组号为 0 表示整个表达式，组号 1 表示被第一对括号括起来的组，以此类推。因此，下面这个表达式，</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">A</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">B</span><span style="color:#E1E4E8;">(C))D</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">A</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">B</span><span style="color:#24292E;">(C))D</span></span></code></pre></div><p>中有三个组：组 0 是 <code>ABCD</code>，组 1 是 <code>BC</code>，组 2 是 <code>C</code>。</p><p><code>Matcher</code> 对象提供了一系列方法，用以获取与组相关的信息：</p><ul><li><code>public int groupCount()</code> 返回该匹配器的模式中的分组数目，组 0 不包括在内。</li><li><code>public String group()</code> 返回前一次匹配操作（例如 <code>find()</code>）的第 0 组（整个匹配）。</li><li><code>public String group(int i)</code> 返回前一次匹配操作期间指定的组号，如果匹配成功，但是指定的组没有匹配输入字符串的任何部分，则将返回 <code>null</code>。</li><li><code>public int start(int group)</code> 返回在前一次匹配操作中寻找到的组的起始索引。</li><li><code>public int end(int group)</code> 返回在前一次匹配操作中寻找到的组的最后一个字符索引加一的值。</li></ul><p>下面是正则表达式组的例子：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// strings/Groups.java</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> java.util.regex.</span><span style="color:#79B8FF;">*</span><span style="color:#E1E4E8;">; </span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Groups</span><span style="color:#E1E4E8;"> {   </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> String POEM </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">     </span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#9ECBFF;">&quot;Twas brillig, and the slithy toves</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;">     </span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#9ECBFF;">&quot;Did gyre and gimble in the wabe.</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;">     </span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#9ECBFF;">&quot;All mimsy were the borogoves,</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;">     </span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#9ECBFF;">&quot;And the mome raths outgrabe.</span><span style="color:#79B8FF;">\\n\\n</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;">     </span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#9ECBFF;">&quot;Beware the Jabberwock, my son,</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;">     </span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#9ECBFF;">&quot;The jaws that bite, the claws that catch.</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;">     </span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#9ECBFF;">&quot;Beware the Jubjub bird, and shun</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;">     </span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#9ECBFF;">&quot;The frumious Bandersnatch.&quot;</span><span style="color:#E1E4E8;">;   </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] </span><span style="color:#FFAB70;">args</span><span style="color:#E1E4E8;">) {     </span></span>
<span class="line"><span style="color:#E1E4E8;">        Matcher m </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Pattern.</span><span style="color:#B392F0;">compile</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#9ECBFF;">&quot;(?m)(</span><span style="color:#79B8FF;">\\\\</span><span style="color:#9ECBFF;">S+)</span><span style="color:#79B8FF;">\\\\</span><span style="color:#9ECBFF;">s+((</span><span style="color:#79B8FF;">\\\\</span><span style="color:#9ECBFF;">S+)</span><span style="color:#79B8FF;">\\\\</span><span style="color:#9ECBFF;">s+(</span><span style="color:#79B8FF;">\\\\</span><span style="color:#9ECBFF;">S+))$&quot;</span><span style="color:#E1E4E8;">)       </span></span>
<span class="line"><span style="color:#E1E4E8;">          .</span><span style="color:#B392F0;">matcher</span><span style="color:#E1E4E8;">(POEM);     </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">while</span><span style="color:#E1E4E8;">(m.</span><span style="color:#B392F0;">find</span><span style="color:#E1E4E8;">()) {       </span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> j </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; j </span><span style="color:#F97583;">&lt;=</span><span style="color:#E1E4E8;"> m.</span><span style="color:#B392F0;">groupCount</span><span style="color:#E1E4E8;">(); j</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">)         </span></span>
<span class="line"><span style="color:#E1E4E8;">                System.out.</span><span style="color:#B392F0;">print</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;[&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> m.</span><span style="color:#B392F0;">group</span><span style="color:#E1E4E8;">(j) </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;]&quot;</span><span style="color:#E1E4E8;">);       </span></span>
<span class="line"><span style="color:#E1E4E8;">            System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">();     </span></span>
<span class="line"><span style="color:#E1E4E8;">        }   </span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#6A737D;">/* Output: </span></span>
<span class="line"><span style="color:#6A737D;">[the slithy toves][the][slithy toves][slithy][toves] </span></span>
<span class="line"><span style="color:#6A737D;">[in the wabe.][in][the wabe.][the][wabe.] </span></span>
<span class="line"><span style="color:#6A737D;">[were the borogoves,][were][the </span></span>
<span class="line"><span style="color:#6A737D;">borogoves,][the][borogoves,] </span></span>
<span class="line"><span style="color:#6A737D;">[mome raths outgrabe.][mome][raths </span></span>
<span class="line"><span style="color:#6A737D;">outgrabe.][raths][outgrabe.] </span></span>
<span class="line"><span style="color:#6A737D;">[Jabberwock, my son,][Jabberwock,][my son,][my][son,] </span></span>
<span class="line"><span style="color:#6A737D;">[claws that catch.][claws][that catch.][that][catch.] </span></span>
<span class="line"><span style="color:#6A737D;">[bird, and shun][bird,][and shun][and][shun] </span></span>
<span class="line"><span style="color:#6A737D;">[The frumious Bandersnatch.][The][frumious </span></span>
<span class="line"><span style="color:#6A737D;">Bandersnatch.][frumious][Bandersnatch.] </span></span>
<span class="line"><span style="color:#6A737D;">*/</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// strings/Groups.java</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> java.util.regex.</span><span style="color:#005CC5;">*</span><span style="color:#24292E;">; </span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Groups</span><span style="color:#24292E;"> {   </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> String POEM </span><span style="color:#D73A49;">=</span><span style="color:#24292E;">     </span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#032F62;">&quot;Twas brillig, and the slithy toves</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;">     </span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#032F62;">&quot;Did gyre and gimble in the wabe.</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;">     </span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#032F62;">&quot;All mimsy were the borogoves,</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;">     </span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#032F62;">&quot;And the mome raths outgrabe.</span><span style="color:#005CC5;">\\n\\n</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;">     </span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#032F62;">&quot;Beware the Jabberwock, my son,</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;">     </span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#032F62;">&quot;The jaws that bite, the claws that catch.</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;">     </span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#032F62;">&quot;Beware the Jubjub bird, and shun</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;">     </span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#032F62;">&quot;The frumious Bandersnatch.&quot;</span><span style="color:#24292E;">;   </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) {     </span></span>
<span class="line"><span style="color:#24292E;">        Matcher m </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Pattern.</span><span style="color:#6F42C1;">compile</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#032F62;">&quot;(?m)(</span><span style="color:#005CC5;">\\\\</span><span style="color:#032F62;">S+)</span><span style="color:#005CC5;">\\\\</span><span style="color:#032F62;">s+((</span><span style="color:#005CC5;">\\\\</span><span style="color:#032F62;">S+)</span><span style="color:#005CC5;">\\\\</span><span style="color:#032F62;">s+(</span><span style="color:#005CC5;">\\\\</span><span style="color:#032F62;">S+))$&quot;</span><span style="color:#24292E;">)       </span></span>
<span class="line"><span style="color:#24292E;">          .</span><span style="color:#6F42C1;">matcher</span><span style="color:#24292E;">(POEM);     </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">while</span><span style="color:#24292E;">(m.</span><span style="color:#6F42C1;">find</span><span style="color:#24292E;">()) {       </span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">for</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> j </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; j </span><span style="color:#D73A49;">&lt;=</span><span style="color:#24292E;"> m.</span><span style="color:#6F42C1;">groupCount</span><span style="color:#24292E;">(); j</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">)         </span></span>
<span class="line"><span style="color:#24292E;">                System.out.</span><span style="color:#6F42C1;">print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;[&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> m.</span><span style="color:#6F42C1;">group</span><span style="color:#24292E;">(j) </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;]&quot;</span><span style="color:#24292E;">);       </span></span>
<span class="line"><span style="color:#24292E;">            System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">();     </span></span>
<span class="line"><span style="color:#24292E;">        }   </span></span>
<span class="line"><span style="color:#24292E;">    } </span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6A737D;">/* Output: </span></span>
<span class="line"><span style="color:#6A737D;">[the slithy toves][the][slithy toves][slithy][toves] </span></span>
<span class="line"><span style="color:#6A737D;">[in the wabe.][in][the wabe.][the][wabe.] </span></span>
<span class="line"><span style="color:#6A737D;">[were the borogoves,][were][the </span></span>
<span class="line"><span style="color:#6A737D;">borogoves,][the][borogoves,] </span></span>
<span class="line"><span style="color:#6A737D;">[mome raths outgrabe.][mome][raths </span></span>
<span class="line"><span style="color:#6A737D;">outgrabe.][raths][outgrabe.] </span></span>
<span class="line"><span style="color:#6A737D;">[Jabberwock, my son,][Jabberwock,][my son,][my][son,] </span></span>
<span class="line"><span style="color:#6A737D;">[claws that catch.][claws][that catch.][that][catch.] </span></span>
<span class="line"><span style="color:#6A737D;">[bird, and shun][bird,][and shun][and][shun] </span></span>
<span class="line"><span style="color:#6A737D;">[The frumious Bandersnatch.][The][frumious </span></span>
<span class="line"><span style="color:#6A737D;">Bandersnatch.][frumious][Bandersnatch.] </span></span>
<span class="line"><span style="color:#6A737D;">*/</span></span></code></pre></div><p>这首诗来自于 Lewis Carroll 所写的 <em>Through the Looking Glass</em> 中的 “Jabberwocky”。可以看到这个正则表达式模式有许多圆括号分组，由任意数目的非空白符（<code>\\\\S+</code>）及随后的任意数目的空白符（<code>\\\\s+</code>）所组成。目的是捕获每行的最后3个词，每行最后以 <code>\\$</code> 结束。不过，在正常情况下是将 <code>\\$</code> 与整个输入序列的末端相匹配。所以我们一定要显式地告知正则表达式注意输入序列中的换行符。这可以由序列开头的模式标记 <code>(?m)</code> 来完成（模式标记马上就会介绍）。</p><h3 id="start-和-end" tabindex="-1"><code>start()</code> 和 <code>end()</code> <a class="header-anchor" href="#start-和-end" aria-label="Permalink to &quot;\`start()\` 和 \`end()\`&quot;">​</a></h3><p>在匹配操作成功之后，<code>start()</code> 返回先前匹配的起始位置的索引，而 <code>end()</code> 返回所匹配的最后字符的索引加一的值。匹配操作失败之后（或先于一个正在进行的匹配操作去尝试）调用 <code>start()</code> 或 <code>end()</code> 将会产生 <code>IllegalStateException</code>。下面的示例还同时展示了 <code>matches()</code> 和 <code>lookingAt()</code> 的用法 [^4]：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// strings/StartEnd.java </span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> java.util.regex.</span><span style="color:#79B8FF;">*</span><span style="color:#E1E4E8;">; </span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">StartEnd</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> String input </span><span style="color:#F97583;">=</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#9ECBFF;">&quot;As long as there is injustice, whenever a</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;">     </span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#9ECBFF;">&quot;Targathian baby cries out, wherever a distress</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;">     </span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#9ECBFF;">&quot;signal sounds among the stars &quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;">     </span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#9ECBFF;">&quot;... We&#39;ll be there.</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;">     </span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#9ECBFF;">&quot;This fine ship, and this fine crew ...</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;">     </span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#9ECBFF;">&quot;Never give up! Never surrender!&quot;</span><span style="color:#E1E4E8;">;   </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Display</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> regexPrinted </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">;     </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> String regex;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">Display</span><span style="color:#E1E4E8;">(String </span><span style="color:#FFAB70;">regex</span><span style="color:#E1E4E8;">) { </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.regex </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> regex; }     </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">display</span><span style="color:#E1E4E8;">(String </span><span style="color:#FFAB70;">message</span><span style="color:#E1E4E8;">) {       </span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">regexPrinted) {         </span></span>
<span class="line"><span style="color:#E1E4E8;">                System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(regex);         </span></span>
<span class="line"><span style="color:#E1E4E8;">                regexPrinted </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">;       </span></span>
<span class="line"><span style="color:#E1E4E8;">            }       </span></span>
<span class="line"><span style="color:#E1E4E8;">            System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(message);     </span></span>
<span class="line"><span style="color:#E1E4E8;">        }   </span></span>
<span class="line"><span style="color:#E1E4E8;">    }   </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">examine</span><span style="color:#E1E4E8;">(String </span><span style="color:#FFAB70;">s</span><span style="color:#E1E4E8;">, String </span><span style="color:#FFAB70;">regex</span><span style="color:#E1E4E8;">) {     </span></span>
<span class="line"><span style="color:#E1E4E8;">        Display d </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Display</span><span style="color:#E1E4E8;">(regex);     </span></span>
<span class="line"><span style="color:#E1E4E8;">        Pattern p </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Pattern.</span><span style="color:#B392F0;">compile</span><span style="color:#E1E4E8;">(regex);     </span></span>
<span class="line"><span style="color:#E1E4E8;">        Matcher m </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> p.</span><span style="color:#B392F0;">matcher</span><span style="color:#E1E4E8;">(s);     </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">while</span><span style="color:#E1E4E8;">(m.</span><span style="color:#B392F0;">find</span><span style="color:#E1E4E8;">())       </span></span>
<span class="line"><span style="color:#E1E4E8;">            d.</span><span style="color:#B392F0;">display</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;find() &#39;&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> m.</span><span style="color:#B392F0;">group</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;">         </span></span>
<span class="line"><span style="color:#E1E4E8;">              </span><span style="color:#9ECBFF;">&quot;&#39; start = &quot;</span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> m.</span><span style="color:#B392F0;">start</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot; end = &quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> m.</span><span style="color:#B392F0;">end</span><span style="color:#E1E4E8;">());     </span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(m.</span><span style="color:#B392F0;">lookingAt</span><span style="color:#E1E4E8;">()) </span><span style="color:#6A737D;">// No reset() necessary       </span></span>
<span class="line"><span style="color:#E1E4E8;">                d.</span><span style="color:#B392F0;">display</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;lookingAt() start = &quot;</span><span style="color:#E1E4E8;">         </span></span>
<span class="line"><span style="color:#E1E4E8;">                  </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> m.</span><span style="color:#B392F0;">start</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot; end = &quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> m.</span><span style="color:#B392F0;">end</span><span style="color:#E1E4E8;">());     </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(m.</span><span style="color:#B392F0;">matches</span><span style="color:#E1E4E8;">()) </span><span style="color:#6A737D;">// No reset() necessary       </span></span>
<span class="line"><span style="color:#E1E4E8;">            d.</span><span style="color:#B392F0;">display</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;matches() start = &quot;</span><span style="color:#E1E4E8;">         </span></span>
<span class="line"><span style="color:#E1E4E8;">              </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> m.</span><span style="color:#B392F0;">start</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot; end = &quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> m.</span><span style="color:#B392F0;">end</span><span style="color:#E1E4E8;">());   </span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] </span><span style="color:#FFAB70;">args</span><span style="color:#E1E4E8;">) {     </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;">(String in </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> input.</span><span style="color:#B392F0;">split</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">)) {       </span></span>
<span class="line"><span style="color:#E1E4E8;">            System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;input : &quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> in);       </span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;">(String regex </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[]{</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#79B8FF;">\\\\</span><span style="color:#9ECBFF;">w*ere</span><span style="color:#79B8FF;">\\\\</span><span style="color:#9ECBFF;">w*&quot;</span><span style="color:#E1E4E8;">,         </span></span>
<span class="line"><span style="color:#E1E4E8;">              </span><span style="color:#9ECBFF;">&quot;</span><span style="color:#79B8FF;">\\\\</span><span style="color:#9ECBFF;">w*ever&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;T</span><span style="color:#79B8FF;">\\\\</span><span style="color:#9ECBFF;">w+&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;Never.*?!&quot;</span><span style="color:#E1E4E8;">})         </span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#B392F0;">examine</span><span style="color:#E1E4E8;">(in, regex);     </span></span>
<span class="line"><span style="color:#E1E4E8;">        }   </span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span></span>
<span class="line"><span style="color:#E1E4E8;">} </span></span>
<span class="line"><span style="color:#6A737D;">/* Output: </span></span>
<span class="line"><span style="color:#6A737D;">input : As long as there is injustice, whenever a </span></span>
<span class="line"><span style="color:#6A737D;">\\w*ere\\w* </span></span>
<span class="line"><span style="color:#6A737D;">find() &#39;there&#39; start = 11 end = 16 </span></span>
<span class="line"><span style="color:#6A737D;">\\w*ever </span></span>
<span class="line"><span style="color:#6A737D;">find() &#39;whenever&#39; start = 31 end = 39 </span></span>
<span class="line"><span style="color:#6A737D;">input : Targathian baby cries out, wherever a distress </span></span>
<span class="line"><span style="color:#6A737D;">\\w*ere\\w* </span></span>
<span class="line"><span style="color:#6A737D;">find() &#39;wherever&#39; start = 27 end = 35 </span></span>
<span class="line"><span style="color:#6A737D;">\\w*ever </span></span>
<span class="line"><span style="color:#6A737D;">find() &#39;wherever&#39; start = 27 end = 35 </span></span>
<span class="line"><span style="color:#6A737D;">T\\w+ find() &#39;Targathian&#39; start = 0 end = 10 </span></span>
<span class="line"><span style="color:#6A737D;">lookingAt() start = 0 end = 10 </span></span>
<span class="line"><span style="color:#6A737D;">input : signal sounds among the stars ... We&#39;ll be </span></span>
<span class="line"><span style="color:#6A737D;">there. </span></span>
<span class="line"><span style="color:#6A737D;">\\w*ere\\w* </span></span>
<span class="line"><span style="color:#6A737D;">find() &#39;there&#39; start = 43 end = 48 </span></span>
<span class="line"><span style="color:#6A737D;">input : This fine ship, and this fine crew ... </span></span>
<span class="line"><span style="color:#6A737D;">T\\w+ find() &#39;This&#39; start = 0 end = 4</span></span>
<span class="line"><span style="color:#6A737D;">lookingAt() start = 0 end = 4 </span></span>
<span class="line"><span style="color:#6A737D;">input : Never give up! Never surrender! </span></span>
<span class="line"><span style="color:#6A737D;">\\w*ever </span></span>
<span class="line"><span style="color:#6A737D;">find() &#39;Never&#39; start = 0 end = 5 </span></span>
<span class="line"><span style="color:#6A737D;">find() &#39;Never&#39; start = 15 end = 20 </span></span>
<span class="line"><span style="color:#6A737D;">lookingAt() start = 0 end = 5 </span></span>
<span class="line"><span style="color:#6A737D;">Never.*?! </span></span>
<span class="line"><span style="color:#6A737D;">find() &#39;Never give up!&#39; start = 0 end = 14 </span></span>
<span class="line"><span style="color:#6A737D;">find() &#39;Never surrender!&#39; start = 15 end = 31 </span></span>
<span class="line"><span style="color:#6A737D;">lookingAt() start = 0 end = 14 </span></span>
<span class="line"><span style="color:#6A737D;">matches() start = 0 end = 31 </span></span>
<span class="line"><span style="color:#6A737D;">*/</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// strings/StartEnd.java </span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> java.util.regex.</span><span style="color:#005CC5;">*</span><span style="color:#24292E;">; </span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">StartEnd</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> String input </span><span style="color:#D73A49;">=</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#032F62;">&quot;As long as there is injustice, whenever a</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;">     </span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#032F62;">&quot;Targathian baby cries out, wherever a distress</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;">     </span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#032F62;">&quot;signal sounds among the stars &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;">     </span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#032F62;">&quot;... We&#39;ll be there.</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">&quot;</span><span style="color:#D73A49;">+</span><span style="color:#24292E;">     </span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#032F62;">&quot;This fine ship, and this fine crew ...</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;">     </span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#032F62;">&quot;Never give up! Never surrender!&quot;</span><span style="color:#24292E;">;   </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Display</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> regexPrinted </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">;     </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> String regex;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">Display</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">regex</span><span style="color:#24292E;">) { </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.regex </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> regex; }     </span></span>
<span class="line"><span style="color:#24292E;">    </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">display</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">message</span><span style="color:#24292E;">) {       </span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">regexPrinted) {         </span></span>
<span class="line"><span style="color:#24292E;">                System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(regex);         </span></span>
<span class="line"><span style="color:#24292E;">                regexPrinted </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">;       </span></span>
<span class="line"><span style="color:#24292E;">            }       </span></span>
<span class="line"><span style="color:#24292E;">            System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(message);     </span></span>
<span class="line"><span style="color:#24292E;">        }   </span></span>
<span class="line"><span style="color:#24292E;">    }   </span></span>
<span class="line"><span style="color:#24292E;">  </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">examine</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">s</span><span style="color:#24292E;">, String </span><span style="color:#E36209;">regex</span><span style="color:#24292E;">) {     </span></span>
<span class="line"><span style="color:#24292E;">        Display d </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Display</span><span style="color:#24292E;">(regex);     </span></span>
<span class="line"><span style="color:#24292E;">        Pattern p </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Pattern.</span><span style="color:#6F42C1;">compile</span><span style="color:#24292E;">(regex);     </span></span>
<span class="line"><span style="color:#24292E;">        Matcher m </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> p.</span><span style="color:#6F42C1;">matcher</span><span style="color:#24292E;">(s);     </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">while</span><span style="color:#24292E;">(m.</span><span style="color:#6F42C1;">find</span><span style="color:#24292E;">())       </span></span>
<span class="line"><span style="color:#24292E;">            d.</span><span style="color:#6F42C1;">display</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;find() &#39;&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> m.</span><span style="color:#6F42C1;">group</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">+</span><span style="color:#24292E;">         </span></span>
<span class="line"><span style="color:#24292E;">              </span><span style="color:#032F62;">&quot;&#39; start = &quot;</span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> m.</span><span style="color:#6F42C1;">start</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot; end = &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> m.</span><span style="color:#6F42C1;">end</span><span style="color:#24292E;">());     </span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(m.</span><span style="color:#6F42C1;">lookingAt</span><span style="color:#24292E;">()) </span><span style="color:#6A737D;">// No reset() necessary       </span></span>
<span class="line"><span style="color:#24292E;">                d.</span><span style="color:#6F42C1;">display</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;lookingAt() start = &quot;</span><span style="color:#24292E;">         </span></span>
<span class="line"><span style="color:#24292E;">                  </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> m.</span><span style="color:#6F42C1;">start</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot; end = &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> m.</span><span style="color:#6F42C1;">end</span><span style="color:#24292E;">());     </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(m.</span><span style="color:#6F42C1;">matches</span><span style="color:#24292E;">()) </span><span style="color:#6A737D;">// No reset() necessary       </span></span>
<span class="line"><span style="color:#24292E;">            d.</span><span style="color:#6F42C1;">display</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;matches() start = &quot;</span><span style="color:#24292E;">         </span></span>
<span class="line"><span style="color:#24292E;">              </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> m.</span><span style="color:#6F42C1;">start</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot; end = &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> m.</span><span style="color:#6F42C1;">end</span><span style="color:#24292E;">());   </span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) {     </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">for</span><span style="color:#24292E;">(String in </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> input.</span><span style="color:#6F42C1;">split</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">)) {       </span></span>
<span class="line"><span style="color:#24292E;">            System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;input : &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> in);       </span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">for</span><span style="color:#24292E;">(String regex </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[]{</span><span style="color:#032F62;">&quot;</span><span style="color:#005CC5;">\\\\</span><span style="color:#032F62;">w*ere</span><span style="color:#005CC5;">\\\\</span><span style="color:#032F62;">w*&quot;</span><span style="color:#24292E;">,         </span></span>
<span class="line"><span style="color:#24292E;">              </span><span style="color:#032F62;">&quot;</span><span style="color:#005CC5;">\\\\</span><span style="color:#032F62;">w*ever&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;T</span><span style="color:#005CC5;">\\\\</span><span style="color:#032F62;">w+&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;Never.*?!&quot;</span><span style="color:#24292E;">})         </span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6F42C1;">examine</span><span style="color:#24292E;">(in, regex);     </span></span>
<span class="line"><span style="color:#24292E;">        }   </span></span>
<span class="line"><span style="color:#24292E;">    } </span></span>
<span class="line"><span style="color:#24292E;">} </span></span>
<span class="line"><span style="color:#6A737D;">/* Output: </span></span>
<span class="line"><span style="color:#6A737D;">input : As long as there is injustice, whenever a </span></span>
<span class="line"><span style="color:#6A737D;">\\w*ere\\w* </span></span>
<span class="line"><span style="color:#6A737D;">find() &#39;there&#39; start = 11 end = 16 </span></span>
<span class="line"><span style="color:#6A737D;">\\w*ever </span></span>
<span class="line"><span style="color:#6A737D;">find() &#39;whenever&#39; start = 31 end = 39 </span></span>
<span class="line"><span style="color:#6A737D;">input : Targathian baby cries out, wherever a distress </span></span>
<span class="line"><span style="color:#6A737D;">\\w*ere\\w* </span></span>
<span class="line"><span style="color:#6A737D;">find() &#39;wherever&#39; start = 27 end = 35 </span></span>
<span class="line"><span style="color:#6A737D;">\\w*ever </span></span>
<span class="line"><span style="color:#6A737D;">find() &#39;wherever&#39; start = 27 end = 35 </span></span>
<span class="line"><span style="color:#6A737D;">T\\w+ find() &#39;Targathian&#39; start = 0 end = 10 </span></span>
<span class="line"><span style="color:#6A737D;">lookingAt() start = 0 end = 10 </span></span>
<span class="line"><span style="color:#6A737D;">input : signal sounds among the stars ... We&#39;ll be </span></span>
<span class="line"><span style="color:#6A737D;">there. </span></span>
<span class="line"><span style="color:#6A737D;">\\w*ere\\w* </span></span>
<span class="line"><span style="color:#6A737D;">find() &#39;there&#39; start = 43 end = 48 </span></span>
<span class="line"><span style="color:#6A737D;">input : This fine ship, and this fine crew ... </span></span>
<span class="line"><span style="color:#6A737D;">T\\w+ find() &#39;This&#39; start = 0 end = 4</span></span>
<span class="line"><span style="color:#6A737D;">lookingAt() start = 0 end = 4 </span></span>
<span class="line"><span style="color:#6A737D;">input : Never give up! Never surrender! </span></span>
<span class="line"><span style="color:#6A737D;">\\w*ever </span></span>
<span class="line"><span style="color:#6A737D;">find() &#39;Never&#39; start = 0 end = 5 </span></span>
<span class="line"><span style="color:#6A737D;">find() &#39;Never&#39; start = 15 end = 20 </span></span>
<span class="line"><span style="color:#6A737D;">lookingAt() start = 0 end = 5 </span></span>
<span class="line"><span style="color:#6A737D;">Never.*?! </span></span>
<span class="line"><span style="color:#6A737D;">find() &#39;Never give up!&#39; start = 0 end = 14 </span></span>
<span class="line"><span style="color:#6A737D;">find() &#39;Never surrender!&#39; start = 15 end = 31 </span></span>
<span class="line"><span style="color:#6A737D;">lookingAt() start = 0 end = 14 </span></span>
<span class="line"><span style="color:#6A737D;">matches() start = 0 end = 31 </span></span>
<span class="line"><span style="color:#6A737D;">*/</span></span></code></pre></div><p>注意，<code>find()</code> 可以在输入的任意位置定位正则表达式，而 <code>lookingAt()</code> 和 <code>matches()</code> 只有在正则表达式与输入的最开始处就开始匹配时才会成功。<code>matches()</code> 只有在整个输入都匹配正则表达式时才会成功，而 <code>lookingAt()</code> <a href="./我不知道他们是如何想出这个方法名的，或者它到底指的什么。这只是代码审查很重要的原因之一。.html">^5</a> 只要输入的第一部分匹配就会成功。</p><h3 id="pattern-标记" tabindex="-1"><code>Pattern</code> 标记 <a class="header-anchor" href="#pattern-标记" aria-label="Permalink to &quot;\`Pattern\` 标记&quot;">​</a></h3><p><code>Pattern</code> 类的 <code>compile()</code> 方法还有另一个版本，它接受一个标记参数，以调整匹配行为：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Pattern Pattern.</span><span style="color:#B392F0;">compile</span><span style="color:#E1E4E8;">(String regex, </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> flag)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Pattern Pattern.</span><span style="color:#6F42C1;">compile</span><span style="color:#24292E;">(String regex, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> flag)</span></span></code></pre></div><p>其中的 <code>flag</code> 来自以下 <code>Pattern</code> 类中的常量</p><table><thead><tr><th>编译标记</th><th>效果</th></tr></thead><tbody><tr><td><code>Pattern.CANON_EQ</code></td><td>当且仅当两个字符的完全规范分解相匹配时，才认为它们是匹配的。例如，如果我们指定这个标记，表达式<code>\\u003F</code>就会匹配字符串<code>?</code>。默认情况下，匹配不考虑规范的等价性</td></tr><tr><td><code>Pattern.CASE_INSENSITIVE(?i)</code></td><td>默认情况下，大小写不敏感的匹配假定只有US-ASCII字符集中的字符才能进行。这个标记允许模式匹配不考虑大小写（大写或小写）。通过指定<code>UNICODE_CASE</code>标记及结合此标记。基于Unicode的大小写不敏感的匹配就可以开启了</td></tr><tr><td><code>Pattern.COMMENTS(?x)</code></td><td>在这种模式下，空格符将被忽略掉，并且以<code>#</code>开始直到行末的注释也会被忽略掉。通过嵌入的标记表达式也可以开启Unix的行模式</td></tr><tr><td><code>Pattern.DOTALL(?s)</code></td><td>在dotall模式下，表达式<code>.</code>匹配所有字符，包括行终止符。默认情况下，<code>.</code>不会匹配行终止符</td></tr><tr><td><code>Pattern.MULTILINE(?m)</code></td><td>在多行模式下，表达式<code>^</code>和<code>$</code>分别匹配一行的开始和结束。<code>^</code>还匹配输入字符串的开始，而<code>$</code>还匹配输入字符串的结尾。默认情况下，这些表达式仅匹配输入的完整字符串的开始和结束</td></tr><tr><td><code>Pattern.UNICODE_CASE(?u)</code></td><td>当指定这个标记，并且开启<code>CASE_INSENSITIVE</code>时，大小写不敏感的匹配将按照与Unicode标准相一致的方式进行。默认情况下，大小写不敏感的匹配假定只能在US-ASCII字符集中的字符才能进行</td></tr><tr><td><code>Pattern.UNIX_LINES(?d)</code></td><td>在这种模式下，在<code>.</code>、<code>^</code>和<code>$</code>的行为中，只识别行终止符<code>\\n</code></td></tr></tbody></table><p>在这些标记中，<code>Pattern.CASE_INSENSITIVE</code>、<code>Pattern.MULTILINE</code> 以及 <code>Pattern.COMMENTS</code>（对声明或文档有用）特别有用。请注意，你可以直接在正则表达式中使用其中的大多数标记，只需要将上表中括号括起来的字符插入到正则表达式中，你希望它起作用的位置即可。</p><p>你还可以通过“或”(<code>|</code>)操作符组合多个标记的功能：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// strings/ReFlags.java </span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> java.util.regex.</span><span style="color:#79B8FF;">*</span><span style="color:#E1E4E8;">; </span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ReFlags</span><span style="color:#E1E4E8;"> {   </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] </span><span style="color:#FFAB70;">args</span><span style="color:#E1E4E8;">) {     </span></span>
<span class="line"><span style="color:#E1E4E8;">        Pattern p </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">  Pattern.</span><span style="color:#B392F0;">compile</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;^java&quot;</span><span style="color:#E1E4E8;">,       </span></span>
<span class="line"><span style="color:#E1E4E8;">          Pattern.CASE_INSENSITIVE </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> Pattern.MULTILINE);     </span></span>
<span class="line"><span style="color:#E1E4E8;">        Matcher m </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> p.</span><span style="color:#B392F0;">matcher</span><span style="color:#E1E4E8;">(       </span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#9ECBFF;">&quot;java has regex</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">Java has regex</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;">       </span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#9ECBFF;">&quot;JAVA has pretty good regular expressions</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;">       </span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#9ECBFF;">&quot;Regular expressions are in Java&quot;</span><span style="color:#E1E4E8;">);     </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">while</span><span style="color:#E1E4E8;">(m.</span><span style="color:#B392F0;">find</span><span style="color:#E1E4E8;">())       </span></span>
<span class="line"><span style="color:#E1E4E8;">            System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(m.</span><span style="color:#B392F0;">group</span><span style="color:#E1E4E8;">());   </span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#6A737D;">/* Output: </span></span>
<span class="line"><span style="color:#6A737D;">java </span></span>
<span class="line"><span style="color:#6A737D;">Java </span></span>
<span class="line"><span style="color:#6A737D;">JAVA </span></span>
<span class="line"><span style="color:#6A737D;">*/</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// strings/ReFlags.java </span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> java.util.regex.</span><span style="color:#005CC5;">*</span><span style="color:#24292E;">; </span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ReFlags</span><span style="color:#24292E;"> {   </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) {     </span></span>
<span class="line"><span style="color:#24292E;">        Pattern p </span><span style="color:#D73A49;">=</span><span style="color:#24292E;">  Pattern.</span><span style="color:#6F42C1;">compile</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;^java&quot;</span><span style="color:#24292E;">,       </span></span>
<span class="line"><span style="color:#24292E;">          Pattern.CASE_INSENSITIVE </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> Pattern.MULTILINE);     </span></span>
<span class="line"><span style="color:#24292E;">        Matcher m </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> p.</span><span style="color:#6F42C1;">matcher</span><span style="color:#24292E;">(       </span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#032F62;">&quot;java has regex</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">Java has regex</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;">       </span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#032F62;">&quot;JAVA has pretty good regular expressions</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;">       </span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#032F62;">&quot;Regular expressions are in Java&quot;</span><span style="color:#24292E;">);     </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">while</span><span style="color:#24292E;">(m.</span><span style="color:#6F42C1;">find</span><span style="color:#24292E;">())       </span></span>
<span class="line"><span style="color:#24292E;">            System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(m.</span><span style="color:#6F42C1;">group</span><span style="color:#24292E;">());   </span></span>
<span class="line"><span style="color:#24292E;">    } </span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6A737D;">/* Output: </span></span>
<span class="line"><span style="color:#6A737D;">java </span></span>
<span class="line"><span style="color:#6A737D;">Java </span></span>
<span class="line"><span style="color:#6A737D;">JAVA </span></span>
<span class="line"><span style="color:#6A737D;">*/</span></span></code></pre></div><p>在这个例子中，我们创建了一个模式，它将匹配所有以“java”、“Java”和“JAVA”等开头的行，并且是在设置了多行标记的状态下，对每一行（从字符序列的第一个字符开始，至每一个行终止符）都进行匹配。注意，<code>group()</code> 方法只返回已匹配的部分。</p><h3 id="split" tabindex="-1"><code>split()</code> <a class="header-anchor" href="#split" aria-label="Permalink to &quot;\`split()\`&quot;">​</a></h3><p><code>split()</code>方法将输入 <code>String</code> 断开成 <code>String</code> 对象数组，断开边界由正则表达式确定：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] </span><span style="color:#B392F0;">split</span><span style="color:#E1E4E8;">(CharSequence input) </span></span>
<span class="line"><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] </span><span style="color:#B392F0;">split</span><span style="color:#E1E4E8;">(CharSequence input, </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> limit)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#6F42C1;">split</span><span style="color:#24292E;">(CharSequence input) </span></span>
<span class="line"><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#6F42C1;">split</span><span style="color:#24292E;">(CharSequence input, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> limit)</span></span></code></pre></div><p>这是一个快速而方便的方法，可以按照通用边界断开输入文本：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// strings/SplitDemo.java </span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> java.util.regex.</span><span style="color:#79B8FF;">*</span><span style="color:#E1E4E8;">; </span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> java.util.</span><span style="color:#79B8FF;">*</span><span style="color:#E1E4E8;">; </span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SplitDemo</span><span style="color:#E1E4E8;"> {  </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] </span><span style="color:#FFAB70;">args</span><span style="color:#E1E4E8;">) {     </span></span>
<span class="line"><span style="color:#E1E4E8;">        String input </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">       </span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#9ECBFF;">&quot;This!!unusual use!!of exclamation!!points&quot;</span><span style="color:#E1E4E8;">;     </span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(Arrays.</span><span style="color:#B392F0;">toString</span><span style="color:#E1E4E8;">(       </span></span>
<span class="line"><span style="color:#E1E4E8;">        Pattern.</span><span style="color:#B392F0;">compile</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;!!&quot;</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">split</span><span style="color:#E1E4E8;">(input)));     </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// Only do the first three:     </span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(Arrays.</span><span style="color:#B392F0;">toString</span><span style="color:#E1E4E8;">(       </span></span>
<span class="line"><span style="color:#E1E4E8;">        Pattern.</span><span style="color:#B392F0;">compile</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;!!&quot;</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">split</span><span style="color:#E1E4E8;">(input, </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">)));   </span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#6A737D;">/* Output: </span></span>
<span class="line"><span style="color:#6A737D;">[This, unusual use, of exclamation, points] </span></span>
<span class="line"><span style="color:#6A737D;">[This, unusual use, of exclamation!!points]</span></span>
<span class="line"><span style="color:#6A737D;">*/</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// strings/SplitDemo.java </span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> java.util.regex.</span><span style="color:#005CC5;">*</span><span style="color:#24292E;">; </span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> java.util.</span><span style="color:#005CC5;">*</span><span style="color:#24292E;">; </span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SplitDemo</span><span style="color:#24292E;"> {  </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) {     </span></span>
<span class="line"><span style="color:#24292E;">        String input </span><span style="color:#D73A49;">=</span><span style="color:#24292E;">       </span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#032F62;">&quot;This!!unusual use!!of exclamation!!points&quot;</span><span style="color:#24292E;">;     </span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(Arrays.</span><span style="color:#6F42C1;">toString</span><span style="color:#24292E;">(       </span></span>
<span class="line"><span style="color:#24292E;">        Pattern.</span><span style="color:#6F42C1;">compile</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;!!&quot;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">split</span><span style="color:#24292E;">(input)));     </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// Only do the first three:     </span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(Arrays.</span><span style="color:#6F42C1;">toString</span><span style="color:#24292E;">(       </span></span>
<span class="line"><span style="color:#24292E;">        Pattern.</span><span style="color:#6F42C1;">compile</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;!!&quot;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">split</span><span style="color:#24292E;">(input, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">)));   </span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6A737D;">/* Output: </span></span>
<span class="line"><span style="color:#6A737D;">[This, unusual use, of exclamation, points] </span></span>
<span class="line"><span style="color:#6A737D;">[This, unusual use, of exclamation!!points]</span></span>
<span class="line"><span style="color:#6A737D;">*/</span></span></code></pre></div><p>第二种形式的 <code>split()</code> 方法可以限制将输入分割成字符串的数量。</p><h3 id="替换操作" tabindex="-1">替换操作 <a class="header-anchor" href="#替换操作" aria-label="Permalink to &quot;替换操作&quot;">​</a></h3><p>正则表达式在进行文本替换时特别方便，它提供了许多方法：</p><ul><li><code>replaceFirst(String replacement)</code> 以参数字符串 <code>replacement</code> 替换掉第一个匹配成功的部分。</li><li><code>replaceAll(String replacement)</code> 以参数字符串 <code>replacement</code> 替换所有匹配成功的部分。</li><li><code>appendReplacement(StringBuffer sbuf, String replacement)</code> 执行渐进式的替换，而不是像 <code>replaceFirst()</code> 和 <code>replaceAll()</code> 那样只替换第一个匹配或全部匹配。这是一个非常重要的方法。它允许你调用其他方法来生成或处理 <code>replacement</code>（<code>replaceFirst()</code> 和 <code>replaceAll()</code> 则只能使用一个固定的字符串），使你能够以编程的方式将目标分割成组，从而具备更强大的替换功能。</li><li><code>appendTail(StringBuffer sbuf)</code> 在执行了一次或多次 <code>appendReplacement()</code> 之后，调用此方法可以将输入字符串余下的部分复制到 <code>sbuf</code> 中。</li></ul><p>下面的程序演示了如何使用这些替换方法。开头部分注释掉的文本，就是正则表达式要处理的输入字符串：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// strings/TheReplacements.java </span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> java.util.regex.</span><span style="color:#79B8FF;">*</span><span style="color:#E1E4E8;">; </span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> java.nio.file.</span><span style="color:#79B8FF;">*</span><span style="color:#E1E4E8;">; </span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> java.util.stream.</span><span style="color:#79B8FF;">*</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">/*! Here&#39;s a block of text to use as input to </span></span>
<span class="line"><span style="color:#6A737D;">    the regular expression matcher. Note that we </span></span>
<span class="line"><span style="color:#6A737D;">    first extract the block of text by looking for </span></span>
<span class="line"><span style="color:#6A737D;">    the special delimiters, then process the     </span></span>
<span class="line"><span style="color:#6A737D;">    extracted block. !*/</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">TheReplacements</span><span style="color:#E1E4E8;"> {   </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] </span><span style="color:#FFAB70;">args</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> Exception {     </span></span>
<span class="line"><span style="color:#E1E4E8;">        String s </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Files.</span><span style="color:#B392F0;">lines</span><span style="color:#E1E4E8;">(       </span></span>
<span class="line"><span style="color:#E1E4E8;">          Paths.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;TheReplacements.java&quot;</span><span style="color:#E1E4E8;">))       </span></span>
<span class="line"><span style="color:#E1E4E8;">          .</span><span style="color:#B392F0;">collect</span><span style="color:#E1E4E8;">(Collectors.</span><span style="color:#B392F0;">joining</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">));     </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// Match specially commented block of text above:     </span></span>
<span class="line"><span style="color:#E1E4E8;">        Matcher mInput </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Pattern.</span><span style="color:#B392F0;">compile</span><span style="color:#E1E4E8;">(       </span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#9ECBFF;">&quot;/</span><span style="color:#79B8FF;">\\\\</span><span style="color:#9ECBFF;">*!(.*)!</span><span style="color:#79B8FF;">\\\\</span><span style="color:#9ECBFF;">*/&quot;</span><span style="color:#E1E4E8;">, Pattern.DOTALL).</span><span style="color:#B392F0;">matcher</span><span style="color:#E1E4E8;">(s);     </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(mInput.</span><span style="color:#B392F0;">find</span><span style="color:#E1E4E8;">())       </span></span>
<span class="line"><span style="color:#E1E4E8;">            s </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> mInput.</span><span style="color:#B392F0;">group</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// Captured by parentheses     </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// Replace two or more spaces with a single space:     </span></span>
<span class="line"><span style="color:#E1E4E8;">        s </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> s.</span><span style="color:#B392F0;">replaceAll</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot; {2,}&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot; &quot;</span><span style="color:#E1E4E8;">);     </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// Replace 1+ spaces at the beginning of each     </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// line with no spaces. Must enable MULTILINE mode:     </span></span>
<span class="line"><span style="color:#E1E4E8;">        s </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> s.</span><span style="color:#B392F0;">replaceAll</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;(?m)^ +&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;&quot;</span><span style="color:#E1E4E8;">);     </span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(s);     </span></span>
<span class="line"><span style="color:#E1E4E8;">        s </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> s.</span><span style="color:#B392F0;">replaceFirst</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;[aeiou]&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;(VOWEL1)&quot;</span><span style="color:#E1E4E8;">);     </span></span>
<span class="line"><span style="color:#E1E4E8;">        StringBuffer sbuf </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">StringBuffer</span><span style="color:#E1E4E8;">();     </span></span>
<span class="line"><span style="color:#E1E4E8;">        Pattern p </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Pattern.</span><span style="color:#B392F0;">compile</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;[aeiou]&quot;</span><span style="color:#E1E4E8;">);     </span></span>
<span class="line"><span style="color:#E1E4E8;">        Matcher m </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> p.</span><span style="color:#B392F0;">matcher</span><span style="color:#E1E4E8;">(s);     </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// Process the find information as you     </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// perform the replacements:     </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">while</span><span style="color:#E1E4E8;">(m.</span><span style="color:#B392F0;">find</span><span style="color:#E1E4E8;">())      </span></span>
<span class="line"><span style="color:#E1E4E8;">            m.</span><span style="color:#B392F0;">appendReplacement</span><span style="color:#E1E4E8;">(sbuf, m.</span><span style="color:#B392F0;">group</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">toUpperCase</span><span style="color:#E1E4E8;">());     </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// Put in the remainder of the text:     </span></span>
<span class="line"><span style="color:#E1E4E8;">        m.</span><span style="color:#B392F0;">appendTail</span><span style="color:#E1E4E8;">(sbuf);     </span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(sbuf);</span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#6A737D;">/* Output: </span></span>
<span class="line"><span style="color:#6A737D;">Here&#39;s a block of text to use as input to </span></span>
<span class="line"><span style="color:#6A737D;">the regular expression matcher. Note that we </span></span>
<span class="line"><span style="color:#6A737D;">first extract the block of text by looking for </span></span>
<span class="line"><span style="color:#6A737D;">the special delimiters, then process the </span></span>
<span class="line"><span style="color:#6A737D;">extracted block. </span></span>
<span class="line"><span style="color:#6A737D;">H(VOWEL1)rE&#39;s A blOck Of tExt tO UsE As InpUt tO </span></span>
<span class="line"><span style="color:#6A737D;">thE rEgUlAr ExprEssIOn mAtchEr. NOtE thAt wE </span></span>
<span class="line"><span style="color:#6A737D;">fIrst ExtrAct thE blOck Of tExt by lOOkIng fOr </span></span>
<span class="line"><span style="color:#6A737D;">thE spEcIAl dElImItErs, thEn prOcEss thE </span></span>
<span class="line"><span style="color:#6A737D;">ExtrActEd blOck. </span></span>
<span class="line"><span style="color:#6A737D;">*/</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// strings/TheReplacements.java </span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> java.util.regex.</span><span style="color:#005CC5;">*</span><span style="color:#24292E;">; </span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> java.nio.file.</span><span style="color:#005CC5;">*</span><span style="color:#24292E;">; </span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> java.util.stream.</span><span style="color:#005CC5;">*</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">/*! Here&#39;s a block of text to use as input to </span></span>
<span class="line"><span style="color:#6A737D;">    the regular expression matcher. Note that we </span></span>
<span class="line"><span style="color:#6A737D;">    first extract the block of text by looking for </span></span>
<span class="line"><span style="color:#6A737D;">    the special delimiters, then process the     </span></span>
<span class="line"><span style="color:#6A737D;">    extracted block. !*/</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TheReplacements</span><span style="color:#24292E;"> {   </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> Exception {     </span></span>
<span class="line"><span style="color:#24292E;">        String s </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Files.</span><span style="color:#6F42C1;">lines</span><span style="color:#24292E;">(       </span></span>
<span class="line"><span style="color:#24292E;">          Paths.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;TheReplacements.java&quot;</span><span style="color:#24292E;">))       </span></span>
<span class="line"><span style="color:#24292E;">          .</span><span style="color:#6F42C1;">collect</span><span style="color:#24292E;">(Collectors.</span><span style="color:#6F42C1;">joining</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">));     </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// Match specially commented block of text above:     </span></span>
<span class="line"><span style="color:#24292E;">        Matcher mInput </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Pattern.</span><span style="color:#6F42C1;">compile</span><span style="color:#24292E;">(       </span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#032F62;">&quot;/</span><span style="color:#005CC5;">\\\\</span><span style="color:#032F62;">*!(.*)!</span><span style="color:#005CC5;">\\\\</span><span style="color:#032F62;">*/&quot;</span><span style="color:#24292E;">, Pattern.DOTALL).</span><span style="color:#6F42C1;">matcher</span><span style="color:#24292E;">(s);     </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(mInput.</span><span style="color:#6F42C1;">find</span><span style="color:#24292E;">())       </span></span>
<span class="line"><span style="color:#24292E;">            s </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> mInput.</span><span style="color:#6F42C1;">group</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// Captured by parentheses     </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// Replace two or more spaces with a single space:     </span></span>
<span class="line"><span style="color:#24292E;">        s </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> s.</span><span style="color:#6F42C1;">replaceAll</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot; {2,}&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot; &quot;</span><span style="color:#24292E;">);     </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// Replace 1+ spaces at the beginning of each     </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// line with no spaces. Must enable MULTILINE mode:     </span></span>
<span class="line"><span style="color:#24292E;">        s </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> s.</span><span style="color:#6F42C1;">replaceAll</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;(?m)^ +&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;&quot;</span><span style="color:#24292E;">);     </span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(s);     </span></span>
<span class="line"><span style="color:#24292E;">        s </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> s.</span><span style="color:#6F42C1;">replaceFirst</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;[aeiou]&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;(VOWEL1)&quot;</span><span style="color:#24292E;">);     </span></span>
<span class="line"><span style="color:#24292E;">        StringBuffer sbuf </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">StringBuffer</span><span style="color:#24292E;">();     </span></span>
<span class="line"><span style="color:#24292E;">        Pattern p </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Pattern.</span><span style="color:#6F42C1;">compile</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;[aeiou]&quot;</span><span style="color:#24292E;">);     </span></span>
<span class="line"><span style="color:#24292E;">        Matcher m </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> p.</span><span style="color:#6F42C1;">matcher</span><span style="color:#24292E;">(s);     </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// Process the find information as you     </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// perform the replacements:     </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">while</span><span style="color:#24292E;">(m.</span><span style="color:#6F42C1;">find</span><span style="color:#24292E;">())      </span></span>
<span class="line"><span style="color:#24292E;">            m.</span><span style="color:#6F42C1;">appendReplacement</span><span style="color:#24292E;">(sbuf, m.</span><span style="color:#6F42C1;">group</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">toUpperCase</span><span style="color:#24292E;">());     </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// Put in the remainder of the text:     </span></span>
<span class="line"><span style="color:#24292E;">        m.</span><span style="color:#6F42C1;">appendTail</span><span style="color:#24292E;">(sbuf);     </span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(sbuf);</span></span>
<span class="line"><span style="color:#24292E;">    } </span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6A737D;">/* Output: </span></span>
<span class="line"><span style="color:#6A737D;">Here&#39;s a block of text to use as input to </span></span>
<span class="line"><span style="color:#6A737D;">the regular expression matcher. Note that we </span></span>
<span class="line"><span style="color:#6A737D;">first extract the block of text by looking for </span></span>
<span class="line"><span style="color:#6A737D;">the special delimiters, then process the </span></span>
<span class="line"><span style="color:#6A737D;">extracted block. </span></span>
<span class="line"><span style="color:#6A737D;">H(VOWEL1)rE&#39;s A blOck Of tExt tO UsE As InpUt tO </span></span>
<span class="line"><span style="color:#6A737D;">thE rEgUlAr ExprEssIOn mAtchEr. NOtE thAt wE </span></span>
<span class="line"><span style="color:#6A737D;">fIrst ExtrAct thE blOck Of tExt by lOOkIng fOr </span></span>
<span class="line"><span style="color:#6A737D;">thE spEcIAl dElImItErs, thEn prOcEss thE </span></span>
<span class="line"><span style="color:#6A737D;">ExtrActEd blOck. </span></span>
<span class="line"><span style="color:#6A737D;">*/</span></span></code></pre></div><p>此处使用上一章介绍过的 <a href="./17-Files.html"><code>Files</code></a> 类打开并读入文件。<code>Files.lines()</code> 返回一个 <code>Stream</code> 对象，包含读入的所有行，<code>Collectors.joining()</code> 在每一行的结尾追加参数字符序列，最终拼接成一个 <code>String</code> 对象。</p><p><code>mInput</code> 匹配 <code>/*!</code> 和 <code>！*/</code> 之间的所有文字（注意分组的括号）。接下来，将存在两个或两个以上空格的地方，缩减为一个空格，并且删除每行开头部分的所有空格（为了使每一行都达到这个效果，而不仅仅是删除文本开头部分的空格，这里特意开启了多行模式）。这两个替换操作所使用的的 <code>replaceAll()</code> 是 <code>String</code> 对象自带的方法，在这里，使用此方法更方便。注意，因为这两个替换操作都只使用了一次 <code>replaceAll()</code>，所以，与其编译为 <code>Pattern</code>，不如直接使用 <code>String</code> 的 <code>replaceAll()</code> 方法，而且开销也更小些。</p><p><code>replaceFirst()</code> 只对找到的第一个匹配进行替换。此外，<code>replaceFirst()</code> 和 <code>replaceAll()</code> 方法用来替换的只是普通字符串，所以，如果想对这些替换字符串进行某些特殊处理，这两个方法时无法胜任的。如果你想要那么做，就应该使用 <code>appendReplacement()</code> 方法。该方法允许你在执行替换的过程中，操作用来替换的字符串。在这个例子中，先构造了 <code>sbuf</code> 用来保存最终结果，然后用 <code>group()</code> 选择一个组，并对其进行处理，将正则表达式找到的元音字母替换成大些字母。一般情况下，你应该遍历执行所有的替换操作，然后再调用 <code>appendTail()</code> 方法，但是，如果你想模拟 <code>replaceFirst()</code>（或替换n次）的行为，那就只需要执行一次替换，然后调用 <code>appendTail()</code> 方法，将剩余未处理的部分存入 <code>sbuf</code> 即可。</p><p>同时，<code>appendReplacement()</code> 方法还允许你通过 <code>\\$g</code> 直接找到匹配的某个组，这里的 <code>g</code> 就是组号。然而，它只能应付一些简单的处理，无法实现类似前面这个例子中的功能。</p><h3 id="reset" tabindex="-1"><code>reset()</code> <a class="header-anchor" href="#reset" aria-label="Permalink to &quot;\`reset()\`&quot;">​</a></h3><p>通过 <code>reset()</code> 方法，可以将现有的 <code>Matcher</code> 对象应用于一个新的字符序列：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// strings/Resetting.java </span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> java.util.regex.</span><span style="color:#79B8FF;">*</span><span style="color:#E1E4E8;">; </span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Resetting</span><span style="color:#E1E4E8;"> {   </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] </span><span style="color:#FFAB70;">args</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> Exception {     </span></span>
<span class="line"><span style="color:#E1E4E8;">        Matcher m </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Pattern.</span><span style="color:#B392F0;">compile</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;[frb][aiu][gx]&quot;</span><span style="color:#E1E4E8;">)       </span></span>
<span class="line"><span style="color:#E1E4E8;">          .</span><span style="color:#B392F0;">matcher</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;fix the rug with bags&quot;</span><span style="color:#E1E4E8;">);     </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">while</span><span style="color:#E1E4E8;">(m.</span><span style="color:#B392F0;">find</span><span style="color:#E1E4E8;">())       </span></span>
<span class="line"><span style="color:#E1E4E8;">            System.out.</span><span style="color:#B392F0;">print</span><span style="color:#E1E4E8;">(m.</span><span style="color:#B392F0;">group</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot; &quot;</span><span style="color:#E1E4E8;">);     </span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">();     </span></span>
<span class="line"><span style="color:#E1E4E8;">        m.</span><span style="color:#B392F0;">reset</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;fix the rig with rags&quot;</span><span style="color:#E1E4E8;">);     </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">while</span><span style="color:#E1E4E8;">(m.</span><span style="color:#B392F0;">find</span><span style="color:#E1E4E8;">())       </span></span>
<span class="line"><span style="color:#E1E4E8;">            System.out.</span><span style="color:#B392F0;">print</span><span style="color:#E1E4E8;">(m.</span><span style="color:#B392F0;">group</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot; &quot;</span><span style="color:#E1E4E8;">);   </span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span></span>
<span class="line"><span style="color:#E1E4E8;">} </span></span>
<span class="line"><span style="color:#6A737D;">/* Output: </span></span>
<span class="line"><span style="color:#6A737D;">fix rug bag </span></span>
<span class="line"><span style="color:#6A737D;">fix rig rag </span></span>
<span class="line"><span style="color:#6A737D;">*/</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// strings/Resetting.java </span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> java.util.regex.</span><span style="color:#005CC5;">*</span><span style="color:#24292E;">; </span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Resetting</span><span style="color:#24292E;"> {   </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> Exception {     </span></span>
<span class="line"><span style="color:#24292E;">        Matcher m </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Pattern.</span><span style="color:#6F42C1;">compile</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;[frb][aiu][gx]&quot;</span><span style="color:#24292E;">)       </span></span>
<span class="line"><span style="color:#24292E;">          .</span><span style="color:#6F42C1;">matcher</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;fix the rug with bags&quot;</span><span style="color:#24292E;">);     </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">while</span><span style="color:#24292E;">(m.</span><span style="color:#6F42C1;">find</span><span style="color:#24292E;">())       </span></span>
<span class="line"><span style="color:#24292E;">            System.out.</span><span style="color:#6F42C1;">print</span><span style="color:#24292E;">(m.</span><span style="color:#6F42C1;">group</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot; &quot;</span><span style="color:#24292E;">);     </span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">();     </span></span>
<span class="line"><span style="color:#24292E;">        m.</span><span style="color:#6F42C1;">reset</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;fix the rig with rags&quot;</span><span style="color:#24292E;">);     </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">while</span><span style="color:#24292E;">(m.</span><span style="color:#6F42C1;">find</span><span style="color:#24292E;">())       </span></span>
<span class="line"><span style="color:#24292E;">            System.out.</span><span style="color:#6F42C1;">print</span><span style="color:#24292E;">(m.</span><span style="color:#6F42C1;">group</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot; &quot;</span><span style="color:#24292E;">);   </span></span>
<span class="line"><span style="color:#24292E;">    } </span></span>
<span class="line"><span style="color:#24292E;">} </span></span>
<span class="line"><span style="color:#6A737D;">/* Output: </span></span>
<span class="line"><span style="color:#6A737D;">fix rug bag </span></span>
<span class="line"><span style="color:#6A737D;">fix rig rag </span></span>
<span class="line"><span style="color:#6A737D;">*/</span></span></code></pre></div><p>使用不带参数的 <code>reset()</code> 方法，可以将 <code>Matcher</code> 对象重新设置到当前字符序列的起始位置。</p><h3 id="正则表达式与-java-i-o" tabindex="-1">正则表达式与 Java I/O <a class="header-anchor" href="#正则表达式与-java-i-o" aria-label="Permalink to &quot;正则表达式与 Java I/O&quot;">​</a></h3><p>到目前为止，我们看到的例子都是将正则表达式用于静态的字符串。下面的例子将向你演示，如何应用正则表达式在一个文件中进行搜索匹配操作。<code>JGrep.java</code> 的灵感源自于 Unix 上的 <em>grep</em>。它有两个参数：文件名以及要匹配的正则表达式。输出的是每行有匹配的部分以及匹配部分在行中的位置。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// strings/JGrep.java </span></span>
<span class="line"><span style="color:#6A737D;">// A very simple version of the &quot;grep&quot; program </span></span>
<span class="line"><span style="color:#6A737D;">// {java JGrep </span></span>
<span class="line"><span style="color:#6A737D;">// WhitherStringBuilder.java &#39;return|for|String&#39;} </span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> java.util.regex.</span><span style="color:#79B8FF;">*</span><span style="color:#E1E4E8;">; </span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> java.nio.file.</span><span style="color:#79B8FF;">*</span><span style="color:#E1E4E8;">; </span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> java.util.stream.</span><span style="color:#79B8FF;">*</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">JGrep</span><span style="color:#E1E4E8;"> {  </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] </span><span style="color:#FFAB70;">args</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> Exception {    </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(args.length </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">) {      </span></span>
<span class="line"><span style="color:#E1E4E8;">            System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(        </span></span>
<span class="line"><span style="color:#E1E4E8;">              </span><span style="color:#9ECBFF;">&quot;Usage: java JGrep file regex&quot;</span><span style="color:#E1E4E8;">);      </span></span>
<span class="line"><span style="color:#E1E4E8;">            System.</span><span style="color:#B392F0;">exit</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">);   </span></span>
<span class="line"><span style="color:#E1E4E8;">        }    </span></span>
<span class="line"><span style="color:#E1E4E8;">        Pattern p </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Pattern.</span><span style="color:#B392F0;">compile</span><span style="color:#E1E4E8;">(args[</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">]);    </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// Iterate through the lines of the input file:    </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> index </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;    </span></span>
<span class="line"><span style="color:#E1E4E8;">        Matcher m </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> p.</span><span style="color:#B392F0;">matcher</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;&quot;</span><span style="color:#E1E4E8;">);    </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;">(String line</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> Files.</span><span style="color:#B392F0;">readAllLines</span><span style="color:#E1E4E8;">(Paths.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(args[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">]))) {      </span></span>
<span class="line"><span style="color:#E1E4E8;">            m.</span><span style="color:#B392F0;">reset</span><span style="color:#E1E4E8;">(line);      </span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">while</span><span style="color:#E1E4E8;">(m.</span><span style="color:#B392F0;">find</span><span style="color:#E1E4E8;">())        </span></span>
<span class="line"><span style="color:#E1E4E8;">                System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(index</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;: &quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;">          </span></span>
<span class="line"><span style="color:#E1E4E8;">                  m.</span><span style="color:#B392F0;">group</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;: &quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> m.</span><span style="color:#B392F0;">start</span><span style="color:#E1E4E8;">());    </span></span>
<span class="line"><span style="color:#E1E4E8;">        }  </span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span></span>
<span class="line"><span style="color:#E1E4E8;">} </span></span>
<span class="line"><span style="color:#6A737D;">/* Output: </span></span>
<span class="line"><span style="color:#6A737D;">0: for: 4 </span></span>
<span class="line"><span style="color:#6A737D;">1: for: 4 </span></span>
<span class="line"><span style="color:#6A737D;">*/</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// strings/JGrep.java </span></span>
<span class="line"><span style="color:#6A737D;">// A very simple version of the &quot;grep&quot; program </span></span>
<span class="line"><span style="color:#6A737D;">// {java JGrep </span></span>
<span class="line"><span style="color:#6A737D;">// WhitherStringBuilder.java &#39;return|for|String&#39;} </span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> java.util.regex.</span><span style="color:#005CC5;">*</span><span style="color:#24292E;">; </span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> java.nio.file.</span><span style="color:#005CC5;">*</span><span style="color:#24292E;">; </span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> java.util.stream.</span><span style="color:#005CC5;">*</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">JGrep</span><span style="color:#24292E;"> {  </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> Exception {    </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(args.length </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">) {      </span></span>
<span class="line"><span style="color:#24292E;">            System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(        </span></span>
<span class="line"><span style="color:#24292E;">              </span><span style="color:#032F62;">&quot;Usage: java JGrep file regex&quot;</span><span style="color:#24292E;">);      </span></span>
<span class="line"><span style="color:#24292E;">            System.</span><span style="color:#6F42C1;">exit</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">);   </span></span>
<span class="line"><span style="color:#24292E;">        }    </span></span>
<span class="line"><span style="color:#24292E;">        Pattern p </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Pattern.</span><span style="color:#6F42C1;">compile</span><span style="color:#24292E;">(args[</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">]);    </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// Iterate through the lines of the input file:    </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> index </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;    </span></span>
<span class="line"><span style="color:#24292E;">        Matcher m </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> p.</span><span style="color:#6F42C1;">matcher</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;&quot;</span><span style="color:#24292E;">);    </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">for</span><span style="color:#24292E;">(String line</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> Files.</span><span style="color:#6F42C1;">readAllLines</span><span style="color:#24292E;">(Paths.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(args[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">]))) {      </span></span>
<span class="line"><span style="color:#24292E;">            m.</span><span style="color:#6F42C1;">reset</span><span style="color:#24292E;">(line);      </span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">while</span><span style="color:#24292E;">(m.</span><span style="color:#6F42C1;">find</span><span style="color:#24292E;">())        </span></span>
<span class="line"><span style="color:#24292E;">                System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(index</span><span style="color:#D73A49;">++</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;: &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;">          </span></span>
<span class="line"><span style="color:#24292E;">                  m.</span><span style="color:#6F42C1;">group</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;: &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> m.</span><span style="color:#6F42C1;">start</span><span style="color:#24292E;">());    </span></span>
<span class="line"><span style="color:#24292E;">        }  </span></span>
<span class="line"><span style="color:#24292E;">    } </span></span>
<span class="line"><span style="color:#24292E;">} </span></span>
<span class="line"><span style="color:#6A737D;">/* Output: </span></span>
<span class="line"><span style="color:#6A737D;">0: for: 4 </span></span>
<span class="line"><span style="color:#6A737D;">1: for: 4 </span></span>
<span class="line"><span style="color:#6A737D;">*/</span></span></code></pre></div><p><code>Files.readAllLines()</code> 返回一个 <code>List&lt;String&gt;</code> 对象，这意味着可以用 <em>for-in</em> 进行遍历。虽然可以在 <code>for</code> 循环内部创建一个新的 <code>Matcher</code> 对象，但是，在循环体外创建一个空的 <code>Matcher</code> 对象，然后用 <code>reset()</code> 方法每次为 <code>Matcher</code> 加载一行输入，这种处理会有一定的性能优化。最后用 <code>find()</code> 搜索结果。</p><p>这里读入的测试参数是 <code>JGrep.java</code> 文件，然后搜索以 <code>[Ssct]</code> 开头的单词。</p><p>如果想要更深入地学习正则表达式，你可以阅读 Jeffrey E. F. Friedl 的《精通正则表达式（第2版）》。网络上也有很多正则表达式的介绍，你还可以从 Perl 和 Python 等其他语言的文档中找到有用的信息。</p><h2 id="扫描输入" tabindex="-1">扫描输入 <a class="header-anchor" href="#扫描输入" aria-label="Permalink to &quot;扫描输入&quot;">​</a></h2><p>到目前为止，从文件或标准输入读取数据还是一件相当痛苦的事情。一般的解决办法就是读入一行文本，对其进行分词，然后使用 <code>Integer</code>、<code>Double</code> 等类的各种解析方法来解析数据：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// strings/SimpleRead.java </span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> java.io.</span><span style="color:#79B8FF;">*</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SimpleRead</span><span style="color:#E1E4E8;"> {  </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> BufferedReader input </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">    </span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">BufferedReader</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">StringReader</span><span style="color:#E1E4E8;">(    </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">&quot;Sir Robin of Camelot</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">22 1.61803&quot;</span><span style="color:#E1E4E8;">));  </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] </span><span style="color:#FFAB70;">args</span><span style="color:#E1E4E8;">) {    </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> {      </span></span>
<span class="line"><span style="color:#E1E4E8;">            System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;What is your name?&quot;</span><span style="color:#E1E4E8;">);      </span></span>
<span class="line"><span style="color:#E1E4E8;">            String name </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> input.</span><span style="color:#B392F0;">readLine</span><span style="color:#E1E4E8;">();      </span></span>
<span class="line"><span style="color:#E1E4E8;">            System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(name);      </span></span>
<span class="line"><span style="color:#E1E4E8;">            System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;How old are you? &quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;">        </span></span>
<span class="line"><span style="color:#E1E4E8;">              </span><span style="color:#9ECBFF;">&quot;What is your favorite double?&quot;</span><span style="color:#E1E4E8;">);      </span></span>
<span class="line"><span style="color:#E1E4E8;">            System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;(input: &lt;age&gt; &lt;double&gt;)&quot;</span><span style="color:#E1E4E8;">);      </span></span>
<span class="line"><span style="color:#E1E4E8;">            String numbers </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> input.</span><span style="color:#B392F0;">readLine</span><span style="color:#E1E4E8;">();      </span></span>
<span class="line"><span style="color:#E1E4E8;">            System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(numbers);      </span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] numArray </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> numbers.</span><span style="color:#B392F0;">split</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot; &quot;</span><span style="color:#E1E4E8;">);      </span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> age </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Integer.</span><span style="color:#B392F0;">parseInt</span><span style="color:#E1E4E8;">(numArray[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">]);      </span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">double</span><span style="color:#E1E4E8;"> favorite </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Double.</span><span style="color:#B392F0;">parseDouble</span><span style="color:#E1E4E8;">(numArray[</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">]);      </span></span>
<span class="line"><span style="color:#E1E4E8;">            System.out.</span><span style="color:#B392F0;">format</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Hi %s.%n&quot;</span><span style="color:#E1E4E8;">, name);      </span></span>
<span class="line"><span style="color:#E1E4E8;">            System.out.</span><span style="color:#B392F0;">format</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;In 5 years you will be %d.%n&quot;</span><span style="color:#E1E4E8;">, age </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">);      </span></span>
<span class="line"><span style="color:#E1E4E8;">            System.out.</span><span style="color:#B392F0;">format</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;My favorite double is %f.&quot;</span><span style="color:#E1E4E8;">, favorite </span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">);    </span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;">(IOException </span><span style="color:#FFAB70;">e</span><span style="color:#E1E4E8;">) {      </span></span>
<span class="line"><span style="color:#E1E4E8;">            System.err.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;I/O exception&quot;</span><span style="color:#E1E4E8;">);    </span></span>
<span class="line"><span style="color:#E1E4E8;">        }  </span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#6A737D;">/* Output: </span></span>
<span class="line"><span style="color:#6A737D;">What is your name? </span></span>
<span class="line"><span style="color:#6A737D;">Sir Robin of Camelot </span></span>
<span class="line"><span style="color:#6A737D;">How old are you? What is your favorite double? </span></span>
<span class="line"><span style="color:#6A737D;">(input: &lt;age&gt; &lt;double&gt;) </span></span>
<span class="line"><span style="color:#6A737D;">22 1.61803</span></span>
<span class="line"><span style="color:#6A737D;">Hi Sir Robin of Camelot. </span></span>
<span class="line"><span style="color:#6A737D;">In 5 years you will be 27. </span></span>
<span class="line"><span style="color:#6A737D;">My favorite double is 0.809015. </span></span>
<span class="line"><span style="color:#6A737D;">*/</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// strings/SimpleRead.java </span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> java.io.</span><span style="color:#005CC5;">*</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SimpleRead</span><span style="color:#24292E;"> {  </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> BufferedReader input </span><span style="color:#D73A49;">=</span><span style="color:#24292E;">    </span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">BufferedReader</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">StringReader</span><span style="color:#24292E;">(    </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&quot;Sir Robin of Camelot</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">22 1.61803&quot;</span><span style="color:#24292E;">));  </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) {    </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {      </span></span>
<span class="line"><span style="color:#24292E;">            System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;What is your name?&quot;</span><span style="color:#24292E;">);      </span></span>
<span class="line"><span style="color:#24292E;">            String name </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> input.</span><span style="color:#6F42C1;">readLine</span><span style="color:#24292E;">();      </span></span>
<span class="line"><span style="color:#24292E;">            System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(name);      </span></span>
<span class="line"><span style="color:#24292E;">            System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;How old are you? &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;">        </span></span>
<span class="line"><span style="color:#24292E;">              </span><span style="color:#032F62;">&quot;What is your favorite double?&quot;</span><span style="color:#24292E;">);      </span></span>
<span class="line"><span style="color:#24292E;">            System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;(input: &lt;age&gt; &lt;double&gt;)&quot;</span><span style="color:#24292E;">);      </span></span>
<span class="line"><span style="color:#24292E;">            String numbers </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> input.</span><span style="color:#6F42C1;">readLine</span><span style="color:#24292E;">();      </span></span>
<span class="line"><span style="color:#24292E;">            System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(numbers);      </span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] numArray </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> numbers.</span><span style="color:#6F42C1;">split</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot; &quot;</span><span style="color:#24292E;">);      </span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> age </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Integer.</span><span style="color:#6F42C1;">parseInt</span><span style="color:#24292E;">(numArray[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">]);      </span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">double</span><span style="color:#24292E;"> favorite </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Double.</span><span style="color:#6F42C1;">parseDouble</span><span style="color:#24292E;">(numArray[</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">]);      </span></span>
<span class="line"><span style="color:#24292E;">            System.out.</span><span style="color:#6F42C1;">format</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Hi %s.%n&quot;</span><span style="color:#24292E;">, name);      </span></span>
<span class="line"><span style="color:#24292E;">            System.out.</span><span style="color:#6F42C1;">format</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;In 5 years you will be %d.%n&quot;</span><span style="color:#24292E;">, age </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">5</span><span style="color:#24292E;">);      </span></span>
<span class="line"><span style="color:#24292E;">            System.out.</span><span style="color:#6F42C1;">format</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;My favorite double is %f.&quot;</span><span style="color:#24292E;">, favorite </span><span style="color:#D73A49;">/</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">);    </span></span>
<span class="line"><span style="color:#24292E;">        } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;">(IOException </span><span style="color:#E36209;">e</span><span style="color:#24292E;">) {      </span></span>
<span class="line"><span style="color:#24292E;">            System.err.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;I/O exception&quot;</span><span style="color:#24292E;">);    </span></span>
<span class="line"><span style="color:#24292E;">        }  </span></span>
<span class="line"><span style="color:#24292E;">    } </span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6A737D;">/* Output: </span></span>
<span class="line"><span style="color:#6A737D;">What is your name? </span></span>
<span class="line"><span style="color:#6A737D;">Sir Robin of Camelot </span></span>
<span class="line"><span style="color:#6A737D;">How old are you? What is your favorite double? </span></span>
<span class="line"><span style="color:#6A737D;">(input: &lt;age&gt; &lt;double&gt;) </span></span>
<span class="line"><span style="color:#6A737D;">22 1.61803</span></span>
<span class="line"><span style="color:#6A737D;">Hi Sir Robin of Camelot. </span></span>
<span class="line"><span style="color:#6A737D;">In 5 years you will be 27. </span></span>
<span class="line"><span style="color:#6A737D;">My favorite double is 0.809015. </span></span>
<span class="line"><span style="color:#6A737D;">*/</span></span></code></pre></div><p><code>input</code> 字段使用的类来自 <code>java.io</code>，<a href="./Appendix-IO-Streams.html">附录:流式 I/O</a> 详细介绍了相关内容。<code>StringReader</code> 将 <code>String</code> 转化为可读的流对象，然后用这个对象来构造 <code>BufferedReader</code> 对象，因为我们要使用 <code>BufferedReader</code> 的 <code>readLine()</code> 方法。最终，我们可以使用 <code>input</code> 对象一次读取一行文本，就像从控制台读入标准输入一样。</p><p><code>readLine()</code> 方法将一行输入转为 <code>String</code> 对象。如果每一行数据正好对应一个输入值，那这个方法也还可行。但是，如果两个输入值在同一行中，事情就不好办了，我们必须分解这个行，才能分别解析所需的输入值。在这个例子中，分解的操作发生在创建 <code>numArray</code>时。</p><p>终于，Java SE5 新增了 <code>Scanner</code> 类，它可以大大减轻扫描输入的工作负担：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// strings/BetterRead.java </span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> java.util.</span><span style="color:#79B8FF;">*</span><span style="color:#E1E4E8;">; </span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">BetterRead</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] </span><span style="color:#FFAB70;">args</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    Scanner stdin </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Scanner</span><span style="color:#E1E4E8;">(SimpleRead.input);</span></span>
<span class="line"><span style="color:#E1E4E8;">    System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;What is your name?&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    String name </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> stdin.</span><span style="color:#B392F0;">nextLine</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(name);</span></span>
<span class="line"><span style="color:#E1E4E8;">    System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#9ECBFF;">&quot;How old are you? What is your favorite double?&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;(input: &lt;age&gt; &lt;double&gt;)&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> age </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> stdin.</span><span style="color:#B392F0;">nextInt</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">double</span><span style="color:#E1E4E8;"> favorite </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> stdin.</span><span style="color:#B392F0;">nextDouble</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(age);</span></span>
<span class="line"><span style="color:#E1E4E8;">    System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(favorite);</span></span>
<span class="line"><span style="color:#E1E4E8;">    System.out.</span><span style="color:#B392F0;">format</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Hi %s.%n&quot;</span><span style="color:#E1E4E8;">, name);</span></span>
<span class="line"><span style="color:#E1E4E8;">    System.out.</span><span style="color:#B392F0;">format</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;In 5 years you will be %d.%n&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      age </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    System.out.</span><span style="color:#B392F0;">format</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;My favorite double is %f.&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      favorite </span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#6A737D;">/* Output: </span></span>
<span class="line"><span style="color:#6A737D;">What is your name? </span></span>
<span class="line"><span style="color:#6A737D;">Sir Robin of Camelot </span></span>
<span class="line"><span style="color:#6A737D;">How old are you? What is your favorite double? </span></span>
<span class="line"><span style="color:#6A737D;">(input: &lt;age&gt; &lt;double&gt;) </span></span>
<span class="line"><span style="color:#6A737D;">22 </span></span>
<span class="line"><span style="color:#6A737D;">1.61803 </span></span>
<span class="line"><span style="color:#6A737D;">Hi Sir Robin of Camelot. </span></span>
<span class="line"><span style="color:#6A737D;">In 5 years you will be 27. </span></span>
<span class="line"><span style="color:#6A737D;">My favorite double is 0.809015. </span></span>
<span class="line"><span style="color:#6A737D;">*/</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// strings/BetterRead.java </span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> java.util.</span><span style="color:#005CC5;">*</span><span style="color:#24292E;">; </span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">BetterRead</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    Scanner stdin </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Scanner</span><span style="color:#24292E;">(SimpleRead.input);</span></span>
<span class="line"><span style="color:#24292E;">    System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;What is your name?&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    String name </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> stdin.</span><span style="color:#6F42C1;">nextLine</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(name);</span></span>
<span class="line"><span style="color:#24292E;">    System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#032F62;">&quot;How old are you? What is your favorite double?&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;(input: &lt;age&gt; &lt;double&gt;)&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> age </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> stdin.</span><span style="color:#6F42C1;">nextInt</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">double</span><span style="color:#24292E;"> favorite </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> stdin.</span><span style="color:#6F42C1;">nextDouble</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(age);</span></span>
<span class="line"><span style="color:#24292E;">    System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(favorite);</span></span>
<span class="line"><span style="color:#24292E;">    System.out.</span><span style="color:#6F42C1;">format</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Hi %s.%n&quot;</span><span style="color:#24292E;">, name);</span></span>
<span class="line"><span style="color:#24292E;">    System.out.</span><span style="color:#6F42C1;">format</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;In 5 years you will be %d.%n&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      age </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">5</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    System.out.</span><span style="color:#6F42C1;">format</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;My favorite double is %f.&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      favorite </span><span style="color:#D73A49;">/</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6A737D;">/* Output: </span></span>
<span class="line"><span style="color:#6A737D;">What is your name? </span></span>
<span class="line"><span style="color:#6A737D;">Sir Robin of Camelot </span></span>
<span class="line"><span style="color:#6A737D;">How old are you? What is your favorite double? </span></span>
<span class="line"><span style="color:#6A737D;">(input: &lt;age&gt; &lt;double&gt;) </span></span>
<span class="line"><span style="color:#6A737D;">22 </span></span>
<span class="line"><span style="color:#6A737D;">1.61803 </span></span>
<span class="line"><span style="color:#6A737D;">Hi Sir Robin of Camelot. </span></span>
<span class="line"><span style="color:#6A737D;">In 5 years you will be 27. </span></span>
<span class="line"><span style="color:#6A737D;">My favorite double is 0.809015. </span></span>
<span class="line"><span style="color:#6A737D;">*/</span></span></code></pre></div><p><code>Scanner</code> 的构造器可以接收任意类型的输入对象，包括 <code>File</code>、<code>InputStream</code>、<code>String</code> 或者像此例中的<code>Readable</code> 实现类。<code>Readable</code> 是 Java SE5 中新加入的一个接口，表示“具有 <code>read()</code> 方法的某种东西”。上一个例子中的 <code>BufferedReader</code> 也归于这一类。</p><p>有了 <code>Scanner</code>，所有的输入、分词、以及解析的操作都隐藏在不同类型的 <code>next</code> 方法中。普通的 <code>next()</code> 方法返回下一个 <code>String</code>。所有的基本类型（除 <code>char</code> 之外）都有对应的 <code>next</code> 方法，包括 <code>BigDecimal</code> 和 <code>BigInteger</code>。所有的 next 方法，只有在找到一个完整的分词之后才会返回。<code>Scanner</code> 还有相应的 <code>hasNext</code> 方法，用以判断下一个输入分词是否是所需的类型，如果是则返回 <code>true</code>。</p><p>在 <code>BetterRead.java</code> 中没有用 <code>try</code> 区块捕获<code>IOException</code>。因为，<code>Scanner</code> 有一个假设，在输入结束时会抛出 <code>IOException</code>，所以 <code>Scanner</code> 会把 <code>IOException</code> 吞掉。不过，通过 <code>ioException()</code> 方法，你可以找到最近发生的异常，因此，你可以在必要时检查它。</p><h3 id="scanner-分隔符" tabindex="-1"><code>Scanner</code> 分隔符 <a class="header-anchor" href="#scanner-分隔符" aria-label="Permalink to &quot;\`Scanner\` 分隔符&quot;">​</a></h3><p>默认情况下，<code>Scanner</code> 根据空白字符对输入进行分词，但是你可以用正则表达式指定自己所需的分隔符：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// strings/ScannerDelimiter.java </span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> java.util.</span><span style="color:#79B8FF;">*</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ScannerDelimiter</span><span style="color:#E1E4E8;"> {  </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] </span><span style="color:#FFAB70;">args</span><span style="color:#E1E4E8;">) {    </span></span>
<span class="line"><span style="color:#E1E4E8;">        Scanner scanner </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Scanner</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;12, 42, 78, 99, 42&quot;</span><span style="color:#E1E4E8;">);    </span></span>
<span class="line"><span style="color:#E1E4E8;">        scanner.</span><span style="color:#B392F0;">useDelimiter</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#79B8FF;">\\\\</span><span style="color:#9ECBFF;">s*,</span><span style="color:#79B8FF;">\\\\</span><span style="color:#9ECBFF;">s*&quot;</span><span style="color:#E1E4E8;">);    </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">while</span><span style="color:#E1E4E8;">(scanner.</span><span style="color:#B392F0;">hasNextInt</span><span style="color:#E1E4E8;">())    </span></span>
<span class="line"><span style="color:#E1E4E8;">            System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(scanner.</span><span style="color:#B392F0;">nextInt</span><span style="color:#E1E4E8;">());  </span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#6A737D;">/* Output: </span></span>
<span class="line"><span style="color:#6A737D;">12 </span></span>
<span class="line"><span style="color:#6A737D;">42 </span></span>
<span class="line"><span style="color:#6A737D;">78 </span></span>
<span class="line"><span style="color:#6A737D;">99 </span></span>
<span class="line"><span style="color:#6A737D;">42 </span></span>
<span class="line"><span style="color:#6A737D;">*/</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// strings/ScannerDelimiter.java </span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> java.util.</span><span style="color:#005CC5;">*</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ScannerDelimiter</span><span style="color:#24292E;"> {  </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) {    </span></span>
<span class="line"><span style="color:#24292E;">        Scanner scanner </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Scanner</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;12, 42, 78, 99, 42&quot;</span><span style="color:#24292E;">);    </span></span>
<span class="line"><span style="color:#24292E;">        scanner.</span><span style="color:#6F42C1;">useDelimiter</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;</span><span style="color:#005CC5;">\\\\</span><span style="color:#032F62;">s*,</span><span style="color:#005CC5;">\\\\</span><span style="color:#032F62;">s*&quot;</span><span style="color:#24292E;">);    </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">while</span><span style="color:#24292E;">(scanner.</span><span style="color:#6F42C1;">hasNextInt</span><span style="color:#24292E;">())    </span></span>
<span class="line"><span style="color:#24292E;">            System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(scanner.</span><span style="color:#6F42C1;">nextInt</span><span style="color:#24292E;">());  </span></span>
<span class="line"><span style="color:#24292E;">    } </span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6A737D;">/* Output: </span></span>
<span class="line"><span style="color:#6A737D;">12 </span></span>
<span class="line"><span style="color:#6A737D;">42 </span></span>
<span class="line"><span style="color:#6A737D;">78 </span></span>
<span class="line"><span style="color:#6A737D;">99 </span></span>
<span class="line"><span style="color:#6A737D;">42 </span></span>
<span class="line"><span style="color:#6A737D;">*/</span></span></code></pre></div><p>这个例子使用逗号（包括逗号前后任意的空白字符）作为分隔符，同样的技术也可以用来读取逗号分隔的文件。我们可以用 <code>useDelimiter()</code> 来设置分隔符，同时，还有一个 <code>delimiter()</code> 方法，用来返回当前正在作为分隔符使用的 <code>Pattern</code> 对象。</p><h3 id="用正则表达式扫描" tabindex="-1">用正则表达式扫描 <a class="header-anchor" href="#用正则表达式扫描" aria-label="Permalink to &quot;用正则表达式扫描&quot;">​</a></h3><p>除了能够扫描基本类型之外，你还可以使用自定义的正则表达式进行扫描，这在扫描复杂数据时非常有用。下面的例子将扫描一个防火墙日志文件中的威胁数据：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark has-diff vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// strings/ThreatAnalyzer.java </span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> java.util.regex.</span><span style="color:#79B8FF;">*</span><span style="color:#E1E4E8;">; </span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> java.util.</span><span style="color:#79B8FF;">*</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ThreatAnalyzer</span><span style="color:#E1E4E8;"> { </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> String threatData </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">    </span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#9ECBFF;">&quot;58.27.82.161@08/10/2015</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;">   </span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#9ECBFF;">&quot;204.45.234.40@08/11/2015</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;">    </span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#9ECBFF;">&quot;58.27.82.161@08/11/2015</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;">    </span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#9ECBFF;">&quot;58.27.82.161@08/12/2015</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;">    </span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#9ECBFF;">&quot;58.27.82.161@08/12/2015</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#9ECBFF;">&quot;[Next log section with different data format]&quot;</span><span style="color:#E1E4E8;">;  </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] </span><span style="color:#FFAB70;">args</span><span style="color:#E1E4E8;">) { </span></span>
<span class="line"><span style="color:#E1E4E8;">        Scanner scanner </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Scanner</span><span style="color:#E1E4E8;">(threatData);    </span></span>
<span class="line"><span style="color:#E1E4E8;">        String pattern </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;(</span><span style="color:#79B8FF;">\\\\</span><span style="color:#9ECBFF;">d+[.]</span><span style="color:#79B8FF;">\\\\</span><span style="color:#9ECBFF;">d+[.]</span><span style="color:#79B8FF;">\\\\</span><span style="color:#9ECBFF;">d+[.]</span><span style="color:#79B8FF;">\\\\</span><span style="color:#9ECBFF;">d+)@&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;">      </span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#9ECBFF;">&quot;(</span><span style="color:#79B8FF;">\\\\</span><span style="color:#9ECBFF;">d{2}/</span><span style="color:#79B8FF;">\\\\</span><span style="color:#9ECBFF;">d{2}/</span><span style="color:#79B8FF;">\\\\</span><span style="color:#9ECBFF;">d{4})&quot;</span><span style="color:#E1E4E8;">;    </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">while</span><span style="color:#E1E4E8;">(scanner.</span><span style="color:#B392F0;">hasNext</span><span style="color:#E1E4E8;">(pattern)) {      </span></span>
<span class="line"><span style="color:#E1E4E8;">            scanner.</span><span style="color:#B392F0;">next</span><span style="color:#E1E4E8;">(pattern);      </span></span>
<span class="line"><span style="color:#E1E4E8;">            MatchResult match </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> scanner.</span><span style="color:#B392F0;">match</span><span style="color:#E1E4E8;">();      </span></span>
<span class="line"><span style="color:#E1E4E8;">            String ip </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> match.</span><span style="color:#B392F0;">group</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">);      </span></span>
<span class="line"><span style="color:#E1E4E8;">            String date </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> match.</span><span style="color:#B392F0;">group</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">);      </span></span>
<span class="line"><span style="color:#E1E4E8;">            System.out.</span><span style="color:#B392F0;">format</span><span style="color:#E1E4E8;">(        </span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#9ECBFF;">&quot;Threat on %s from %s%n&quot;</span><span style="color:#E1E4E8;">, date,ip);    </span></span>
<span class="line"><span style="color:#E1E4E8;">        }  </span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span></span>
<span class="line"><span style="color:#E1E4E8;">} </span></span>
<span class="line"><span style="color:#6A737D;">/* Output: </span></span>
<span class="line"><span style="color:#6A737D;">Threat on 08/10/2015 from 58.27.82.161 </span></span>
<span class="line"><span style="color:#6A737D;">Threat on 08/11/2015 from 204.45.234.40 </span></span>
<span class="line"><span style="color:#6A737D;">Threat on 08/11/2015 from 58.27.82.161 </span></span>
<span class="line"><span style="color:#6A737D;">Threat on 08/12/2015 from 58.27.82.161 </span></span>
<span class="line"><span style="color:#6A737D;">Threat on 08/12/2015 from 58.27.82.161 </span></span>
<span class="line"><span style="color:#6A737D;">*/</span></span></code></pre><pre class="shiki github-light has-diff vp-code-light"><code><span class="line"><span style="color:#6A737D;">// strings/ThreatAnalyzer.java </span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> java.util.regex.</span><span style="color:#005CC5;">*</span><span style="color:#24292E;">; </span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> java.util.</span><span style="color:#005CC5;">*</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ThreatAnalyzer</span><span style="color:#24292E;"> { </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> String threatData </span><span style="color:#D73A49;">=</span><span style="color:#24292E;">    </span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#032F62;">&quot;58.27.82.161@08/10/2015</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;">   </span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#032F62;">&quot;204.45.234.40@08/11/2015</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;">    </span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#032F62;">&quot;58.27.82.161@08/11/2015</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;">    </span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#032F62;">&quot;58.27.82.161@08/12/2015</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;">    </span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#032F62;">&quot;58.27.82.161@08/12/2015</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#032F62;">&quot;[Next log section with different data format]&quot;</span><span style="color:#24292E;">;  </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) { </span></span>
<span class="line"><span style="color:#24292E;">        Scanner scanner </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Scanner</span><span style="color:#24292E;">(threatData);    </span></span>
<span class="line"><span style="color:#24292E;">        String pattern </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;(</span><span style="color:#005CC5;">\\\\</span><span style="color:#032F62;">d+[.]</span><span style="color:#005CC5;">\\\\</span><span style="color:#032F62;">d+[.]</span><span style="color:#005CC5;">\\\\</span><span style="color:#032F62;">d+[.]</span><span style="color:#005CC5;">\\\\</span><span style="color:#032F62;">d+)@&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;">      </span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#032F62;">&quot;(</span><span style="color:#005CC5;">\\\\</span><span style="color:#032F62;">d{2}/</span><span style="color:#005CC5;">\\\\</span><span style="color:#032F62;">d{2}/</span><span style="color:#005CC5;">\\\\</span><span style="color:#032F62;">d{4})&quot;</span><span style="color:#24292E;">;    </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">while</span><span style="color:#24292E;">(scanner.</span><span style="color:#6F42C1;">hasNext</span><span style="color:#24292E;">(pattern)) {      </span></span>
<span class="line"><span style="color:#24292E;">            scanner.</span><span style="color:#6F42C1;">next</span><span style="color:#24292E;">(pattern);      </span></span>
<span class="line"><span style="color:#24292E;">            MatchResult match </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> scanner.</span><span style="color:#6F42C1;">match</span><span style="color:#24292E;">();      </span></span>
<span class="line"><span style="color:#24292E;">            String ip </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> match.</span><span style="color:#6F42C1;">group</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">);      </span></span>
<span class="line"><span style="color:#24292E;">            String date </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> match.</span><span style="color:#6F42C1;">group</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">);      </span></span>
<span class="line"><span style="color:#24292E;">            System.out.</span><span style="color:#6F42C1;">format</span><span style="color:#24292E;">(        </span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#032F62;">&quot;Threat on %s from %s%n&quot;</span><span style="color:#24292E;">, date,ip);    </span></span>
<span class="line"><span style="color:#24292E;">        }  </span></span>
<span class="line"><span style="color:#24292E;">    } </span></span>
<span class="line"><span style="color:#24292E;">} </span></span>
<span class="line"><span style="color:#6A737D;">/* Output: </span></span>
<span class="line"><span style="color:#6A737D;">Threat on 08/10/2015 from 58.27.82.161 </span></span>
<span class="line"><span style="color:#6A737D;">Threat on 08/11/2015 from 204.45.234.40 </span></span>
<span class="line"><span style="color:#6A737D;">Threat on 08/11/2015 from 58.27.82.161 </span></span>
<span class="line"><span style="color:#6A737D;">Threat on 08/12/2015 from 58.27.82.161 </span></span>
<span class="line"><span style="color:#6A737D;">Threat on 08/12/2015 from 58.27.82.161 </span></span>
<span class="line"><span style="color:#6A737D;">*/</span></span></code></pre></div><p>当 <code>next()</code> 方法配合指定的正则表达式使用时，将找到下一个匹配该模式的输入部分，调用 <code>match()</code> 方法就可以获得匹配的结果。如上所示，它的工作方式与之前看到的正则表达式匹配相似。</p><p>在配合正则表达式使用扫描时，有一点需要注意：它仅仅针对下一个输入分词进行匹配，如果你的正则表达式中含有分隔符，那永远不可能匹配成功。</p><h2 id="stringtokenizer类" tabindex="-1">StringTokenizer类 <a class="header-anchor" href="#stringtokenizer类" aria-label="Permalink to &quot;StringTokenizer类&quot;">​</a></h2><p>在 Java 引入正则表达式（J2SE1.4）和 <code>Scanner</code> 类（Java SE5）之前，分割字符串的唯一方法是使用 <code>StringTokenizer</code> 来分词。不过，现在有了正则表达式和 <code>Scanner</code>，我们可以使用更加简单、更加简洁的方式来完成同样的工作了。下面的例子中，我们将 <code>StringTokenizer</code> 与另外两种技术简单地做了一个比较：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// strings/ReplacingStringTokenizer.java </span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> java.util.</span><span style="color:#79B8FF;">*</span><span style="color:#E1E4E8;">; </span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ReplacingStringTokenizer</span><span style="color:#E1E4E8;"> {   </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] </span><span style="color:#FFAB70;">args</span><span style="color:#E1E4E8;">) {     </span></span>
<span class="line"><span style="color:#E1E4E8;">        String input </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">       </span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#9ECBFF;">&quot;But I&#39;m not dead yet! I feel happy!&quot;</span><span style="color:#E1E4E8;">;     </span></span>
<span class="line"><span style="color:#E1E4E8;">        StringTokenizer stoke </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">StringTokenizer</span><span style="color:#E1E4E8;">(input);     </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">while</span><span style="color:#E1E4E8;">(stoke.</span><span style="color:#B392F0;">hasMoreElements</span><span style="color:#E1E4E8;">())       </span></span>
<span class="line"><span style="color:#E1E4E8;">            System.out.</span><span style="color:#B392F0;">print</span><span style="color:#E1E4E8;">(stoke.</span><span style="color:#B392F0;">nextToken</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot; &quot;</span><span style="color:#E1E4E8;">);     </span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(); </span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(Arrays.</span><span style="color:#B392F0;">toString</span><span style="color:#E1E4E8;">(input.</span><span style="color:#B392F0;">split</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot; &quot;</span><span style="color:#E1E4E8;">)));     </span></span>
<span class="line"><span style="color:#E1E4E8;">        Scanner scanner </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Scanner</span><span style="color:#E1E4E8;">(input);     </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">while</span><span style="color:#E1E4E8;">(scanner.</span><span style="color:#B392F0;">hasNext</span><span style="color:#E1E4E8;">())       </span></span>
<span class="line"><span style="color:#E1E4E8;">            System.out.</span><span style="color:#B392F0;">print</span><span style="color:#E1E4E8;">(scanner.</span><span style="color:#B392F0;">next</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot; &quot;</span><span style="color:#E1E4E8;">);   </span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">} </span></span>
<span class="line"><span style="color:#6A737D;">/* Output: </span></span>
<span class="line"><span style="color:#6A737D;">But I&#39;m not dead yet! I feel happy! </span></span>
<span class="line"><span style="color:#6A737D;">[But, I&#39;m, not, dead, yet!, I, feel, happy!] </span></span>
<span class="line"><span style="color:#6A737D;">But I&#39;m not dead yet! I feel happy! </span></span>
<span class="line"><span style="color:#6A737D;">*/</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// strings/ReplacingStringTokenizer.java </span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> java.util.</span><span style="color:#005CC5;">*</span><span style="color:#24292E;">; </span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ReplacingStringTokenizer</span><span style="color:#24292E;"> {   </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) {     </span></span>
<span class="line"><span style="color:#24292E;">        String input </span><span style="color:#D73A49;">=</span><span style="color:#24292E;">       </span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#032F62;">&quot;But I&#39;m not dead yet! I feel happy!&quot;</span><span style="color:#24292E;">;     </span></span>
<span class="line"><span style="color:#24292E;">        StringTokenizer stoke </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">StringTokenizer</span><span style="color:#24292E;">(input);     </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">while</span><span style="color:#24292E;">(stoke.</span><span style="color:#6F42C1;">hasMoreElements</span><span style="color:#24292E;">())       </span></span>
<span class="line"><span style="color:#24292E;">            System.out.</span><span style="color:#6F42C1;">print</span><span style="color:#24292E;">(stoke.</span><span style="color:#6F42C1;">nextToken</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot; &quot;</span><span style="color:#24292E;">);     </span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(); </span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(Arrays.</span><span style="color:#6F42C1;">toString</span><span style="color:#24292E;">(input.</span><span style="color:#6F42C1;">split</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot; &quot;</span><span style="color:#24292E;">)));     </span></span>
<span class="line"><span style="color:#24292E;">        Scanner scanner </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Scanner</span><span style="color:#24292E;">(input);     </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">while</span><span style="color:#24292E;">(scanner.</span><span style="color:#6F42C1;">hasNext</span><span style="color:#24292E;">())       </span></span>
<span class="line"><span style="color:#24292E;">            System.out.</span><span style="color:#6F42C1;">print</span><span style="color:#24292E;">(scanner.</span><span style="color:#6F42C1;">next</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot; &quot;</span><span style="color:#24292E;">);   </span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">} </span></span>
<span class="line"><span style="color:#6A737D;">/* Output: </span></span>
<span class="line"><span style="color:#6A737D;">But I&#39;m not dead yet! I feel happy! </span></span>
<span class="line"><span style="color:#6A737D;">[But, I&#39;m, not, dead, yet!, I, feel, happy!] </span></span>
<span class="line"><span style="color:#6A737D;">But I&#39;m not dead yet! I feel happy! </span></span>
<span class="line"><span style="color:#6A737D;">*/</span></span></code></pre></div><p>使用正则表达式或 <code>Scanner</code> 对象，我们能够以更加复杂的模式来分割一个字符串，而这对于 <code>StringTokenizer</code> 来说就很困难了。基本上，我们可以放心地说，<code>StringTokenizer</code> 已经可以废弃不用了。</p><h2 id="本章小结" tabindex="-1">本章小结 <a class="header-anchor" href="#本章小结" aria-label="Permalink to &quot;本章小结&quot;">​</a></h2><p>过去，Java 对于字符串操作的技术相当不完善。不过随着近几个版本的升级，我们可以看到，Java 已经从其他语言中吸取了许多成熟的经验。到目前为止，它对字符串操作的支持已经很完善了。不过，有时你还要在细节上注意效率问题，例如恰当地使用 <code>StringBuilder</code> 等。</p><p>[^1]: C++允许编程人员任意重载操作符。这通常是很复杂的过程（参见Prentice Hall于2000年编写的《Thinking in C++（第2版）》第10章），因此Java设计者认为这是很糟糕的功能，不应该纳入到Java中。起始重载操作符并没有糟糕到只能自己去重载的地步，但具有讽刺意味的是，与C++相比，在Java中使用操作符重载要容易得多。这一点可以在Python(参见<a href="http://www.python.org" target="_blank" rel="noreferrer">www.Python.org</a>)和C#中看到，它们都有垃圾回收机制，操作符重载也简单易懂。</p><p>[^4]: input来自于<a href="https://en.wikipedia.org/wiki/Galaxy_Quest" target="_blank" rel="noreferrer">Galaxy Quest</a>中Taggart司令的一篇演讲。</p>`,233),e=[o];function t(c,r,y,E,i,d){return n(),a("div",null,e)}const g=s(p,[["render",t]]);export{u as __pageData,g as default};
