import{_ as s,o as n,c as a,Q as p}from"./chunks/framework.c3fbb961.js";const l="/assets/1554546258113.43e69856.png",o="/assets/1554546378822.0cd29fbd.png",e="/assets/1554546452861.285847a9.png",t="/assets/1554546627710.0fff077a.png",c="/assets/1554546666685.c61c17c2.png",r="/assets/1554546693664.be38b970.png",E="/assets/1554546666685.c61c17c2.png",y="/assets/1554546666685.c61c17c2.png",i="/assets/1554546881189.11a237f3.png",F="/assets/1554546890132.02c8acff.png",v=JSON.parse('{"title":"附录:新IO","description":"","frontmatter":{},"headers":[],"relativePath":"book/Appendix-New-IO.md","filePath":"book/Appendix-New-IO.md"}'),u={name:"book/Appendix-New-IO.md"},B=p(`<p>[TOC]</p><h1 id="附录-新io" tabindex="-1">附录:新IO <a class="header-anchor" href="#附录-新io" aria-label="Permalink to &quot;附录:新IO&quot;">​</a></h1><blockquote><p>Java 新I/O 库是在 1.4 版本引入到 <code>Java .nio.* package</code> 中的，旨在更快速。</p></blockquote><p>实际上，新 I/O 使用 <strong>NIO</strong>（同步非阻塞）的方式重写了老的 I/O 了，因此它获得了 <strong>NIO</strong> 的种种优点。即使我们不显式地使用 <strong>NIO</strong> 方式来编写代码，也能带来性能和速度的提高。这种提升不仅仅体现在文件读写（File I/O），同时也体现在网络读写（Network I/O）中。例如，网络编程。</p><p>速度的提升来自于使用了更接近操作系统 I/O 执行方式的结构：<strong>Channel</strong>（通道） 和 <strong>Buffer</strong>（缓冲区）。我们可以想象一个煤矿：通道就是连接矿层（数据）的矿井，缓冲区是运送煤矿的小车。通过小车装煤，再从车里取矿。换句话说，我们不能直接和 <strong>Channel</strong> 交互; 我们需要与 <strong>Buffer</strong> 交互并将 <strong>Buffer</strong> 中的数据发送到 <strong>Channel</strong> 中；<strong>Channel</strong> 需要从 <strong>Buffer</strong> 中提取或放入数据。</p><p>本篇我们将深入探讨 <code>nio</code> 包。虽然 像 I/O 流这样的高级库使用了 <strong>NIO</strong>，但多数时候，我们考虑这个层次的问题。使用Java 7 和 8 版本，理想情况下我们甚至不必费心去处理 I/O 流。当然，一些特殊情况除外。在<a href="./17-Files.html">文件</a>（<strong>File</strong>）一章中基本涵盖了我们日常使用的相关内容。只有在遇到性能瓶颈（例如内存映射文件）或创建自己的 I/O 库时，我们才需要去理解 <strong>NIO</strong>。</p><h2 id="bytebuffer" tabindex="-1">ByteBuffer <a class="header-anchor" href="#bytebuffer" aria-label="Permalink to &quot;ByteBuffer&quot;">​</a></h2><p>有且仅有 <strong>ByteBuffer</strong>（字节缓冲区，保存原始字节的缓冲区）这一类型可直接与通道交互。查看 <code>java.nio.</code><strong>ByteBuffer</strong> 的 JDK 文档，你会发现它是相当基础的：通过初始化某个大小的存储空间，再使用一些方法以原始字节形式或原始数据类型来放置和获取数据。但是我们无法直接存放对象，即使是最基本的 <strong>String</strong> 类型数据。这是一个相当底层的操作，也正因如此，使得它与大多数操作系统的映射更加高效。</p><p>旧式 I/O 中的三个类分别被更新成 <strong>FileChannel</strong>（文件通道），分别是：<strong>FileInputStream</strong>、<strong>FileOutputStream</strong>，以及用于读写的 <strong>RandomAccessFile</strong> 类。</p><p>注意，这些都是符合底层 <strong>NIO</strong> 特性的字节操作流。 另外，还有 <strong>Reader</strong> 和 <strong>Writer</strong> 字符模式的类是不产生通道的。但 <code>java.nio.channels.</code><strong>Channels</strong> 类具有从通道中生成 <strong>Reader</strong> 和 <strong>Writer</strong> 的实用方法。</p><p>下面来练习上述三种类型的流生成可读、可写、可读/写的通道：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// (c)2017 MindView LLC: see Copyright.txt</span></span>
<span class="line"><span style="color:#6A737D;">// 我们不保证这段代码用于其他用途时是否有效</span></span>
<span class="line"><span style="color:#6A737D;">// 访问 http://OnJava8.com 了解更多信息</span></span>
<span class="line"><span style="color:#6A737D;">// 从流中获取通道</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> java.nio.</span><span style="color:#79B8FF;">*</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> java.nio.channels.</span><span style="color:#79B8FF;">*</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> java.io.</span><span style="color:#79B8FF;">*</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">GetChannel</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> String name </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;data.txt&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> BSIZE </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1024</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] </span><span style="color:#FFAB70;">args</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 写入一个文件:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">      FileChannel fc </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">FileOutputStream</span><span style="color:#E1E4E8;">(name)</span></span>
<span class="line"><span style="color:#E1E4E8;">        .</span><span style="color:#B392F0;">getChannel</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">    ) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      fc.</span><span style="color:#B392F0;">write</span><span style="color:#E1E4E8;">(ByteBuffer</span></span>
<span class="line"><span style="color:#E1E4E8;">        .</span><span style="color:#B392F0;">wrap</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Some text &quot;</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">getBytes</span><span style="color:#E1E4E8;">()));</span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;">(IOException </span><span style="color:#FFAB70;">e</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">RuntimeException</span><span style="color:#E1E4E8;">(e);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 在文件尾添加：</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">      FileChannel fc </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">RandomAccessFile</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">        name, </span><span style="color:#9ECBFF;">&quot;rw&quot;</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">getChannel</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">    ) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      fc.</span><span style="color:#B392F0;">position</span><span style="color:#E1E4E8;">(fc.</span><span style="color:#B392F0;">size</span><span style="color:#E1E4E8;">()); </span><span style="color:#6A737D;">// 移动到结尾</span></span>
<span class="line"><span style="color:#E1E4E8;">      fc.</span><span style="color:#B392F0;">write</span><span style="color:#E1E4E8;">(ByteBuffer</span></span>
<span class="line"><span style="color:#E1E4E8;">        .</span><span style="color:#B392F0;">wrap</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Some more&quot;</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">getBytes</span><span style="color:#E1E4E8;">()));</span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;">(IOException </span><span style="color:#FFAB70;">e</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">RuntimeException</span><span style="color:#E1E4E8;">(e);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 读取文件e:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">      FileChannel fc </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">FileInputStream</span><span style="color:#E1E4E8;">(name)</span></span>
<span class="line"><span style="color:#E1E4E8;">        .</span><span style="color:#B392F0;">getChannel</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">    ) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      ByteBuffer buff </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ByteBuffer.</span><span style="color:#B392F0;">allocate</span><span style="color:#E1E4E8;">(BSIZE);</span></span>
<span class="line"><span style="color:#E1E4E8;">      fc.</span><span style="color:#B392F0;">read</span><span style="color:#E1E4E8;">(buff);</span></span>
<span class="line"><span style="color:#E1E4E8;">      buff.</span><span style="color:#B392F0;">flip</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">while</span><span style="color:#E1E4E8;">(buff.</span><span style="color:#B392F0;">hasRemaining</span><span style="color:#E1E4E8;">())</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">write</span><span style="color:#E1E4E8;">(buff.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;">(IOException </span><span style="color:#FFAB70;">e</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">RuntimeException</span><span style="color:#E1E4E8;">(e);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    System.out.</span><span style="color:#B392F0;">flush</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// (c)2017 MindView LLC: see Copyright.txt</span></span>
<span class="line"><span style="color:#6A737D;">// 我们不保证这段代码用于其他用途时是否有效</span></span>
<span class="line"><span style="color:#6A737D;">// 访问 http://OnJava8.com 了解更多信息</span></span>
<span class="line"><span style="color:#6A737D;">// 从流中获取通道</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> java.nio.</span><span style="color:#005CC5;">*</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> java.nio.channels.</span><span style="color:#005CC5;">*</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> java.io.</span><span style="color:#005CC5;">*</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">GetChannel</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> String name </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;data.txt&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> BSIZE </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1024</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 写入一个文件:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">try</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">      FileChannel fc </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">FileOutputStream</span><span style="color:#24292E;">(name)</span></span>
<span class="line"><span style="color:#24292E;">        .</span><span style="color:#6F42C1;">getChannel</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">    ) {</span></span>
<span class="line"><span style="color:#24292E;">      fc.</span><span style="color:#6F42C1;">write</span><span style="color:#24292E;">(ByteBuffer</span></span>
<span class="line"><span style="color:#24292E;">        .</span><span style="color:#6F42C1;">wrap</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Some text &quot;</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">getBytes</span><span style="color:#24292E;">()));</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;">(IOException </span><span style="color:#E36209;">e</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">RuntimeException</span><span style="color:#24292E;">(e);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 在文件尾添加：</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">try</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">      FileChannel fc </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">RandomAccessFile</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">        name, </span><span style="color:#032F62;">&quot;rw&quot;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">getChannel</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">    ) {</span></span>
<span class="line"><span style="color:#24292E;">      fc.</span><span style="color:#6F42C1;">position</span><span style="color:#24292E;">(fc.</span><span style="color:#6F42C1;">size</span><span style="color:#24292E;">()); </span><span style="color:#6A737D;">// 移动到结尾</span></span>
<span class="line"><span style="color:#24292E;">      fc.</span><span style="color:#6F42C1;">write</span><span style="color:#24292E;">(ByteBuffer</span></span>
<span class="line"><span style="color:#24292E;">        .</span><span style="color:#6F42C1;">wrap</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Some more&quot;</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">getBytes</span><span style="color:#24292E;">()));</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;">(IOException </span><span style="color:#E36209;">e</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">RuntimeException</span><span style="color:#24292E;">(e);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 读取文件e:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">try</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">      FileChannel fc </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">FileInputStream</span><span style="color:#24292E;">(name)</span></span>
<span class="line"><span style="color:#24292E;">        .</span><span style="color:#6F42C1;">getChannel</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">    ) {</span></span>
<span class="line"><span style="color:#24292E;">      ByteBuffer buff </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ByteBuffer.</span><span style="color:#6F42C1;">allocate</span><span style="color:#24292E;">(BSIZE);</span></span>
<span class="line"><span style="color:#24292E;">      fc.</span><span style="color:#6F42C1;">read</span><span style="color:#24292E;">(buff);</span></span>
<span class="line"><span style="color:#24292E;">      buff.</span><span style="color:#6F42C1;">flip</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">while</span><span style="color:#24292E;">(buff.</span><span style="color:#6F42C1;">hasRemaining</span><span style="color:#24292E;">())</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">write</span><span style="color:#24292E;">(buff.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;">(IOException </span><span style="color:#E36209;">e</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">RuntimeException</span><span style="color:#24292E;">(e);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    System.out.</span><span style="color:#6F42C1;">flush</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>输出结果：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">Some text Some more</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">Some text Some more</span></span></code></pre></div><p>我们这里所讲的任何流类，都可以通过调用 <code>getChannel( )</code> 方法生成一个 <strong>FileChannel</strong>（文件通道）。<strong>FileChannel</strong> 的操作相当基础：操作 <strong>ByteBuffer</strong> 来用于读写，并独占式访问和锁定文件区域(稍后将对此进行描述)。</p><p>将字节放入 <strong>ByteBuffer</strong> 的一种方法是直接调用 <code>put()</code> 方法将一个或多个字节放入 <strong>ByteBuffer</strong>；当然也可以是其它基本类型的数据。此外，参考上例，我们还可以调用 <code>wrap()</code> 方法包装现有字节数组到 <strong>ByteBuffer</strong>。执行此操作时，不会复制底层数组，而是将其用作生成的 <strong>ByteBuffer</strong> 存储。这样产生的 <strong>ByteBuffer</strong> 是数组“支持”的。</p><p>data.txt 文件被 <strong>RandomAccessFile</strong> 重新打开。<strong>注意</strong>，你可以在文件中移动 <strong>FileChanne</strong>。 在这里，它被移动到末尾，以便添加额外的写操作。</p><p>对于只读访问，必须使用静态 <code>allocate()</code> 方法显式地分配 <strong>ByteBuffer</strong>。<strong>NIO</strong> 的目标是快速移动大量数据，因此 <strong>ByteBuffer</strong> 的大小应该很重要 —— 实际上，这里设置的 1K 都可能偏小了(我们在工作中应该反复测试以找到最佳大小)。</p><p>通过使用 <code>allocateDirect()</code> 而不是 <code>allocate()</code> 来生成与操作系统具备更高耦合度的“直接”缓冲区，也有可能获得更高的速度。然而，这种分配的开销更大，而且实际效果因操作系统的不同而有所不同，因此，在工作中你必须再次测试程序，以检验直接缓冲区是否能为你带来速度上的优势。</p><p>一旦调用 <strong>FileChannel</strong> 类的 <code>read()</code> 方法将字节数据存储到 <strong>ByteBuffer</strong> 中，你还必须调用缓冲区上的 <code>flip()</code> 方法来准备好提取字节（这听起来有点粗糙，实际上这已是非常低层的操作，且为了达到最高速度）。如果要进一步调用 <code>read()</code> 来使用 <strong>ByteBuffer</strong> ，还需要每次 <code>clear()</code> 来准备缓冲区。下面是个简单的代码示例:</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// newio/ChannelCopy.java</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 使用 channels and buffers 移动文件</span></span>
<span class="line"><span style="color:#6A737D;">// {java ChannelCopy ChannelCopy.java test.txt}</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> java.nio.</span><span style="color:#79B8FF;">*</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> java.nio.channels.</span><span style="color:#79B8FF;">*</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> java.io.</span><span style="color:#79B8FF;">*</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ChannelCopy</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> BSIZE </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1024</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] </span><span style="color:#FFAB70;">args</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(args.length </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">&quot;arguments: sourcefile destfile&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">      System.</span><span style="color:#B392F0;">exit</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">      FileChannel in </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">FileInputStream</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">        args[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">]).</span><span style="color:#B392F0;">getChannel</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">      FileChannel out </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">FileOutputStream</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">        args[</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">]).</span><span style="color:#B392F0;">getChannel</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">    ) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      ByteBuffer buffer </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ByteBuffer.</span><span style="color:#B392F0;">allocate</span><span style="color:#E1E4E8;">(BSIZE);</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">while</span><span style="color:#E1E4E8;">(in.</span><span style="color:#B392F0;">read</span><span style="color:#E1E4E8;">(buffer) </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        buffer.</span><span style="color:#B392F0;">flip</span><span style="color:#E1E4E8;">(); </span><span style="color:#6A737D;">// 准备写入</span></span>
<span class="line"><span style="color:#E1E4E8;">        out.</span><span style="color:#B392F0;">write</span><span style="color:#E1E4E8;">(buffer);</span></span>
<span class="line"><span style="color:#E1E4E8;">        buffer.</span><span style="color:#B392F0;">clear</span><span style="color:#E1E4E8;">();  </span><span style="color:#6A737D;">// 准备读取</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;">(IOException </span><span style="color:#FFAB70;">e</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">RuntimeException</span><span style="color:#E1E4E8;">(e);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// newio/ChannelCopy.java</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 使用 channels and buffers 移动文件</span></span>
<span class="line"><span style="color:#6A737D;">// {java ChannelCopy ChannelCopy.java test.txt}</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> java.nio.</span><span style="color:#005CC5;">*</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> java.nio.channels.</span><span style="color:#005CC5;">*</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> java.io.</span><span style="color:#005CC5;">*</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ChannelCopy</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> BSIZE </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1024</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(args.length </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">      System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&quot;arguments: sourcefile destfile&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">      System.</span><span style="color:#6F42C1;">exit</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">try</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">      FileChannel in </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">FileInputStream</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">        args[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">]).</span><span style="color:#6F42C1;">getChannel</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">      FileChannel out </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">FileOutputStream</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">        args[</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">]).</span><span style="color:#6F42C1;">getChannel</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">    ) {</span></span>
<span class="line"><span style="color:#24292E;">      ByteBuffer buffer </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ByteBuffer.</span><span style="color:#6F42C1;">allocate</span><span style="color:#24292E;">(BSIZE);</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">while</span><span style="color:#24292E;">(in.</span><span style="color:#6F42C1;">read</span><span style="color:#24292E;">(buffer) </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        buffer.</span><span style="color:#6F42C1;">flip</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// 准备写入</span></span>
<span class="line"><span style="color:#24292E;">        out.</span><span style="color:#6F42C1;">write</span><span style="color:#24292E;">(buffer);</span></span>
<span class="line"><span style="color:#24292E;">        buffer.</span><span style="color:#6F42C1;">clear</span><span style="color:#24292E;">();  </span><span style="color:#6A737D;">// 准备读取</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;">(IOException </span><span style="color:#E36209;">e</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">RuntimeException</span><span style="color:#24292E;">(e);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p><strong>FileChannel</strong> 用于读取；<strong>FileChannel</strong> 用于写入。当 <strong>ByteBuffer</strong> 分配好存储，调用 <strong>FileChannel</strong> 的 <code>read()</code> 方法返回 <strong>-1</strong>（毫无疑问，这是来源于 Unix 和 C 语言）时，说明输入流读取完了。在每次 <code>read()</code> 将数据放入缓冲区之后，<code>flip()</code> 都会准备好缓冲区，以便 <code>write()</code> 提取它的信息。在 <code>write()</code> 之后，数据仍然在缓冲区中，我们需要 <code>clear()</code> 来重置所有内部指针，以便在下一次 <code>read()</code> 中接受数据。</p><p>但是，上例并不是处理这种操作的理想方法。方法 <code>transferTo()</code> 和 <code>transferFrom()</code> 允许你直接连接此通道到彼通道：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// newio/TransferTo.java</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 使用 transferTo() 在通道间传输</span></span>
<span class="line"><span style="color:#6A737D;">// {java TransferTo TransferTo.java TransferTo.txt}</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> java.nio.channels.</span><span style="color:#79B8FF;">*</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> java.io.</span><span style="color:#79B8FF;">*</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">TransferTo</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] </span><span style="color:#FFAB70;">args</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(args.length </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">&quot;arguments: sourcefile destfile&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">      System.</span><span style="color:#B392F0;">exit</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">      FileChannel in </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">FileInputStream</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">        args[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">]).</span><span style="color:#B392F0;">getChannel</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">      FileChannel out </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">FileOutputStream</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">        args[</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">]).</span><span style="color:#B392F0;">getChannel</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">    ) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      in.</span><span style="color:#B392F0;">transferTo</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, in.</span><span style="color:#B392F0;">size</span><span style="color:#E1E4E8;">(), out);</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// Or:</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// out.transferFrom(in, 0, in.size());</span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;">(IOException </span><span style="color:#FFAB70;">e</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">RuntimeException</span><span style="color:#E1E4E8;">(e);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// newio/TransferTo.java</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 使用 transferTo() 在通道间传输</span></span>
<span class="line"><span style="color:#6A737D;">// {java TransferTo TransferTo.java TransferTo.txt}</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> java.nio.channels.</span><span style="color:#005CC5;">*</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> java.io.</span><span style="color:#005CC5;">*</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TransferTo</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(args.length </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">      System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&quot;arguments: sourcefile destfile&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">      System.</span><span style="color:#6F42C1;">exit</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">try</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">      FileChannel in </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">FileInputStream</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">        args[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">]).</span><span style="color:#6F42C1;">getChannel</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">      FileChannel out </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">FileOutputStream</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">        args[</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">]).</span><span style="color:#6F42C1;">getChannel</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">    ) {</span></span>
<span class="line"><span style="color:#24292E;">      in.</span><span style="color:#6F42C1;">transferTo</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, in.</span><span style="color:#6F42C1;">size</span><span style="color:#24292E;">(), out);</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// Or:</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// out.transferFrom(in, 0, in.size());</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;">(IOException </span><span style="color:#E36209;">e</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">RuntimeException</span><span style="color:#24292E;">(e);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>可能不会经常用到，但知道这一点很好。</p><h2 id="数据转换" tabindex="-1">数据转换 <a class="header-anchor" href="#数据转换" aria-label="Permalink to &quot;数据转换&quot;">​</a></h2><p>为了将 <strong>GetChannel.java</strong> 文件中的信息打印出来。在 Java 中，我们每次提取一个字节的数据并将其转换为字符。看起来很简单 —— 如果你有看过 <code>ava.nio.</code><strong>CharBuffer</strong> 类，你会发现一个 <code>toString()</code> 方法。该方法的作用是“返回一个包含此缓冲区字符的字符串”。</p><p>既然 <strong>ByteBuffer</strong> 可以通过 <strong>CharBuffer</strong> 类的 <code>asCharBuffer()</code> 方法查看，那我们就来尝试一样。从下面输出语句的第一行可以看出，这并不正确：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// newio/BufferToText.java</span></span>
<span class="line"><span style="color:#6A737D;">// (c)2017 MindView LLC: see Copyright.txt</span></span>
<span class="line"><span style="color:#6A737D;">// 我们无法保证该代码是否适用于其他用途。</span></span>
<span class="line"><span style="color:#6A737D;">// 访问 http://OnJava8.com 了解更多本书信息。</span></span>
<span class="line"><span style="color:#6A737D;">// text 和 ByteBuffers 互转</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> java.nio.</span><span style="color:#79B8FF;">*</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> java.nio.channels.</span><span style="color:#79B8FF;">*</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> java.nio.charset.</span><span style="color:#79B8FF;">*</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> java.io.</span><span style="color:#79B8FF;">*</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">BufferToText</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> BSIZE </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1024</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] </span><span style="color:#FFAB70;">args</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">      FileChannel fc </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">FileOutputStream</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">&quot;data2.txt&quot;</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">getChannel</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">    ) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      fc.</span><span style="color:#B392F0;">write</span><span style="color:#E1E4E8;">(ByteBuffer.</span><span style="color:#B392F0;">wrap</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Some text&quot;</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">getBytes</span><span style="color:#E1E4E8;">()));</span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;">(IOException </span><span style="color:#FFAB70;">e</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">RuntimeException</span><span style="color:#E1E4E8;">(e);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    ByteBuffer buff </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ByteBuffer.</span><span style="color:#B392F0;">allocate</span><span style="color:#E1E4E8;">(BSIZE);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">      FileChannel fc </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">FileInputStream</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">&quot;data2.txt&quot;</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">getChannel</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">    ) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      fc.</span><span style="color:#B392F0;">read</span><span style="color:#E1E4E8;">(buff);</span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;">(IOException </span><span style="color:#FFAB70;">e</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">RuntimeException</span><span style="color:#E1E4E8;">(e);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    buff.</span><span style="color:#B392F0;">flip</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 无法运行</span></span>
<span class="line"><span style="color:#E1E4E8;">    System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(buff.</span><span style="color:#B392F0;">asCharBuffer</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 使用默认系统默认编码解码</span></span>
<span class="line"><span style="color:#E1E4E8;">    buff.</span><span style="color:#B392F0;">rewind</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    String encoding </span><span style="color:#F97583;">=</span></span>
<span class="line"><span style="color:#E1E4E8;">      System.</span><span style="color:#B392F0;">getProperty</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;file.encoding&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Decoded using &quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span></span>
<span class="line"><span style="color:#E1E4E8;">      encoding </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;: &quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> Charset.</span><span style="color:#B392F0;">forName</span><span style="color:#E1E4E8;">(encoding).</span><span style="color:#B392F0;">decode</span><span style="color:#E1E4E8;">(buff));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 编码和打印</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">      FileChannel fc </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">FileOutputStream</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">&quot;data2.txt&quot;</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">getChannel</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">    ) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      fc.</span><span style="color:#B392F0;">write</span><span style="color:#E1E4E8;">(ByteBuffer.</span><span style="color:#B392F0;">wrap</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">&quot;Some text&quot;</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">getBytes</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;UTF-16BE&quot;</span><span style="color:#E1E4E8;">)));</span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;">(IOException </span><span style="color:#FFAB70;">e</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">RuntimeException</span><span style="color:#E1E4E8;">(e);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 尝试再次读取：</span></span>
<span class="line"><span style="color:#E1E4E8;">    buff.</span><span style="color:#B392F0;">clear</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">      FileChannel fc </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">FileInputStream</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">&quot;data2.txt&quot;</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">getChannel</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">    ) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      fc.</span><span style="color:#B392F0;">read</span><span style="color:#E1E4E8;">(buff);</span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;">(IOException </span><span style="color:#FFAB70;">e</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">RuntimeException</span><span style="color:#E1E4E8;">(e);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    buff.</span><span style="color:#B392F0;">flip</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(buff.</span><span style="color:#B392F0;">asCharBuffer</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 通过 CharBuffer 写入：</span></span>
<span class="line"><span style="color:#E1E4E8;">    buff </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ByteBuffer.</span><span style="color:#B392F0;">allocate</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">24</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    buff.</span><span style="color:#B392F0;">asCharBuffer</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Some text&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">      FileChannel fc </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">FileOutputStream</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">&quot;data2.txt&quot;</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">getChannel</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">    ) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      fc.</span><span style="color:#B392F0;">write</span><span style="color:#E1E4E8;">(buff);</span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;">(IOException </span><span style="color:#FFAB70;">e</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">RuntimeException</span><span style="color:#E1E4E8;">(e);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 读取和显示：</span></span>
<span class="line"><span style="color:#E1E4E8;">    buff.</span><span style="color:#B392F0;">clear</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">      FileChannel fc </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">FileInputStream</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">&quot;data2.txt&quot;</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">getChannel</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">    ) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      fc.</span><span style="color:#B392F0;">read</span><span style="color:#E1E4E8;">(buff);</span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;">(IOException </span><span style="color:#FFAB70;">e</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">RuntimeException</span><span style="color:#E1E4E8;">(e);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    buff.</span><span style="color:#B392F0;">flip</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(buff.</span><span style="color:#B392F0;">asCharBuffer</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// newio/BufferToText.java</span></span>
<span class="line"><span style="color:#6A737D;">// (c)2017 MindView LLC: see Copyright.txt</span></span>
<span class="line"><span style="color:#6A737D;">// 我们无法保证该代码是否适用于其他用途。</span></span>
<span class="line"><span style="color:#6A737D;">// 访问 http://OnJava8.com 了解更多本书信息。</span></span>
<span class="line"><span style="color:#6A737D;">// text 和 ByteBuffers 互转</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> java.nio.</span><span style="color:#005CC5;">*</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> java.nio.channels.</span><span style="color:#005CC5;">*</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> java.nio.charset.</span><span style="color:#005CC5;">*</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> java.io.</span><span style="color:#005CC5;">*</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">BufferToText</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> BSIZE </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1024</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">try</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">      FileChannel fc </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">FileOutputStream</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&quot;data2.txt&quot;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">getChannel</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">    ) {</span></span>
<span class="line"><span style="color:#24292E;">      fc.</span><span style="color:#6F42C1;">write</span><span style="color:#24292E;">(ByteBuffer.</span><span style="color:#6F42C1;">wrap</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Some text&quot;</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">getBytes</span><span style="color:#24292E;">()));</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;">(IOException </span><span style="color:#E36209;">e</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">RuntimeException</span><span style="color:#24292E;">(e);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    ByteBuffer buff </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ByteBuffer.</span><span style="color:#6F42C1;">allocate</span><span style="color:#24292E;">(BSIZE);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">try</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">      FileChannel fc </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">FileInputStream</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&quot;data2.txt&quot;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">getChannel</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">    ) {</span></span>
<span class="line"><span style="color:#24292E;">      fc.</span><span style="color:#6F42C1;">read</span><span style="color:#24292E;">(buff);</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;">(IOException </span><span style="color:#E36209;">e</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">RuntimeException</span><span style="color:#24292E;">(e);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    buff.</span><span style="color:#6F42C1;">flip</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 无法运行</span></span>
<span class="line"><span style="color:#24292E;">    System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(buff.</span><span style="color:#6F42C1;">asCharBuffer</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 使用默认系统默认编码解码</span></span>
<span class="line"><span style="color:#24292E;">    buff.</span><span style="color:#6F42C1;">rewind</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    String encoding </span><span style="color:#D73A49;">=</span></span>
<span class="line"><span style="color:#24292E;">      System.</span><span style="color:#6F42C1;">getProperty</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;file.encoding&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Decoded using &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span></span>
<span class="line"><span style="color:#24292E;">      encoding </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;: &quot;</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> Charset.</span><span style="color:#6F42C1;">forName</span><span style="color:#24292E;">(encoding).</span><span style="color:#6F42C1;">decode</span><span style="color:#24292E;">(buff));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 编码和打印</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">try</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">      FileChannel fc </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">FileOutputStream</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&quot;data2.txt&quot;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">getChannel</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">    ) {</span></span>
<span class="line"><span style="color:#24292E;">      fc.</span><span style="color:#6F42C1;">write</span><span style="color:#24292E;">(ByteBuffer.</span><span style="color:#6F42C1;">wrap</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&quot;Some text&quot;</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">getBytes</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;UTF-16BE&quot;</span><span style="color:#24292E;">)));</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;">(IOException </span><span style="color:#E36209;">e</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">RuntimeException</span><span style="color:#24292E;">(e);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 尝试再次读取：</span></span>
<span class="line"><span style="color:#24292E;">    buff.</span><span style="color:#6F42C1;">clear</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">try</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">      FileChannel fc </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">FileInputStream</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&quot;data2.txt&quot;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">getChannel</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">    ) {</span></span>
<span class="line"><span style="color:#24292E;">      fc.</span><span style="color:#6F42C1;">read</span><span style="color:#24292E;">(buff);</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;">(IOException </span><span style="color:#E36209;">e</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">RuntimeException</span><span style="color:#24292E;">(e);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    buff.</span><span style="color:#6F42C1;">flip</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(buff.</span><span style="color:#6F42C1;">asCharBuffer</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 通过 CharBuffer 写入：</span></span>
<span class="line"><span style="color:#24292E;">    buff </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ByteBuffer.</span><span style="color:#6F42C1;">allocate</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">24</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    buff.</span><span style="color:#6F42C1;">asCharBuffer</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Some text&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">try</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">      FileChannel fc </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">FileOutputStream</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&quot;data2.txt&quot;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">getChannel</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">    ) {</span></span>
<span class="line"><span style="color:#24292E;">      fc.</span><span style="color:#6F42C1;">write</span><span style="color:#24292E;">(buff);</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;">(IOException </span><span style="color:#E36209;">e</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">RuntimeException</span><span style="color:#24292E;">(e);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 读取和显示：</span></span>
<span class="line"><span style="color:#24292E;">    buff.</span><span style="color:#6F42C1;">clear</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">try</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">      FileChannel fc </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">FileInputStream</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&quot;data2.txt&quot;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">getChannel</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">    ) {</span></span>
<span class="line"><span style="color:#24292E;">      fc.</span><span style="color:#6F42C1;">read</span><span style="color:#24292E;">(buff);</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;">(IOException </span><span style="color:#E36209;">e</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">RuntimeException</span><span style="color:#24292E;">(e);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    buff.</span><span style="color:#6F42C1;">flip</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(buff.</span><span style="color:#6F42C1;">asCharBuffer</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>输出结果：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">????</span></span>
<span class="line"><span style="color:#e1e4e8;">Decoded using windows-1252: Some text</span></span>
<span class="line"><span style="color:#e1e4e8;">Some text</span></span>
<span class="line"><span style="color:#e1e4e8;">Some textNULNULNUL</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">????</span></span>
<span class="line"><span style="color:#24292e;">Decoded using windows-1252: Some text</span></span>
<span class="line"><span style="color:#24292e;">Some text</span></span>
<span class="line"><span style="color:#24292e;">Some textNULNULNUL</span></span></code></pre></div><p>缓冲区包含普通字节，为了将这些字节转换为字符，我们必须在输入时对它们进行编码(这样它们输出时就有意义了)，或者在输出时对它们进行解码。我们可以使用 <code>java.nio.charset.</code><strong>Charset</strong> 字符集工具类来完成。代码示例：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// newio/AvailableCharSets.java</span></span>
<span class="line"><span style="color:#6A737D;">// (c)2017 MindView LLC: see Copyright.txt</span></span>
<span class="line"><span style="color:#6A737D;">// 我们无法保证该代码是否适用于其他用途。</span></span>
<span class="line"><span style="color:#6A737D;">// 访问 http://OnJava8.com 了解更多本书信息。</span></span>
<span class="line"><span style="color:#6A737D;">// 展示 Charsets 和 aliases</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> java.nio.charset.</span><span style="color:#79B8FF;">*</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> java.util.</span><span style="color:#79B8FF;">*</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">AvailableCharSets</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] </span><span style="color:#FFAB70;">args</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      SortedMap&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">,</span><span style="color:#F97583;">Charset</span><span style="color:#E1E4E8;">&gt; charSets </span><span style="color:#F97583;">=</span></span>
<span class="line"><span style="color:#E1E4E8;">      Charset.</span><span style="color:#B392F0;">availableCharsets</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;">(String csName </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> charSets.</span><span style="color:#B392F0;">keySet</span><span style="color:#E1E4E8;">()) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      System.out.</span><span style="color:#B392F0;">print</span><span style="color:#E1E4E8;">(csName);</span></span>
<span class="line"><span style="color:#E1E4E8;">      Iterator aliases </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> charSets.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(csName)</span></span>
<span class="line"><span style="color:#E1E4E8;">        .</span><span style="color:#B392F0;">aliases</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">iterator</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(aliases.</span><span style="color:#B392F0;">hasNext</span><span style="color:#E1E4E8;">())</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">print</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;: &quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">while</span><span style="color:#E1E4E8;">(aliases.</span><span style="color:#B392F0;">hasNext</span><span style="color:#E1E4E8;">()) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">print</span><span style="color:#E1E4E8;">(aliases.</span><span style="color:#B392F0;">next</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(aliases.</span><span style="color:#B392F0;">hasNext</span><span style="color:#E1E4E8;">())</span></span>
<span class="line"><span style="color:#E1E4E8;">          System.out.</span><span style="color:#B392F0;">print</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;, &quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">      System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// newio/AvailableCharSets.java</span></span>
<span class="line"><span style="color:#6A737D;">// (c)2017 MindView LLC: see Copyright.txt</span></span>
<span class="line"><span style="color:#6A737D;">// 我们无法保证该代码是否适用于其他用途。</span></span>
<span class="line"><span style="color:#6A737D;">// 访问 http://OnJava8.com 了解更多本书信息。</span></span>
<span class="line"><span style="color:#6A737D;">// 展示 Charsets 和 aliases</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> java.nio.charset.</span><span style="color:#005CC5;">*</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> java.util.</span><span style="color:#005CC5;">*</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">AvailableCharSets</span><span style="color:#24292E;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">      SortedMap&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">,</span><span style="color:#D73A49;">Charset</span><span style="color:#24292E;">&gt; charSets </span><span style="color:#D73A49;">=</span></span>
<span class="line"><span style="color:#24292E;">      Charset.</span><span style="color:#6F42C1;">availableCharsets</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;">(String csName </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> charSets.</span><span style="color:#6F42C1;">keySet</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">      System.out.</span><span style="color:#6F42C1;">print</span><span style="color:#24292E;">(csName);</span></span>
<span class="line"><span style="color:#24292E;">      Iterator aliases </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> charSets.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(csName)</span></span>
<span class="line"><span style="color:#24292E;">        .</span><span style="color:#6F42C1;">aliases</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">iterator</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(aliases.</span><span style="color:#6F42C1;">hasNext</span><span style="color:#24292E;">())</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;: &quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        </span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">while</span><span style="color:#24292E;">(aliases.</span><span style="color:#6F42C1;">hasNext</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">print</span><span style="color:#24292E;">(aliases.</span><span style="color:#6F42C1;">next</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(aliases.</span><span style="color:#6F42C1;">hasNext</span><span style="color:#24292E;">())</span></span>
<span class="line"><span style="color:#24292E;">          System.out.</span><span style="color:#6F42C1;">print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;, &quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">      System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>输出结果：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">Big5: csBig5</span></span>
<span class="line"><span style="color:#e1e4e8;">Big5-HKSCS: big5-hkscs, big5hk, Big5_HKSCS, big5hkscs</span></span>
<span class="line"><span style="color:#e1e4e8;">CESU-8: CESU8, csCESU-8</span></span>
<span class="line"><span style="color:#e1e4e8;">EUC-JP: csEUCPkdFmtjapanese, x-euc-jp, eucjis,</span></span>
<span class="line"><span style="color:#e1e4e8;">Extended_UNIX_Code_Packed_Format_for_Japanese, euc_jp,</span></span>
<span class="line"><span style="color:#e1e4e8;">eucjp, x-eucjp</span></span>
<span class="line"><span style="color:#e1e4e8;">EUC-KR: ksc5601-1987, csEUCKR, ksc5601_1987, ksc5601,</span></span>
<span class="line"><span style="color:#e1e4e8;">5601,</span></span>
<span class="line"><span style="color:#e1e4e8;">euc_kr, ksc_5601, ks_c_5601-1987, euckr</span></span>
<span class="line"><span style="color:#e1e4e8;">GB18030: gb18030-2000</span></span>
<span class="line"><span style="color:#e1e4e8;">GB2312: gb2312, euc-cn, x-EUC-CN, euccn, EUC_CN,</span></span>
<span class="line"><span style="color:#e1e4e8;">gb2312-80,</span></span>
<span class="line"><span style="color:#e1e4e8;">gb2312-1980</span></span>
<span class="line"><span style="color:#e1e4e8;">                  ...</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">Big5: csBig5</span></span>
<span class="line"><span style="color:#24292e;">Big5-HKSCS: big5-hkscs, big5hk, Big5_HKSCS, big5hkscs</span></span>
<span class="line"><span style="color:#24292e;">CESU-8: CESU8, csCESU-8</span></span>
<span class="line"><span style="color:#24292e;">EUC-JP: csEUCPkdFmtjapanese, x-euc-jp, eucjis,</span></span>
<span class="line"><span style="color:#24292e;">Extended_UNIX_Code_Packed_Format_for_Japanese, euc_jp,</span></span>
<span class="line"><span style="color:#24292e;">eucjp, x-eucjp</span></span>
<span class="line"><span style="color:#24292e;">EUC-KR: ksc5601-1987, csEUCKR, ksc5601_1987, ksc5601,</span></span>
<span class="line"><span style="color:#24292e;">5601,</span></span>
<span class="line"><span style="color:#24292e;">euc_kr, ksc_5601, ks_c_5601-1987, euckr</span></span>
<span class="line"><span style="color:#24292e;">GB18030: gb18030-2000</span></span>
<span class="line"><span style="color:#24292e;">GB2312: gb2312, euc-cn, x-EUC-CN, euccn, EUC_CN,</span></span>
<span class="line"><span style="color:#24292e;">gb2312-80,</span></span>
<span class="line"><span style="color:#24292e;">gb2312-1980</span></span>
<span class="line"><span style="color:#24292e;">                  ...</span></span></code></pre></div><p>回到 <strong>BufferToText.java</strong> 中，如果你 <code>rewind()</code> 缓冲区（回到数据的开头），使用该平台的默认字符集 <code>decode()</code> 数据，那么生成的 <strong>CharBuffer</strong> 数据将在控制台上正常显示。可以通过 <code>System.getProperty(“file.encoding”)</code> 方法来查看平台默认字符集名称。传递该名称参数到 <code>Charset.forName()</code> 方法可以生成对应的 <code>Charset</code> 对象用于解码字符串。</p><p>另一种方法是使用字符集 <code>encode()</code> 方法，该字符集在读取文件时生成可打印的内容，如你在 <strong>BufferToText.java</strong> 的第三部分中所看到的。上例中，<strong>UTF-16BE</strong> 被用于将文本写入文件，当文本被读取时，你所要做的就是将其转换为 <strong>CharBuffer</strong>，并生成预期的文本。</p><p>最后，如果将 <strong>CharBuffer</strong> 写入 <strong>ByteBuffer</strong>，你会看到发生了什么(更多详情，稍后了解)。<strong>注意</strong>，为 <strong>ByteBuffer</strong> 分配了24个字节，按照每个字符占用 2 个自字节， 12 个字符的空间已经足够了。由于“some text”只有 9 个字符，受其 <code>toString()</code> 方法影响，剩下的 0 字节部分也出现在了 <strong>CharBuffer</strong> 的展示中，如输出所示。</p><h2 id="基本类型获取" tabindex="-1">基本类型获取 <a class="header-anchor" href="#基本类型获取" aria-label="Permalink to &quot;基本类型获取&quot;">​</a></h2><p>虽然 <strong>ByteBuffer</strong> 只包含字节，但它包含了一些方法，用于从其所包含的字节中生成各种不同的基本类型数据。代码示例：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// newio/GetData.java</span></span>
<span class="line"><span style="color:#6A737D;">// (c)2017 MindView LLC: see Copyright.txt</span></span>
<span class="line"><span style="color:#6A737D;">// 我们无法保证该代码是否适用于其他用途。</span></span>
<span class="line"><span style="color:#6A737D;">// 访问 http://OnJava8.com 了解更多本书信息。</span></span>
<span class="line"><span style="color:#6A737D;">// 从 ByteBuffer 中获取不同的数据展示</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> java.nio.</span><span style="color:#79B8FF;">*</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">GetData</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> BSIZE </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1024</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] </span><span style="color:#FFAB70;">args</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    ByteBuffer bb </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ByteBuffer.</span><span style="color:#B392F0;">allocate</span><span style="color:#E1E4E8;">(BSIZE);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 自动分配 0 到 ByteBuffer:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">while</span><span style="color:#E1E4E8;">(i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> bb.</span><span style="color:#B392F0;">limit</span><span style="color:#E1E4E8;">())</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(bb.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;nonzero&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;i = &quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> i);</span></span>
<span class="line"><span style="color:#E1E4E8;">    bb.</span><span style="color:#B392F0;">rewind</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 保存和读取 char 数组:</span></span>
<span class="line"><span style="color:#E1E4E8;">    bb.</span><span style="color:#B392F0;">asCharBuffer</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Howdy!&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">char</span><span style="color:#E1E4E8;"> c;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">while</span><span style="color:#E1E4E8;">((c </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> bb.</span><span style="color:#B392F0;">getChar</span><span style="color:#E1E4E8;">()) </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">      System.out.</span><span style="color:#B392F0;">print</span><span style="color:#E1E4E8;">(c </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot; &quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    bb.</span><span style="color:#B392F0;">rewind</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 保存和读取 short:</span></span>
<span class="line"><span style="color:#E1E4E8;">    bb.</span><span style="color:#B392F0;">asShortBuffer</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">((</span><span style="color:#F97583;">short</span><span style="color:#E1E4E8;">)</span><span style="color:#79B8FF;">471142</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(bb.</span><span style="color:#B392F0;">getShort</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">    bb.</span><span style="color:#B392F0;">rewind</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 保存和读取 int:</span></span>
<span class="line"><span style="color:#E1E4E8;">    bb.</span><span style="color:#B392F0;">asIntBuffer</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">99471142</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(bb.</span><span style="color:#B392F0;">getInt</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">    bb.</span><span style="color:#B392F0;">rewind</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 保存和读取 long:</span></span>
<span class="line"><span style="color:#E1E4E8;">    bb.</span><span style="color:#B392F0;">asLongBuffer</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">99471142</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(bb.</span><span style="color:#B392F0;">getLong</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">    bb.</span><span style="color:#B392F0;">rewind</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 保存和读取 float:</span></span>
<span class="line"><span style="color:#E1E4E8;">    bb.</span><span style="color:#B392F0;">asFloatBuffer</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">99471142</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(bb.</span><span style="color:#B392F0;">getFloat</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">    bb.</span><span style="color:#B392F0;">rewind</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 保存和读取 double:</span></span>
<span class="line"><span style="color:#E1E4E8;">    bb.</span><span style="color:#B392F0;">asDoubleBuffer</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">99471142</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(bb.</span><span style="color:#B392F0;">getDouble</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">    bb.</span><span style="color:#B392F0;">rewind</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// newio/GetData.java</span></span>
<span class="line"><span style="color:#6A737D;">// (c)2017 MindView LLC: see Copyright.txt</span></span>
<span class="line"><span style="color:#6A737D;">// 我们无法保证该代码是否适用于其他用途。</span></span>
<span class="line"><span style="color:#6A737D;">// 访问 http://OnJava8.com 了解更多本书信息。</span></span>
<span class="line"><span style="color:#6A737D;">// 从 ByteBuffer 中获取不同的数据展示</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> java.nio.</span><span style="color:#005CC5;">*</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">GetData</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> BSIZE </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1024</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    ByteBuffer bb </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ByteBuffer.</span><span style="color:#6F42C1;">allocate</span><span style="color:#24292E;">(BSIZE);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 自动分配 0 到 ByteBuffer:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">while</span><span style="color:#24292E;">(i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> bb.</span><span style="color:#6F42C1;">limit</span><span style="color:#24292E;">())</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(bb.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;nonzero&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;i = &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> i);</span></span>
<span class="line"><span style="color:#24292E;">    bb.</span><span style="color:#6F42C1;">rewind</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 保存和读取 char 数组:</span></span>
<span class="line"><span style="color:#24292E;">    bb.</span><span style="color:#6F42C1;">asCharBuffer</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Howdy!&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">char</span><span style="color:#24292E;"> c;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">while</span><span style="color:#24292E;">((c </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> bb.</span><span style="color:#6F42C1;">getChar</span><span style="color:#24292E;">()) </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">      System.out.</span><span style="color:#6F42C1;">print</span><span style="color:#24292E;">(c </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot; &quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    bb.</span><span style="color:#6F42C1;">rewind</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 保存和读取 short:</span></span>
<span class="line"><span style="color:#24292E;">    bb.</span><span style="color:#6F42C1;">asShortBuffer</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">((</span><span style="color:#D73A49;">short</span><span style="color:#24292E;">)</span><span style="color:#005CC5;">471142</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(bb.</span><span style="color:#6F42C1;">getShort</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">    bb.</span><span style="color:#6F42C1;">rewind</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 保存和读取 int:</span></span>
<span class="line"><span style="color:#24292E;">    bb.</span><span style="color:#6F42C1;">asIntBuffer</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">99471142</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(bb.</span><span style="color:#6F42C1;">getInt</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">    bb.</span><span style="color:#6F42C1;">rewind</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 保存和读取 long:</span></span>
<span class="line"><span style="color:#24292E;">    bb.</span><span style="color:#6F42C1;">asLongBuffer</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">99471142</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(bb.</span><span style="color:#6F42C1;">getLong</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">    bb.</span><span style="color:#6F42C1;">rewind</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 保存和读取 float:</span></span>
<span class="line"><span style="color:#24292E;">    bb.</span><span style="color:#6F42C1;">asFloatBuffer</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">99471142</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(bb.</span><span style="color:#6F42C1;">getFloat</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">    bb.</span><span style="color:#6F42C1;">rewind</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 保存和读取 double:</span></span>
<span class="line"><span style="color:#24292E;">    bb.</span><span style="color:#6F42C1;">asDoubleBuffer</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">99471142</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(bb.</span><span style="color:#6F42C1;">getDouble</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">    bb.</span><span style="color:#6F42C1;">rewind</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>输出结果：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">i = 1025</span></span>
<span class="line"><span style="color:#e1e4e8;">H o w d y !</span></span>
<span class="line"><span style="color:#e1e4e8;">12390</span></span>
<span class="line"><span style="color:#e1e4e8;">99471142</span></span>
<span class="line"><span style="color:#e1e4e8;">99471142</span></span>
<span class="line"><span style="color:#e1e4e8;">9.9471144E7</span></span>
<span class="line"><span style="color:#e1e4e8;">9.9471142E7</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">i = 1025</span></span>
<span class="line"><span style="color:#24292e;">H o w d y !</span></span>
<span class="line"><span style="color:#24292e;">12390</span></span>
<span class="line"><span style="color:#24292e;">99471142</span></span>
<span class="line"><span style="color:#24292e;">99471142</span></span>
<span class="line"><span style="color:#24292e;">9.9471144E7</span></span>
<span class="line"><span style="color:#24292e;">9.9471142E7</span></span></code></pre></div><p>在分配 <strong>ByteBuffer</strong> 之后，我们检查并确认它的 1,024 元素被初始化为 0。（截至到达 <code>limit()</code> 结果的位置）。</p><p>将基本类型数据插入 <strong>ByteBuffer</strong> 的最简单方法就是使用 <code>asCharBuffer()</code>、<code>asShortBuffer()</code> 等方法获取该缓冲区适当的“视图”（View），然后调用该“视图”的 <code>put()</code> 方法。</p><p>这是针对每种基本数据类型执行的。其中唯一有点奇怪的是 <strong>ShortBuffer</strong> 的 <code>put()</code>，它需要类型强制转换。其他视图缓冲区不需要在其 <code>put()</code> 方法中进行转换。</p><h2 id="视图缓冲区" tabindex="-1">视图缓冲区 <a class="header-anchor" href="#视图缓冲区" aria-label="Permalink to &quot;视图缓冲区&quot;">​</a></h2><p>“视图缓冲区”（view buffer）是通过特定的基本类型的窗口来查看底层 <strong>ByteBuffer</strong>。<strong>ByteBuffer</strong> 仍然是“支持”视图的实际存储，因此对视图所做的任何更改都反映在对 <strong>ByteBuffer</strong> 中的数据的修改中。</p><p>如前面的示例所示，这方便地将基本类型插入 <strong>ByteBuffer</strong>。视图缓冲区还可以从 <strong>ByteBuffer</strong> 读取基本类型数据，每次单个（<strong>ByteBuffer</strong> 规定），或者批量读取到数组。下面是一个通过 <strong>IntBuffer</strong> 在 <strong>ByteBuffer</strong> 中操作 <strong>int</strong> 的例子：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// newio/IntBufferDemo.java</span></span>
<span class="line"><span style="color:#6A737D;">// (c)2017 MindView LLC: see Copyright.txt</span></span>
<span class="line"><span style="color:#6A737D;">// 我们无法保证该代码是否适用于其他用途。</span></span>
<span class="line"><span style="color:#6A737D;">// 访问 http://OnJava8.com 了解更多本书信息。</span></span>
<span class="line"><span style="color:#6A737D;">// 利用 IntBuffer 保存 int 数据到 ByteBuffer</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> java.nio.</span><span style="color:#79B8FF;">*</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">IntBufferDemo</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> BSIZE </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1024</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] </span><span style="color:#FFAB70;">args</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    ByteBuffer bb </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ByteBuffer.</span><span style="color:#B392F0;">allocate</span><span style="color:#E1E4E8;">(BSIZE);</span></span>
<span class="line"><span style="color:#E1E4E8;">    IntBuffer ib </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> bb.</span><span style="color:#B392F0;">asIntBuffer</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 保存 int 数组：</span></span>
<span class="line"><span style="color:#E1E4E8;">    ib.</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">[]{ </span><span style="color:#79B8FF;">11</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">42</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">47</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">99</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">143</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">811</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">1016</span><span style="color:#E1E4E8;"> });</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//绝对位置读写：</span></span>
<span class="line"><span style="color:#E1E4E8;">    System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(ib.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"><span style="color:#E1E4E8;">    ib.</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">1811</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 在重置缓冲区前设置新的限制</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span></span>
<span class="line"><span style="color:#E1E4E8;">    ib.</span><span style="color:#B392F0;">flip</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">while</span><span style="color:#E1E4E8;">(ib.</span><span style="color:#B392F0;">hasRemaining</span><span style="color:#E1E4E8;">()) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ib.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">      System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(i);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// newio/IntBufferDemo.java</span></span>
<span class="line"><span style="color:#6A737D;">// (c)2017 MindView LLC: see Copyright.txt</span></span>
<span class="line"><span style="color:#6A737D;">// 我们无法保证该代码是否适用于其他用途。</span></span>
<span class="line"><span style="color:#6A737D;">// 访问 http://OnJava8.com 了解更多本书信息。</span></span>
<span class="line"><span style="color:#6A737D;">// 利用 IntBuffer 保存 int 数据到 ByteBuffer</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> java.nio.</span><span style="color:#005CC5;">*</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">IntBufferDemo</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> BSIZE </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1024</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    ByteBuffer bb </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ByteBuffer.</span><span style="color:#6F42C1;">allocate</span><span style="color:#24292E;">(BSIZE);</span></span>
<span class="line"><span style="color:#24292E;">    IntBuffer ib </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> bb.</span><span style="color:#6F42C1;">asIntBuffer</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 保存 int 数组：</span></span>
<span class="line"><span style="color:#24292E;">    ib.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;">[]{ </span><span style="color:#005CC5;">11</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">42</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">47</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">99</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">143</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">811</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1016</span><span style="color:#24292E;"> });</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//绝对位置读写：</span></span>
<span class="line"><span style="color:#24292E;">    System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(ib.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#24292E;">    ib.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1811</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 在重置缓冲区前设置新的限制</span></span>
<span class="line"><span style="color:#24292E;">    </span></span>
<span class="line"><span style="color:#24292E;">    ib.</span><span style="color:#6F42C1;">flip</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">while</span><span style="color:#24292E;">(ib.</span><span style="color:#6F42C1;">hasRemaining</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ib.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">      System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(i);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>输出结果：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">99</span></span>
<span class="line"><span style="color:#e1e4e8;">11</span></span>
<span class="line"><span style="color:#e1e4e8;">42</span></span>
<span class="line"><span style="color:#e1e4e8;">47</span></span>
<span class="line"><span style="color:#e1e4e8;">1811</span></span>
<span class="line"><span style="color:#e1e4e8;">143</span></span>
<span class="line"><span style="color:#e1e4e8;">811</span></span>
<span class="line"><span style="color:#e1e4e8;">1016</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">99</span></span>
<span class="line"><span style="color:#24292e;">11</span></span>
<span class="line"><span style="color:#24292e;">42</span></span>
<span class="line"><span style="color:#24292e;">47</span></span>
<span class="line"><span style="color:#24292e;">1811</span></span>
<span class="line"><span style="color:#24292e;">143</span></span>
<span class="line"><span style="color:#24292e;">811</span></span>
<span class="line"><span style="color:#24292e;">1016</span></span></code></pre></div><p><code>put()</code> 方法重载，首先用于存储 <strong>int</strong> 数组。下面的 <code>get()</code> 和 <code>put()</code> 方法调用直接访问底层 <strong>ByteBuffer</strong> 中的 <strong>int</strong> 位置。<strong>注意</strong>，通过直接操作 <strong>ByteBuffer</strong> ，这些绝对位置访问也可以用于基本类型。</p><p>一旦底层 <strong>ByteBuffer</strong> 通过视图缓冲区填充了 <strong>int</strong> 或其他基本类型，那么就可以直接将该 <strong>ByteBuffer</strong> 写入通道。你可以轻松地从通道读取数据，并使用视图缓冲区将所有内容转换为特定的基本类型。下面是一个例子，通过在同一个 <strong>ByteBuffer</strong> 上生成不同的视图缓冲区，将相同的字节序列解释为 <strong>short</strong>、<strong>int</strong>、<strong>float</strong>、<strong>long</strong> 和 <strong>double</strong>。代码示例：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// newio/ViewBuffers.java</span></span>
<span class="line"><span style="color:#6A737D;">// (c)2017 MindView LLC: see Copyright.txt</span></span>
<span class="line"><span style="color:#6A737D;">// 我们无法保证该代码是否适用于其他用途。</span></span>
<span class="line"><span style="color:#6A737D;">// 访问 http://OnJava8.com 了解更多本书信息。</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> java.nio.</span><span style="color:#79B8FF;">*</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ViewBuffers</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] </span><span style="color:#FFAB70;">args</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    ByteBuffer bb </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ByteBuffer.</span><span style="color:#B392F0;">wrap</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">byte</span><span style="color:#E1E4E8;">[]{ </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;a&#39;</span><span style="color:#E1E4E8;"> });</span></span>
<span class="line"><span style="color:#E1E4E8;">    bb.</span><span style="color:#B392F0;">rewind</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    System.out.</span><span style="color:#B392F0;">print</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Byte Buffer &quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">while</span><span style="color:#E1E4E8;">(bb.</span><span style="color:#B392F0;">hasRemaining</span><span style="color:#E1E4E8;">())</span></span>
<span class="line"><span style="color:#E1E4E8;">      System.out.</span><span style="color:#B392F0;">print</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">        bb.</span><span style="color:#B392F0;">position</span><span style="color:#E1E4E8;">()</span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot; -&gt; &quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> bb.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;, &quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    CharBuffer cb </span><span style="color:#F97583;">=</span></span>
<span class="line"><span style="color:#E1E4E8;">      ((ByteBuffer)bb.</span><span style="color:#B392F0;">rewind</span><span style="color:#E1E4E8;">()).</span><span style="color:#B392F0;">asCharBuffer</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    System.out.</span><span style="color:#B392F0;">print</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Char Buffer &quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">while</span><span style="color:#E1E4E8;">(cb.</span><span style="color:#B392F0;">hasRemaining</span><span style="color:#E1E4E8;">())</span></span>
<span class="line"><span style="color:#E1E4E8;">      System.out.</span><span style="color:#B392F0;">print</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">        cb.</span><span style="color:#B392F0;">position</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot; -&gt; &quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> cb.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;, &quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    FloatBuffer fb </span><span style="color:#F97583;">=</span></span>
<span class="line"><span style="color:#E1E4E8;">      ((ByteBuffer)bb.</span><span style="color:#B392F0;">rewind</span><span style="color:#E1E4E8;">()).</span><span style="color:#B392F0;">asFloatBuffer</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    System.out.</span><span style="color:#B392F0;">print</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Float Buffer &quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">while</span><span style="color:#E1E4E8;">(fb.</span><span style="color:#B392F0;">hasRemaining</span><span style="color:#E1E4E8;">())</span></span>
<span class="line"><span style="color:#E1E4E8;">      System.out.</span><span style="color:#B392F0;">print</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">        fb.</span><span style="color:#B392F0;">position</span><span style="color:#E1E4E8;">()</span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot; -&gt; &quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> fb.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;, &quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    IntBuffer ib </span><span style="color:#F97583;">=</span></span>
<span class="line"><span style="color:#E1E4E8;">      ((ByteBuffer)bb.</span><span style="color:#B392F0;">rewind</span><span style="color:#E1E4E8;">()).</span><span style="color:#B392F0;">asIntBuffer</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    System.out.</span><span style="color:#B392F0;">print</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Int Buffer &quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">while</span><span style="color:#E1E4E8;">(ib.</span><span style="color:#B392F0;">hasRemaining</span><span style="color:#E1E4E8;">())</span></span>
<span class="line"><span style="color:#E1E4E8;">      System.out.</span><span style="color:#B392F0;">print</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">        ib.</span><span style="color:#B392F0;">position</span><span style="color:#E1E4E8;">()</span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot; -&gt; &quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> ib.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;, &quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    LongBuffer lb </span><span style="color:#F97583;">=</span></span>
<span class="line"><span style="color:#E1E4E8;">      ((ByteBuffer)bb.</span><span style="color:#B392F0;">rewind</span><span style="color:#E1E4E8;">()).</span><span style="color:#B392F0;">asLongBuffer</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    System.out.</span><span style="color:#B392F0;">print</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Long Buffer &quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">while</span><span style="color:#E1E4E8;">(lb.</span><span style="color:#B392F0;">hasRemaining</span><span style="color:#E1E4E8;">())</span></span>
<span class="line"><span style="color:#E1E4E8;">      System.out.</span><span style="color:#B392F0;">print</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">        lb.</span><span style="color:#B392F0;">position</span><span style="color:#E1E4E8;">()</span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot; -&gt; &quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> lb.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;, &quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    ShortBuffer sb </span><span style="color:#F97583;">=</span></span>
<span class="line"><span style="color:#E1E4E8;">      ((ByteBuffer)bb.</span><span style="color:#B392F0;">rewind</span><span style="color:#E1E4E8;">()).</span><span style="color:#B392F0;">asShortBuffer</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    System.out.</span><span style="color:#B392F0;">print</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Short Buffer &quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">while</span><span style="color:#E1E4E8;">(sb.</span><span style="color:#B392F0;">hasRemaining</span><span style="color:#E1E4E8;">())</span></span>
<span class="line"><span style="color:#E1E4E8;">      System.out.</span><span style="color:#B392F0;">print</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">        sb.</span><span style="color:#B392F0;">position</span><span style="color:#E1E4E8;">()</span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot; -&gt; &quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> sb.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;, &quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    DoubleBuffer db </span><span style="color:#F97583;">=</span></span>
<span class="line"><span style="color:#E1E4E8;">      ((ByteBuffer)bb.</span><span style="color:#B392F0;">rewind</span><span style="color:#E1E4E8;">()).</span><span style="color:#B392F0;">asDoubleBuffer</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    System.out.</span><span style="color:#B392F0;">print</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Double Buffer &quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">while</span><span style="color:#E1E4E8;">(db.</span><span style="color:#B392F0;">hasRemaining</span><span style="color:#E1E4E8;">())</span></span>
<span class="line"><span style="color:#E1E4E8;">      System.out.</span><span style="color:#B392F0;">print</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">        db.</span><span style="color:#B392F0;">position</span><span style="color:#E1E4E8;">()</span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot; -&gt; &quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> db.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;, &quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// newio/ViewBuffers.java</span></span>
<span class="line"><span style="color:#6A737D;">// (c)2017 MindView LLC: see Copyright.txt</span></span>
<span class="line"><span style="color:#6A737D;">// 我们无法保证该代码是否适用于其他用途。</span></span>
<span class="line"><span style="color:#6A737D;">// 访问 http://OnJava8.com 了解更多本书信息。</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> java.nio.</span><span style="color:#005CC5;">*</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ViewBuffers</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    ByteBuffer bb </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ByteBuffer.</span><span style="color:#6F42C1;">wrap</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">byte</span><span style="color:#24292E;">[]{ </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;a&#39;</span><span style="color:#24292E;"> });</span></span>
<span class="line"><span style="color:#24292E;">    bb.</span><span style="color:#6F42C1;">rewind</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    System.out.</span><span style="color:#6F42C1;">print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Byte Buffer &quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">while</span><span style="color:#24292E;">(bb.</span><span style="color:#6F42C1;">hasRemaining</span><span style="color:#24292E;">())</span></span>
<span class="line"><span style="color:#24292E;">      System.out.</span><span style="color:#6F42C1;">print</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">        bb.</span><span style="color:#6F42C1;">position</span><span style="color:#24292E;">()</span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot; -&gt; &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> bb.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;, &quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    CharBuffer cb </span><span style="color:#D73A49;">=</span></span>
<span class="line"><span style="color:#24292E;">      ((ByteBuffer)bb.</span><span style="color:#6F42C1;">rewind</span><span style="color:#24292E;">()).</span><span style="color:#6F42C1;">asCharBuffer</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    System.out.</span><span style="color:#6F42C1;">print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Char Buffer &quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">while</span><span style="color:#24292E;">(cb.</span><span style="color:#6F42C1;">hasRemaining</span><span style="color:#24292E;">())</span></span>
<span class="line"><span style="color:#24292E;">      System.out.</span><span style="color:#6F42C1;">print</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">        cb.</span><span style="color:#6F42C1;">position</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot; -&gt; &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> cb.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;, &quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    FloatBuffer fb </span><span style="color:#D73A49;">=</span></span>
<span class="line"><span style="color:#24292E;">      ((ByteBuffer)bb.</span><span style="color:#6F42C1;">rewind</span><span style="color:#24292E;">()).</span><span style="color:#6F42C1;">asFloatBuffer</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    System.out.</span><span style="color:#6F42C1;">print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Float Buffer &quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">while</span><span style="color:#24292E;">(fb.</span><span style="color:#6F42C1;">hasRemaining</span><span style="color:#24292E;">())</span></span>
<span class="line"><span style="color:#24292E;">      System.out.</span><span style="color:#6F42C1;">print</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">        fb.</span><span style="color:#6F42C1;">position</span><span style="color:#24292E;">()</span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot; -&gt; &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> fb.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;, &quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    IntBuffer ib </span><span style="color:#D73A49;">=</span></span>
<span class="line"><span style="color:#24292E;">      ((ByteBuffer)bb.</span><span style="color:#6F42C1;">rewind</span><span style="color:#24292E;">()).</span><span style="color:#6F42C1;">asIntBuffer</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    System.out.</span><span style="color:#6F42C1;">print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Int Buffer &quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">while</span><span style="color:#24292E;">(ib.</span><span style="color:#6F42C1;">hasRemaining</span><span style="color:#24292E;">())</span></span>
<span class="line"><span style="color:#24292E;">      System.out.</span><span style="color:#6F42C1;">print</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">        ib.</span><span style="color:#6F42C1;">position</span><span style="color:#24292E;">()</span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot; -&gt; &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> ib.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;, &quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    LongBuffer lb </span><span style="color:#D73A49;">=</span></span>
<span class="line"><span style="color:#24292E;">      ((ByteBuffer)bb.</span><span style="color:#6F42C1;">rewind</span><span style="color:#24292E;">()).</span><span style="color:#6F42C1;">asLongBuffer</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    System.out.</span><span style="color:#6F42C1;">print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Long Buffer &quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">while</span><span style="color:#24292E;">(lb.</span><span style="color:#6F42C1;">hasRemaining</span><span style="color:#24292E;">())</span></span>
<span class="line"><span style="color:#24292E;">      System.out.</span><span style="color:#6F42C1;">print</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">        lb.</span><span style="color:#6F42C1;">position</span><span style="color:#24292E;">()</span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot; -&gt; &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> lb.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;, &quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    ShortBuffer sb </span><span style="color:#D73A49;">=</span></span>
<span class="line"><span style="color:#24292E;">      ((ByteBuffer)bb.</span><span style="color:#6F42C1;">rewind</span><span style="color:#24292E;">()).</span><span style="color:#6F42C1;">asShortBuffer</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    System.out.</span><span style="color:#6F42C1;">print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Short Buffer &quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">while</span><span style="color:#24292E;">(sb.</span><span style="color:#6F42C1;">hasRemaining</span><span style="color:#24292E;">())</span></span>
<span class="line"><span style="color:#24292E;">      System.out.</span><span style="color:#6F42C1;">print</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">        sb.</span><span style="color:#6F42C1;">position</span><span style="color:#24292E;">()</span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot; -&gt; &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> sb.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;, &quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    DoubleBuffer db </span><span style="color:#D73A49;">=</span></span>
<span class="line"><span style="color:#24292E;">      ((ByteBuffer)bb.</span><span style="color:#6F42C1;">rewind</span><span style="color:#24292E;">()).</span><span style="color:#6F42C1;">asDoubleBuffer</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    System.out.</span><span style="color:#6F42C1;">print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Double Buffer &quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">while</span><span style="color:#24292E;">(db.</span><span style="color:#6F42C1;">hasRemaining</span><span style="color:#24292E;">())</span></span>
<span class="line"><span style="color:#24292E;">      System.out.</span><span style="color:#6F42C1;">print</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">        db.</span><span style="color:#6F42C1;">position</span><span style="color:#24292E;">()</span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot; -&gt; &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> db.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;, &quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>输出结果：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">Byte Buffer 0 -&gt; 0, 1 -&gt; 0, 2 -&gt; 0, 3 -&gt; 0, 4 -&gt; 0, 5</span></span>
<span class="line"><span style="color:#e1e4e8;">-&gt; 0, 6 -&gt; 0, 7 -&gt; 97,</span></span>
<span class="line"><span style="color:#e1e4e8;">Char Buffer 0 -&gt; NUL, 1 -&gt; NUL, 2 -&gt; NUL, 3 -&gt; a,</span></span>
<span class="line"><span style="color:#e1e4e8;">Float Buffer 0 -&gt; 0.0, 1 -&gt; 1.36E-43,</span></span>
<span class="line"><span style="color:#e1e4e8;">Int Buffer 0 -&gt; 0, 1 -&gt; 97,</span></span>
<span class="line"><span style="color:#e1e4e8;">Long Buffer 0 -&gt; 97,</span></span>
<span class="line"><span style="color:#e1e4e8;">Short Buffer 0 -&gt; 0, 1 -&gt; 0, 2 -&gt; 0, 3 -&gt; 97,</span></span>
<span class="line"><span style="color:#e1e4e8;">Double Buffer 0 -&gt; 4.8E-322,</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">Byte Buffer 0 -&gt; 0, 1 -&gt; 0, 2 -&gt; 0, 3 -&gt; 0, 4 -&gt; 0, 5</span></span>
<span class="line"><span style="color:#24292e;">-&gt; 0, 6 -&gt; 0, 7 -&gt; 97,</span></span>
<span class="line"><span style="color:#24292e;">Char Buffer 0 -&gt; NUL, 1 -&gt; NUL, 2 -&gt; NUL, 3 -&gt; a,</span></span>
<span class="line"><span style="color:#24292e;">Float Buffer 0 -&gt; 0.0, 1 -&gt; 1.36E-43,</span></span>
<span class="line"><span style="color:#24292e;">Int Buffer 0 -&gt; 0, 1 -&gt; 97,</span></span>
<span class="line"><span style="color:#24292e;">Long Buffer 0 -&gt; 97,</span></span>
<span class="line"><span style="color:#24292e;">Short Buffer 0 -&gt; 0, 1 -&gt; 0, 2 -&gt; 0, 3 -&gt; 97,</span></span>
<span class="line"><span style="color:#24292e;">Double Buffer 0 -&gt; 4.8E-322,</span></span></code></pre></div><p><strong>ByteBuffer</strong> 通过“包装”一个 8 字节数组生成，然后通过所有不同基本类型的视图缓冲区显示该数组。下图显示了从不同类型的缓冲区读取数据时，数据显示的差异：</p><p><img src="`+l+'" alt="1554546258113"></p><h3 id="字节存储次序" tabindex="-1">字节存储次序 <a class="header-anchor" href="#字节存储次序" aria-label="Permalink to &quot;字节存储次序&quot;">​</a></h3><p>不同的机器可以使用不同的字节存储顺序（Endians）来存储数据。“高位优先”（Big Endian）：将最重要的字节放在最低内存地址中，而“低位优先”（Little Endian）：将最重要的字节放在最高内存地址中。</p><p>当存储大于单字节的数据时，如 <strong>int</strong>、<strong>float</strong> 等，我们可能需要考虑字节排序问题。<strong>ByteBuffer</strong> 以“高位优先”形式存储数据；通过网络发送的数据总是使用“高位优先”形式。我们可以 使用 <strong>ByteOrder</strong> 的 <code>order()</code> 方法和参数 <strong>ByteOrder.BIG_ENDIAN</strong> 或 <strong>ByteOrder.LITTLE_ENDIAN</strong> 来改变它的字节存储次序。</p><p>下例是一个包含两个字节的 <strong>ByteBuffer</strong> ：</p><p><img src="'+o+`" alt="1554546378822"></p><p>将数据作为 <strong>short</strong> 型来读取（<code>ByteBuffer.asshortbuffer()</code>)），生成数字 97 （00000000 01100001）。更改为“低位优先”后 将生成数字 24832 （01100001 00000000）。</p><p>这显示了字节顺序的变化取决于字节存储次序设置:</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// newio/Endians.java</span></span>
<span class="line"><span style="color:#6A737D;">// (c)2017 MindView LLC: see Copyright.txt</span></span>
<span class="line"><span style="color:#6A737D;">// 我们无法保证该代码是否适用于其他用途。</span></span>
<span class="line"><span style="color:#6A737D;">// 访问 http://OnJava8.com 了解更多本书信息。</span></span>
<span class="line"><span style="color:#6A737D;">// 不同字节存储次序的存储</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> java.nio.</span><span style="color:#79B8FF;">*</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> java.util.</span><span style="color:#79B8FF;">*</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Endians</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] </span><span style="color:#FFAB70;">args</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    ByteBuffer bb </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ByteBuffer.</span><span style="color:#B392F0;">wrap</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">byte</span><span style="color:#E1E4E8;">[</span><span style="color:#79B8FF;">12</span><span style="color:#E1E4E8;">]);</span></span>
<span class="line"><span style="color:#E1E4E8;">    bb.</span><span style="color:#B392F0;">asCharBuffer</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;abcdef&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(Arrays.</span><span style="color:#B392F0;">toString</span><span style="color:#E1E4E8;">(bb.</span><span style="color:#B392F0;">array</span><span style="color:#E1E4E8;">()));</span></span>
<span class="line"><span style="color:#E1E4E8;">    bb.</span><span style="color:#B392F0;">rewind</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    bb.</span><span style="color:#B392F0;">order</span><span style="color:#E1E4E8;">(ByteOrder.BIG_ENDIAN);</span></span>
<span class="line"><span style="color:#E1E4E8;">    bb.</span><span style="color:#B392F0;">asCharBuffer</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;abcdef&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(Arrays.</span><span style="color:#B392F0;">toString</span><span style="color:#E1E4E8;">(bb.</span><span style="color:#B392F0;">array</span><span style="color:#E1E4E8;">()));</span></span>
<span class="line"><span style="color:#E1E4E8;">    bb.</span><span style="color:#B392F0;">rewind</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    bb.</span><span style="color:#B392F0;">order</span><span style="color:#E1E4E8;">(ByteOrder.LITTLE_ENDIAN);</span></span>
<span class="line"><span style="color:#E1E4E8;">    bb.</span><span style="color:#B392F0;">asCharBuffer</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;abcdef&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(Arrays.</span><span style="color:#B392F0;">toString</span><span style="color:#E1E4E8;">(bb.</span><span style="color:#B392F0;">array</span><span style="color:#E1E4E8;">()));</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// newio/Endians.java</span></span>
<span class="line"><span style="color:#6A737D;">// (c)2017 MindView LLC: see Copyright.txt</span></span>
<span class="line"><span style="color:#6A737D;">// 我们无法保证该代码是否适用于其他用途。</span></span>
<span class="line"><span style="color:#6A737D;">// 访问 http://OnJava8.com 了解更多本书信息。</span></span>
<span class="line"><span style="color:#6A737D;">// 不同字节存储次序的存储</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> java.nio.</span><span style="color:#005CC5;">*</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> java.util.</span><span style="color:#005CC5;">*</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Endians</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    ByteBuffer bb </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ByteBuffer.</span><span style="color:#6F42C1;">wrap</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">byte</span><span style="color:#24292E;">[</span><span style="color:#005CC5;">12</span><span style="color:#24292E;">]);</span></span>
<span class="line"><span style="color:#24292E;">    bb.</span><span style="color:#6F42C1;">asCharBuffer</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;abcdef&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(Arrays.</span><span style="color:#6F42C1;">toString</span><span style="color:#24292E;">(bb.</span><span style="color:#6F42C1;">array</span><span style="color:#24292E;">()));</span></span>
<span class="line"><span style="color:#24292E;">    bb.</span><span style="color:#6F42C1;">rewind</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    bb.</span><span style="color:#6F42C1;">order</span><span style="color:#24292E;">(ByteOrder.BIG_ENDIAN);</span></span>
<span class="line"><span style="color:#24292E;">    bb.</span><span style="color:#6F42C1;">asCharBuffer</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;abcdef&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(Arrays.</span><span style="color:#6F42C1;">toString</span><span style="color:#24292E;">(bb.</span><span style="color:#6F42C1;">array</span><span style="color:#24292E;">()));</span></span>
<span class="line"><span style="color:#24292E;">    bb.</span><span style="color:#6F42C1;">rewind</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    bb.</span><span style="color:#6F42C1;">order</span><span style="color:#24292E;">(ByteOrder.LITTLE_ENDIAN);</span></span>
<span class="line"><span style="color:#24292E;">    bb.</span><span style="color:#6F42C1;">asCharBuffer</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;abcdef&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(Arrays.</span><span style="color:#6F42C1;">toString</span><span style="color:#24292E;">(bb.</span><span style="color:#6F42C1;">array</span><span style="color:#24292E;">()));</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>输出结果：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">[0, 97, 0, 98, 0, 99, 0, 100, 0, 101, 0, 102]</span></span>
<span class="line"><span style="color:#e1e4e8;">[0, 97, 0, 98, 0, 99, 0, 100, 0, 101, 0, 102]</span></span>
<span class="line"><span style="color:#e1e4e8;">[97, 0, 98, 0, 99, 0, 100, 0, 101, 0, 102, 0]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">[0, 97, 0, 98, 0, 99, 0, 100, 0, 101, 0, 102]</span></span>
<span class="line"><span style="color:#24292e;">[0, 97, 0, 98, 0, 99, 0, 100, 0, 101, 0, 102]</span></span>
<span class="line"><span style="color:#24292e;">[97, 0, 98, 0, 99, 0, 100, 0, 101, 0, 102, 0]</span></span></code></pre></div><p><strong>ByteBuffer</strong> 分配空间将 <strong>charArray</strong> 中的所有字节作为外部缓冲区保存，因此可以调用 <code>array()</code> 方法来显示底层字节。<code>array()</code> 方法是“可选的”，你只能在数组支持的缓冲区上调用它，否则将抛出 <strong>UnsupportedOperationException</strong> 异常。</p><p><strong>charArray</strong> 通过 <strong>CharBuffer</strong> 视图插入到 <strong>ByteBuffer</strong> 中。当显示底层字节时，默认排序与后续“高位”相同，而“地位”交换字节</p><h2 id="缓冲区数据操作" tabindex="-1">缓冲区数据操作 <a class="header-anchor" href="#缓冲区数据操作" aria-label="Permalink to &quot;缓冲区数据操作&quot;">​</a></h2><p>下图说明了 <strong>nio</strong> 类之间的关系，展示了如何移动和转换数据。例如，要将字节数组写入文件，使用 <strong>ByteBuffer.</strong><code>wrap()</code> 方法包装字节数组，使用 <code>getChannel()</code> 在 <strong>FileOutputStream</strong> 上打开通道，然后从 <strong>ByteBuffer</strong> 将数据写入 <strong>FileChannel</strong>。</p><p><img src="`+e+`" alt="1554546452861"></p><p><strong>ByteBuffer</strong> 是将数据移入和移出通道的唯一方法，我们只能创建一个独立的基本类型缓冲区，或者使用 <code>as</code> 方法从 <strong>ByteBuffer</strong> 获得一个新缓冲区。也就是说，不能将基本类型缓冲区转换为 <strong>ByteBuffer</strong>。但我们能够通过视图缓冲区将基本类型数据移动到 <strong>ByteBuffer</strong> 中或移出 <strong>ByteBuffer</strong>。</p><h3 id="缓冲区细节" tabindex="-1">缓冲区细节 <a class="header-anchor" href="#缓冲区细节" aria-label="Permalink to &quot;缓冲区细节&quot;">​</a></h3><p>缓冲区由数据和四个索引组成，以有效地访问和操作该数据：mark、position、limit 和 capacity（标记、位置、限制和容量）。伴随着的还有一组方法可以设置和重置这些索引，并可查询它们的值。</p><table><thead><tr><th style="text-align:left;"></th><th style="text-align:left;"></th></tr></thead><tbody><tr><td style="text-align:left;"><strong>capacity()</strong></td><td style="text-align:left;">返回缓冲区的 capacity</td></tr><tr><td style="text-align:left;"><strong>clear()</strong></td><td style="text-align:left;">清除缓冲区，将 position 设置为零并 设 limit 为 capacity;可调用此方法来覆盖现有缓冲区</td></tr><tr><td style="text-align:left;"><strong>flip()</strong></td><td style="text-align:left;">将 limit 设置为 position，并将 position 设置为 0;此方法用于准备缓冲区，以便在数据写入缓冲区后进行读取</td></tr><tr><td style="text-align:left;"><strong>limit()</strong></td><td style="text-align:left;">返回 limit 的值</td></tr><tr><td style="text-align:left;"><strong>limit(int limit)</strong></td><td style="text-align:left;">重设 limit</td></tr><tr><td style="text-align:left;"><strong>mark()</strong></td><td style="text-align:left;">设置 mark 为当前的 position</td></tr><tr><td style="text-align:left;"><strong>position()</strong></td><td style="text-align:left;">返回 position</td></tr><tr><td style="text-align:left;"><strong>position(int pos)</strong></td><td style="text-align:left;">设置 position</td></tr><tr><td style="text-align:left;"><strong>remaining()</strong></td><td style="text-align:left;">返回 limit 到 position</td></tr><tr><td style="text-align:left;"><strong>hasRemaining()</strong></td><td style="text-align:left;">如果在 position 与 limit 中间有元素，返回 <code>true</code></td></tr></tbody></table><p>从缓冲区插入和提取数据的方法通过更新索引来反映所做的更改。下例使用一种非常简单的算法（交换相邻字符）来对 <strong>CharBuffer</strong> 中的字符进行加扰和解扰。代码示例：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// newio/UsingBuffers.java</span></span>
<span class="line"><span style="color:#6A737D;">// (c)2017 MindView LLC: see Copyright.txt</span></span>
<span class="line"><span style="color:#6A737D;">// 我们无法保证该代码是否适用于其他用途。</span></span>
<span class="line"><span style="color:#6A737D;">// 访问 http://OnJava8.com 了解更多本书信息。</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> java.nio.</span><span style="color:#79B8FF;">*</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">UsingBuffers</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">symmetricScramble</span><span style="color:#E1E4E8;">(CharBuffer </span><span style="color:#FFAB70;">buffer</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">while</span><span style="color:#E1E4E8;">(buffer.</span><span style="color:#B392F0;">hasRemaining</span><span style="color:#E1E4E8;">()) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      buffer.</span><span style="color:#B392F0;">mark</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">char</span><span style="color:#E1E4E8;"> c1 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> buffer.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">char</span><span style="color:#E1E4E8;"> c2 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> buffer.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">      buffer.</span><span style="color:#B392F0;">reset</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">      buffer.</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(c2).</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(c1);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] </span><span style="color:#FFAB70;">args</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">char</span><span style="color:#E1E4E8;">[] data </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;UsingBuffers&quot;</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">toCharArray</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    ByteBuffer bb </span><span style="color:#F97583;">=</span></span>
<span class="line"><span style="color:#E1E4E8;">      ByteBuffer.</span><span style="color:#B392F0;">allocate</span><span style="color:#E1E4E8;">(data.length </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    CharBuffer cb </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> bb.</span><span style="color:#B392F0;">asCharBuffer</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    cb.</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(data);</span></span>
<span class="line"><span style="color:#E1E4E8;">    System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(cb.</span><span style="color:#B392F0;">rewind</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">symmetricScramble</span><span style="color:#E1E4E8;">(cb);</span></span>
<span class="line"><span style="color:#E1E4E8;">    System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(cb.</span><span style="color:#B392F0;">rewind</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">symmetricScramble</span><span style="color:#E1E4E8;">(cb);</span></span>
<span class="line"><span style="color:#E1E4E8;">    System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(cb.</span><span style="color:#B392F0;">rewind</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// newio/UsingBuffers.java</span></span>
<span class="line"><span style="color:#6A737D;">// (c)2017 MindView LLC: see Copyright.txt</span></span>
<span class="line"><span style="color:#6A737D;">// 我们无法保证该代码是否适用于其他用途。</span></span>
<span class="line"><span style="color:#6A737D;">// 访问 http://OnJava8.com 了解更多本书信息。</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> java.nio.</span><span style="color:#005CC5;">*</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">UsingBuffers</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">symmetricScramble</span><span style="color:#24292E;">(CharBuffer </span><span style="color:#E36209;">buffer</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">while</span><span style="color:#24292E;">(buffer.</span><span style="color:#6F42C1;">hasRemaining</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">      buffer.</span><span style="color:#6F42C1;">mark</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">char</span><span style="color:#24292E;"> c1 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> buffer.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">char</span><span style="color:#24292E;"> c2 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> buffer.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">      buffer.</span><span style="color:#6F42C1;">reset</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">      buffer.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(c2).</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(c1);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">char</span><span style="color:#24292E;">[] data </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;UsingBuffers&quot;</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">toCharArray</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    ByteBuffer bb </span><span style="color:#D73A49;">=</span></span>
<span class="line"><span style="color:#24292E;">      ByteBuffer.</span><span style="color:#6F42C1;">allocate</span><span style="color:#24292E;">(data.length </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    CharBuffer cb </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> bb.</span><span style="color:#6F42C1;">asCharBuffer</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    cb.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(data);</span></span>
<span class="line"><span style="color:#24292E;">    System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(cb.</span><span style="color:#6F42C1;">rewind</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">symmetricScramble</span><span style="color:#24292E;">(cb);</span></span>
<span class="line"><span style="color:#24292E;">    System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(cb.</span><span style="color:#6F42C1;">rewind</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">symmetricScramble</span><span style="color:#24292E;">(cb);</span></span>
<span class="line"><span style="color:#24292E;">    System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(cb.</span><span style="color:#6F42C1;">rewind</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>输出结果：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">UsingBuffers</span></span>
<span class="line"><span style="color:#e1e4e8;">sUniBgfuefsr</span></span>
<span class="line"><span style="color:#e1e4e8;">UsingBuffers</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">UsingBuffers</span></span>
<span class="line"><span style="color:#24292e;">sUniBgfuefsr</span></span>
<span class="line"><span style="color:#24292e;">UsingBuffers</span></span></code></pre></div><p>虽然可以通过使用 <strong>char</strong> 数组调用 <code>wrap()</code> 直接生成 <strong>CharBuffer</strong>，但是底层的 <strong>ByteBuffer</strong> 将被分配，而 <strong>CharBuffer</strong> 将作为 <strong>ByteBuffer</strong> 上的视图生成。这强调了目标始终是操作 <strong>ByteBuffer</strong>，因为它与通道交互。</p><p>下面是程序在 <code>symmetricgrab()</code> 方法入口时缓冲区的样子:</p><p><img src="`+t+'" alt="1554546627710"></p><p>position 指向缓冲区中的第一个元素，capacity 和 limit 紧接在最后一个元素之后。在<code>symmetricgrab()</code> 中，<strong>while</strong> 循环迭代到 position 等于 limit。当在缓冲区上调用相对位置的 <code>get()</code> 或 <code>put()</code> 函数时，缓冲区的位置会发生变化。你可以调用绝对位置的 <code>get()</code> 和 <code>put()</code> 方法，它们包含索引参数：<code>get()</code> 或 <code>put()</code> 发生的位置。这些方法不修改缓冲区 position 的值。</p><p>当控件进入 <strong>while</strong> 循环时，使用 <code>mark()</code> 设置 mark 的值。缓冲区的状态为：</p><p><img src="'+c+'" alt="1554546666685"></p><p>两个相对 <code>get()</code> 调用将前两个字符的值保存在变量 <code>c1</code> 和 <code>c2</code> 中。在这两个调用之后，缓冲区看起来是这样的：</p><p><img src="'+r+'" alt="1554546693664"></p><p>为了执行交换，我们在位置 0 处编写 <code>c2</code>，在位置 1 处编写 <code>c1</code>。我们可以使用绝对 <code>put()</code> 方法来实现这一点，或者用 <code>reset()</code> 方法，将 position 的值设置为 mark：</p><p><img src="'+E+'" alt="1554546847181"></p><p>两个 <code>put()</code> 方法分别编写 <code>c2</code> 和 <code>c1</code> ：</p><p><img src="'+y+'" alt="1554546861836"></p><p>在下一次循环中，将 mark 设置为 position 的当前值：</p><p><img src="'+i+'" alt="1554546881189"></p><p>该过程将继续，直到遍历整个缓冲区为止。在 <strong>while</strong> 循环的末尾，position 位于缓冲区的末尾。如果显示缓冲区，则只显示位置和限制之间的字符。因此，要显示缓冲区的全部内容，必须使用 <code>rewind()</code> 将 position 设置为缓冲区的开始位置。这是 <code>rewind()</code> 调用后缓冲区的状态（mark 的值变成未定义）：</p><p><img src="'+F+`" alt="1554546890132"></p><p>再次调用 <code>symmetricgrab()</code> 方法时，<strong>CharBuffer</strong> 将经历相同的过程并恢复到原始状态。</p><h2 id="内存映射文件" tabindex="-1">内存映射文件 <a class="header-anchor" href="#内存映射文件" aria-label="Permalink to &quot;内存映射文件&quot;">​</a></h2><p>内存映射文件能让你创建和修改那些因为太大而无法放入内存的文件。有了内存映射文件，你就可以认为文件已经全部读进了内存，然后把它当成一个非常大的数组来访问。这种解决办法能大大简化修改文件的代码：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// newio/LargeMappedFiles.java</span></span>
<span class="line"><span style="color:#6A737D;">// (c)2017 MindView LLC: see Copyright.txt</span></span>
<span class="line"><span style="color:#6A737D;">// 我们无法保证该代码是否适用于其他用途。</span></span>
<span class="line"><span style="color:#6A737D;">// 访问 http://OnJava8.com 了解更多本书信息。</span></span>
<span class="line"><span style="color:#6A737D;">// 使用内存映射来创建一个大文件</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> java.nio.</span><span style="color:#79B8FF;">*</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> java.nio.channels.</span><span style="color:#79B8FF;">*</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> java.io.</span><span style="color:#79B8FF;">*</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">LargeMappedFiles</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> length </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0x8000000</span><span style="color:#E1E4E8;">; </span><span style="color:#6A737D;">// 128 MB</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] </span><span style="color:#FFAB70;">args</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> Exception {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">      RandomAccessFile tdat </span><span style="color:#F97583;">=</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">RandomAccessFile</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;test.dat&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;rw&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    ) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      MappedByteBuffer out </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> tdat.</span><span style="color:#B392F0;">getChannel</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">map</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">        FileChannel.MapMode.READ_WRITE, </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, length);</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> length; i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">        out.</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">((</span><span style="color:#F97583;">byte</span><span style="color:#E1E4E8;">)</span><span style="color:#9ECBFF;">&#39;x&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">      System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Finished writing&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> length</span><span style="color:#F97583;">/</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> length</span><span style="color:#F97583;">/</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">6</span><span style="color:#E1E4E8;">; i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">print</span><span style="color:#E1E4E8;">((</span><span style="color:#F97583;">char</span><span style="color:#E1E4E8;">)out.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(i));</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// newio/LargeMappedFiles.java</span></span>
<span class="line"><span style="color:#6A737D;">// (c)2017 MindView LLC: see Copyright.txt</span></span>
<span class="line"><span style="color:#6A737D;">// 我们无法保证该代码是否适用于其他用途。</span></span>
<span class="line"><span style="color:#6A737D;">// 访问 http://OnJava8.com 了解更多本书信息。</span></span>
<span class="line"><span style="color:#6A737D;">// 使用内存映射来创建一个大文件</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> java.nio.</span><span style="color:#005CC5;">*</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> java.nio.channels.</span><span style="color:#005CC5;">*</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> java.io.</span><span style="color:#005CC5;">*</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">LargeMappedFiles</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> length </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0x8000000</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// 128 MB</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> Exception {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">try</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">      RandomAccessFile tdat </span><span style="color:#D73A49;">=</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">RandomAccessFile</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;test.dat&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;rw&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    ) {</span></span>
<span class="line"><span style="color:#24292E;">      MappedByteBuffer out </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> tdat.</span><span style="color:#6F42C1;">getChannel</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">map</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">        FileChannel.MapMode.READ_WRITE, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, length);</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">for</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> length; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">        out.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">((</span><span style="color:#D73A49;">byte</span><span style="color:#24292E;">)</span><span style="color:#032F62;">&#39;x&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">      System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Finished writing&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">for</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> length</span><span style="color:#D73A49;">/</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> length</span><span style="color:#D73A49;">/</span><span style="color:#005CC5;">2</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">6</span><span style="color:#24292E;">; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">print</span><span style="color:#24292E;">((</span><span style="color:#D73A49;">char</span><span style="color:#24292E;">)out.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(i));</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>输出结果：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">Finished writing</span></span>
<span class="line"><span style="color:#e1e4e8;">xxxxxx</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">Finished writing</span></span>
<span class="line"><span style="color:#24292e;">xxxxxx</span></span></code></pre></div><p>为了读写，我们从 <strong>RandomAccessFile</strong> 开始，获取该文件的通道，然后调用 <code>map()</code> 来生成 <strong>MappedByteBuffer</strong> ，这是一种特殊的直接缓冲区。你必须指定要在文件中映射的区域的起始点和长度—这意味着你可以选择映射大文件的较小区域。</p><p><strong>MappedByteBuffer</strong> 继承了 <strong>ByteBuffer</strong>，所以拥有<strong>ByteBuffer</strong> 全部的方法。这里只展示了 <code>put()</code> 和 <code>get()</code> 的最简单用法，但是你也可以使用 <code>asCharBuffer()</code> 等方法。</p><p>使用前面的程序创建的文件长度为 128MB，可能比你的操作系统单次所允许的操作的内存要大。该文件似乎可以同时访问，因为它只有一部分被带进内存，而其他部分被交换出去。这样，一个非常大的文件（最多 2GB）可以很容易地修改。<strong>注意</strong>，操作系统底层的文件映射工具用于性能的最大化。</p><h3 id="性能" tabindex="-1">性能 <a class="header-anchor" href="#性能" aria-label="Permalink to &quot;性能&quot;">​</a></h3><p>虽然旧的 I/O 流的性能通过使用 <strong>NIO</strong> 实现得到了改进，但是映射文件访问往往要快得多。下例带来一个简单的性能比较。代码示例：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// newio/MappedIO.java</span></span>
<span class="line"><span style="color:#6A737D;">// 我们无法保证该代码是否适用于其他用途。</span></span>
<span class="line"><span style="color:#6A737D;">// 访问 http://OnJava8.com 了解更多本书信息。</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> java.util.</span><span style="color:#79B8FF;">*</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> java.nio.</span><span style="color:#79B8FF;">*</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> java.nio.channels.</span><span style="color:#79B8FF;">*</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> java.io.</span><span style="color:#79B8FF;">*</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MappedIO</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> numOfInts </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">4_000_000</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> numOfUbuffInts </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">100_000</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">abstract</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Tester</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> String name;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">Tester</span><span style="color:#E1E4E8;">(String </span><span style="color:#FFAB70;">name</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.name </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> name;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">runTest</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">      System.out.</span><span style="color:#B392F0;">print</span><span style="color:#E1E4E8;">(name </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;: &quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">long</span><span style="color:#E1E4E8;"> start </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> System.</span><span style="color:#B392F0;">nanoTime</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">test</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">double</span><span style="color:#E1E4E8;"> duration </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> System.</span><span style="color:#B392F0;">nanoTime</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> start;</span></span>
<span class="line"><span style="color:#E1E4E8;">      System.out.</span><span style="color:#B392F0;">format</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;%.3f%n&quot;</span><span style="color:#E1E4E8;">, duration</span><span style="color:#F97583;">/</span><span style="color:#79B8FF;">1.0e9</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">abstract</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">test</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">Tester</span><span style="color:#E1E4E8;">[] tests </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Tester</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Stream Write&quot;</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">test</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">          DataOutputStream dos </span><span style="color:#F97583;">=</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">DataOutputStream</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">              </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">BufferedOutputStream</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">FileOutputStream</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">                  </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">File</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;temp.tmp&quot;</span><span style="color:#E1E4E8;">))))</span></span>
<span class="line"><span style="color:#E1E4E8;">        ) {</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> numOfInts; i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">            dos.</span><span style="color:#B392F0;">writeInt</span><span style="color:#E1E4E8;">(i);</span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;">(IOException </span><span style="color:#FFAB70;">e</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">RuntimeException</span><span style="color:#E1E4E8;">(e);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">    },</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Tester</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Mapped Write&quot;</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">test</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">          FileChannel fc </span><span style="color:#F97583;">=</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">RandomAccessFile</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;temp.tmp&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;rw&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">              .</span><span style="color:#B392F0;">getChannel</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">        ) {</span></span>
<span class="line"><span style="color:#E1E4E8;">          IntBuffer ib </span><span style="color:#F97583;">=</span></span>
<span class="line"><span style="color:#E1E4E8;">            fc.</span><span style="color:#B392F0;">map</span><span style="color:#E1E4E8;">(FileChannel.MapMode.READ_WRITE,</span></span>
<span class="line"><span style="color:#E1E4E8;">              </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, fc.</span><span style="color:#B392F0;">size</span><span style="color:#E1E4E8;">()).</span><span style="color:#B392F0;">asIntBuffer</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> numOfInts; i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">            ib.</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(i);</span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;">(IOException </span><span style="color:#FFAB70;">e</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">RuntimeException</span><span style="color:#E1E4E8;">(e);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">    },</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Tester</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Stream Read&quot;</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">test</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">          DataInputStream dis </span><span style="color:#F97583;">=</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">DataInputStream</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">              </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">BufferedInputStream</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">FileInputStream</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;temp.tmp&quot;</span><span style="color:#E1E4E8;">)))</span></span>
<span class="line"><span style="color:#E1E4E8;">        ) {</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> numOfInts; i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">            dis.</span><span style="color:#B392F0;">readInt</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;">(IOException </span><span style="color:#FFAB70;">e</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">RuntimeException</span><span style="color:#E1E4E8;">(e);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">    },</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Tester</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Mapped Read&quot;</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">test</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">          FileChannel fc </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">FileInputStream</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">File</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;temp.tmp&quot;</span><span style="color:#E1E4E8;">)).</span><span style="color:#B392F0;">getChannel</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">        ) {</span></span>
<span class="line"><span style="color:#E1E4E8;">          IntBuffer ib </span><span style="color:#F97583;">=</span></span>
<span class="line"><span style="color:#E1E4E8;">            fc.</span><span style="color:#B392F0;">map</span><span style="color:#E1E4E8;">(FileChannel.MapMode.READ_ONLY,</span></span>
<span class="line"><span style="color:#E1E4E8;">              </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, fc.</span><span style="color:#B392F0;">size</span><span style="color:#E1E4E8;">()).</span><span style="color:#B392F0;">asIntBuffer</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#F97583;">while</span><span style="color:#E1E4E8;">(ib.</span><span style="color:#B392F0;">hasRemaining</span><span style="color:#E1E4E8;">())</span></span>
<span class="line"><span style="color:#E1E4E8;">            ib.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;">(IOException </span><span style="color:#FFAB70;">e</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">RuntimeException</span><span style="color:#E1E4E8;">(e);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">    },</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Tester</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Stream Read/Write&quot;</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">test</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">          RandomAccessFile raf </span><span style="color:#F97583;">=</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">RandomAccessFile</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">              </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">File</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;temp.tmp&quot;</span><span style="color:#E1E4E8;">), </span><span style="color:#9ECBFF;">&quot;rw&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">        ) {</span></span>
<span class="line"><span style="color:#E1E4E8;">          raf.</span><span style="color:#B392F0;">writeInt</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> numOfUbuffInts; i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            raf.</span><span style="color:#B392F0;">seek</span><span style="color:#E1E4E8;">(raf.</span><span style="color:#B392F0;">length</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">            raf.</span><span style="color:#B392F0;">writeInt</span><span style="color:#E1E4E8;">(raf.</span><span style="color:#B392F0;">readInt</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">          }</span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;">(IOException </span><span style="color:#FFAB70;">e</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">RuntimeException</span><span style="color:#E1E4E8;">(e);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">    },</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Tester</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Mapped Read/Write&quot;</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">test</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">          FileChannel fc </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">RandomAccessFile</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">File</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;temp.tmp&quot;</span><span style="color:#E1E4E8;">), </span><span style="color:#9ECBFF;">&quot;rw&quot;</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">getChannel</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">        ) {</span></span>
<span class="line"><span style="color:#E1E4E8;">          IntBuffer ib </span><span style="color:#F97583;">=</span></span>
<span class="line"><span style="color:#E1E4E8;">            fc.</span><span style="color:#B392F0;">map</span><span style="color:#E1E4E8;">(FileChannel.MapMode.READ_WRITE,</span></span>
<span class="line"><span style="color:#E1E4E8;">              </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, fc.</span><span style="color:#B392F0;">size</span><span style="color:#E1E4E8;">()).</span><span style="color:#B392F0;">asIntBuffer</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">          ib.</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> numOfUbuffInts; i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">            ib.</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(ib.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(i </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;">(IOException </span><span style="color:#FFAB70;">e</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">RuntimeException</span><span style="color:#E1E4E8;">(e);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  };</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] </span><span style="color:#FFAB70;">args</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    Arrays.</span><span style="color:#B392F0;">stream</span><span style="color:#E1E4E8;">(tests).</span><span style="color:#B392F0;">forEach</span><span style="color:#E1E4E8;">(Tester</span><span style="color:#F97583;">::</span><span style="color:#E1E4E8;">runTest);</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// newio/MappedIO.java</span></span>
<span class="line"><span style="color:#6A737D;">// 我们无法保证该代码是否适用于其他用途。</span></span>
<span class="line"><span style="color:#6A737D;">// 访问 http://OnJava8.com 了解更多本书信息。</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> java.util.</span><span style="color:#005CC5;">*</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> java.nio.</span><span style="color:#005CC5;">*</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> java.nio.channels.</span><span style="color:#005CC5;">*</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> java.io.</span><span style="color:#005CC5;">*</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MappedIO</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> numOfInts </span><span style="color:#D73A49;">=</span><span style="color:#24292E;">      </span><span style="color:#005CC5;">4_000_000</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> numOfUbuffInts </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">100_000</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">abstract</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Tester</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> String name;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">Tester</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">name</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.name </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> name;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">runTest</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">      System.out.</span><span style="color:#6F42C1;">print</span><span style="color:#24292E;">(name </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;: &quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">long</span><span style="color:#24292E;"> start </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> System.</span><span style="color:#6F42C1;">nanoTime</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">test</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">double</span><span style="color:#24292E;"> duration </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> System.</span><span style="color:#6F42C1;">nanoTime</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> start;</span></span>
<span class="line"><span style="color:#24292E;">      System.out.</span><span style="color:#6F42C1;">format</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;%.3f%n&quot;</span><span style="color:#24292E;">, duration</span><span style="color:#D73A49;">/</span><span style="color:#005CC5;">1.0e9</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">abstract</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">test</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">Tester</span><span style="color:#24292E;">[] tests </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Tester</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Stream Write&quot;</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">      @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">test</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">try</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">          DataOutputStream dos </span><span style="color:#D73A49;">=</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">DataOutputStream</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">              </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">BufferedOutputStream</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">FileOutputStream</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">                  </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">File</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;temp.tmp&quot;</span><span style="color:#24292E;">))))</span></span>
<span class="line"><span style="color:#24292E;">        ) {</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#D73A49;">for</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> numOfInts; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">            dos.</span><span style="color:#6F42C1;">writeInt</span><span style="color:#24292E;">(i);</span></span>
<span class="line"><span style="color:#24292E;">        } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;">(IOException </span><span style="color:#E36209;">e</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">RuntimeException</span><span style="color:#24292E;">(e);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">    },</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Tester</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Mapped Write&quot;</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">      @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">test</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">try</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">          FileChannel fc </span><span style="color:#D73A49;">=</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">RandomAccessFile</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;temp.tmp&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;rw&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">              .</span><span style="color:#6F42C1;">getChannel</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">        ) {</span></span>
<span class="line"><span style="color:#24292E;">          IntBuffer ib </span><span style="color:#D73A49;">=</span></span>
<span class="line"><span style="color:#24292E;">            fc.</span><span style="color:#6F42C1;">map</span><span style="color:#24292E;">(FileChannel.MapMode.READ_WRITE,</span></span>
<span class="line"><span style="color:#24292E;">              </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, fc.</span><span style="color:#6F42C1;">size</span><span style="color:#24292E;">()).</span><span style="color:#6F42C1;">asIntBuffer</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#D73A49;">for</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> numOfInts; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">            ib.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(i);</span></span>
<span class="line"><span style="color:#24292E;">        } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;">(IOException </span><span style="color:#E36209;">e</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">RuntimeException</span><span style="color:#24292E;">(e);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">    },</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Tester</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Stream Read&quot;</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">      @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">test</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">try</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">          DataInputStream dis </span><span style="color:#D73A49;">=</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">DataInputStream</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">              </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">BufferedInputStream</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">FileInputStream</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;temp.tmp&quot;</span><span style="color:#24292E;">)))</span></span>
<span class="line"><span style="color:#24292E;">        ) {</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#D73A49;">for</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> numOfInts; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">            dis.</span><span style="color:#6F42C1;">readInt</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;">(IOException </span><span style="color:#E36209;">e</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">RuntimeException</span><span style="color:#24292E;">(e);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">    },</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Tester</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Mapped Read&quot;</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">      @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">test</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">try</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">          FileChannel fc </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">FileInputStream</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">File</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;temp.tmp&quot;</span><span style="color:#24292E;">)).</span><span style="color:#6F42C1;">getChannel</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">        ) {</span></span>
<span class="line"><span style="color:#24292E;">          IntBuffer ib </span><span style="color:#D73A49;">=</span></span>
<span class="line"><span style="color:#24292E;">            fc.</span><span style="color:#6F42C1;">map</span><span style="color:#24292E;">(FileChannel.MapMode.READ_ONLY,</span></span>
<span class="line"><span style="color:#24292E;">              </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, fc.</span><span style="color:#6F42C1;">size</span><span style="color:#24292E;">()).</span><span style="color:#6F42C1;">asIntBuffer</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#D73A49;">while</span><span style="color:#24292E;">(ib.</span><span style="color:#6F42C1;">hasRemaining</span><span style="color:#24292E;">())</span></span>
<span class="line"><span style="color:#24292E;">            ib.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;">(IOException </span><span style="color:#E36209;">e</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">RuntimeException</span><span style="color:#24292E;">(e);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">    },</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Tester</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Stream Read/Write&quot;</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">      @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">test</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">try</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">          RandomAccessFile raf </span><span style="color:#D73A49;">=</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">RandomAccessFile</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">              </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">File</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;temp.tmp&quot;</span><span style="color:#24292E;">), </span><span style="color:#032F62;">&quot;rw&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">        ) {</span></span>
<span class="line"><span style="color:#24292E;">          raf.</span><span style="color:#6F42C1;">writeInt</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#D73A49;">for</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> numOfUbuffInts; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            raf.</span><span style="color:#6F42C1;">seek</span><span style="color:#24292E;">(raf.</span><span style="color:#6F42C1;">length</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">            raf.</span><span style="color:#6F42C1;">writeInt</span><span style="color:#24292E;">(raf.</span><span style="color:#6F42C1;">readInt</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">          }</span></span>
<span class="line"><span style="color:#24292E;">        } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;">(IOException </span><span style="color:#E36209;">e</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">RuntimeException</span><span style="color:#24292E;">(e);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">    },</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Tester</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Mapped Read/Write&quot;</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">      @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">test</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">try</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">          FileChannel fc </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">RandomAccessFile</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">File</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;temp.tmp&quot;</span><span style="color:#24292E;">), </span><span style="color:#032F62;">&quot;rw&quot;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">getChannel</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">        ) {</span></span>
<span class="line"><span style="color:#24292E;">          IntBuffer ib </span><span style="color:#D73A49;">=</span></span>
<span class="line"><span style="color:#24292E;">            fc.</span><span style="color:#6F42C1;">map</span><span style="color:#24292E;">(FileChannel.MapMode.READ_WRITE,</span></span>
<span class="line"><span style="color:#24292E;">              </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, fc.</span><span style="color:#6F42C1;">size</span><span style="color:#24292E;">()).</span><span style="color:#6F42C1;">asIntBuffer</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">          ib.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#D73A49;">for</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> numOfUbuffInts; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">            ib.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(ib.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(i </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#24292E;">        } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;">(IOException </span><span style="color:#E36209;">e</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">RuntimeException</span><span style="color:#24292E;">(e);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  };</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    Arrays.</span><span style="color:#6F42C1;">stream</span><span style="color:#24292E;">(tests).</span><span style="color:#6F42C1;">forEach</span><span style="color:#24292E;">(Tester</span><span style="color:#D73A49;">::</span><span style="color:#24292E;">runTest);</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>输出结果：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">Stream Write: 0.615</span></span>
<span class="line"><span style="color:#e1e4e8;">Mapped Write: 0.050</span></span>
<span class="line"><span style="color:#e1e4e8;">Stream Read: 0.577</span></span>
<span class="line"><span style="color:#e1e4e8;">Mapped Read: 0.015</span></span>
<span class="line"><span style="color:#e1e4e8;">Stream Read/Write: 4.069</span></span>
<span class="line"><span style="color:#e1e4e8;">Mapped Read/Write: 0.013</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">Stream Write: 0.615</span></span>
<span class="line"><span style="color:#24292e;">Mapped Write: 0.050</span></span>
<span class="line"><span style="color:#24292e;">Stream Read: 0.577</span></span>
<span class="line"><span style="color:#24292e;">Mapped Read: 0.015</span></span>
<span class="line"><span style="color:#24292e;">Stream Read/Write: 4.069</span></span>
<span class="line"><span style="color:#24292e;">Mapped Read/Write: 0.013</span></span></code></pre></div><p><strong>Tester</strong> 使用了模板方法（Template Method）模式，它为匿名内部子类中定义的 <code>test()</code> 的各种实现创建一个测试框架。每个子类都执行一种测试，因此 <code>test()</code> 方法还提供了执行各种I/O 活动的原型。</p><p>虽然映射的写似乎使用 <strong>FileOutputStream</strong>，但是文件映射中的所有输出必须使用 <strong>RandomAccessFile</strong>，就像前面代码中的读/写一样。</p><p>请注意，<code>test()</code> 方法包括初始化各种 I/O 对象的时间，因此，尽管映射文件的设置可能很昂贵，但是与流 I/O 相比，总体收益非常可观。</p><h2 id="文件锁定" tabindex="-1">文件锁定 <a class="header-anchor" href="#文件锁定" aria-label="Permalink to &quot;文件锁定&quot;">​</a></h2><p>文件锁定可同步访问，因此文件可以共享资源。但是，争用同一文件的两个线程可能位于不同的 JVM 中，或者一个可能是 Java 线程，另一个可能是操作系统中的本机线程。文件锁对其他操作系统进程可见，因为 Java 文件锁定直接映射到本机操作系统锁定工具。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// newio/FileLocking.java</span></span>
<span class="line"><span style="color:#6A737D;">// (c)2017 MindView LLC: see Copyright.txt</span></span>
<span class="line"><span style="color:#6A737D;">// 我们无法保证该代码是否适用于其他用途。</span></span>
<span class="line"><span style="color:#6A737D;">// 访问 http://OnJava8.com 了解更多本书信息。</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> java.nio.channels.</span><span style="color:#79B8FF;">*</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> java.util.concurrent.</span><span style="color:#79B8FF;">*</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> java.io.</span><span style="color:#79B8FF;">*</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">FileLocking</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] </span><span style="color:#FFAB70;">args</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">      FileOutputStream fos </span><span style="color:#F97583;">=</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">FileOutputStream</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;file.txt&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">      FileLock fl </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> fos.</span><span style="color:#B392F0;">getChannel</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">tryLock</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">    ) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(fl </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Locked File&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        TimeUnit.MILLISECONDS.</span><span style="color:#B392F0;">sleep</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">100</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        fl.</span><span style="color:#B392F0;">release</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Released Lock&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;">(IOException | InterruptedException </span><span style="color:#FFAB70;">e</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">RuntimeException</span><span style="color:#E1E4E8;">(e);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// newio/FileLocking.java</span></span>
<span class="line"><span style="color:#6A737D;">// (c)2017 MindView LLC: see Copyright.txt</span></span>
<span class="line"><span style="color:#6A737D;">// 我们无法保证该代码是否适用于其他用途。</span></span>
<span class="line"><span style="color:#6A737D;">// 访问 http://OnJava8.com 了解更多本书信息。</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> java.nio.channels.</span><span style="color:#005CC5;">*</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> java.util.concurrent.</span><span style="color:#005CC5;">*</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> java.io.</span><span style="color:#005CC5;">*</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">FileLocking</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">try</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">      FileOutputStream fos </span><span style="color:#D73A49;">=</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">FileOutputStream</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;file.txt&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">      FileLock fl </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> fos.</span><span style="color:#6F42C1;">getChannel</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">tryLock</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">    ) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(fl </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Locked File&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        TimeUnit.MILLISECONDS.</span><span style="color:#6F42C1;">sleep</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">100</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        fl.</span><span style="color:#6F42C1;">release</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Released Lock&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;">(IOException | InterruptedException </span><span style="color:#E36209;">e</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">RuntimeException</span><span style="color:#24292E;">(e);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>输出结果：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">Locked File</span></span>
<span class="line"><span style="color:#e1e4e8;">Released Lock</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">Locked File</span></span>
<span class="line"><span style="color:#24292e;">Released Lock</span></span></code></pre></div><p>通过调用 <strong>FileChannel</strong> 上的 <code>tryLock()</code> 或 <code>lock()</code>，可以获得整个文件的 <strong>FileLock</strong>。（<strong>SocketChannel</strong>、<strong>DatagramChannel</strong> 和 <strong>ServerSocketChannel</strong> 不需要锁定，因为它们本质上是单进程实体；通常不会在两个进程之间共享一个网络套接字）。</p><p><code>tryLock()</code> 是非阻塞的。它试图获取锁，若不能获取（当其他进程已经持有相同的锁，并且它不是共享的），它只是从方法调用返回。</p><p><code>lock()</code> 会阻塞，直到获得锁，或者调用 <code>lock()</code> 的线程中断，或者调用 <code>lock()</code> 方法的通道关闭。使用 <strong>FileLock.</strong><code>release()</code> 释放锁。</p><p>还可以使用</p><blockquote><p><code>tryLock(long position, long size, boolean shared)</code></p></blockquote><p>或</p><blockquote><p><code>lock(long position, long size, boolean shared)</code></p></blockquote><p>锁定文件的一部分，锁住 <strong>size-position</strong> 区域。第三个参数指定是否共享此锁。</p><p>虽然零参数锁定方法适应文件大小的变化，但是如果文件大小发生变化，具有固定大小的锁不会发生变化。如果从一个位置到另一个位置获得一个锁，并且文件的增长超过了 position + size ，那么超出 position + size 的部分没有被锁定。零参数锁定方法锁定整个文件，即使它在增长。</p><p>底层操作系统必须提供对独占锁或共享锁的支持。如果操作系统不支持共享锁并且对一个操作系统发出请求，则使用独占锁。可以使用 <strong>FileLock.</strong><code>isShared()</code> 查询锁的类型（共享或独占）。</p><h3 id="映射文件的部分锁定" tabindex="-1">映射文件的部分锁定 <a class="header-anchor" href="#映射文件的部分锁定" aria-label="Permalink to &quot;映射文件的部分锁定&quot;">​</a></h3><p>文件映射通常用于非常大的文件。你可能需要锁定此类文件的某些部分，以便其他进程可以修改未锁定的部分。例如，数据库必须同时对许多用户可用。这里你可以看到两个线程，每个线程都锁定文件的不同部分:</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// newio/LockingMappedFiles.java</span></span>
<span class="line"><span style="color:#6A737D;">// (c)2017 MindView LLC: see Copyright.txt</span></span>
<span class="line"><span style="color:#6A737D;">// 我们无法保证该代码是否适用于其他用途。</span></span>
<span class="line"><span style="color:#6A737D;">// 访问 http://OnJava8.com 了解更多本书信息。</span></span>
<span class="line"><span style="color:#6A737D;">// Locking portions of a mapped file</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> java.nio.</span><span style="color:#79B8FF;">*</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> java.nio.channels.</span><span style="color:#79B8FF;">*</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> java.io.</span><span style="color:#79B8FF;">*</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">LockingMappedFiles</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> LENGTH </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0x8FFFFFF</span><span style="color:#E1E4E8;">; </span><span style="color:#6A737D;">// 128 MB</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> FileChannel fc;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] </span><span style="color:#FFAB70;">args</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> Exception {</span></span>
<span class="line"><span style="color:#E1E4E8;">    fc </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">RandomAccessFile</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;test.dat&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;rw&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">      .</span><span style="color:#B392F0;">getChannel</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    MappedByteBuffer out </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> fc.</span><span style="color:#B392F0;">map</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">      FileChannel.MapMode.READ_WRITE, </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, LENGTH);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> LENGTH; i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">      out.</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">((</span><span style="color:#F97583;">byte</span><span style="color:#E1E4E8;">)</span><span style="color:#9ECBFF;">&#39;x&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">LockAndModify</span><span style="color:#E1E4E8;">(out, </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> LENGTH</span><span style="color:#F97583;">/</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">LockAndModify</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">      out, LENGTH</span><span style="color:#F97583;">/</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, LENGTH</span><span style="color:#F97583;">/</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> LENGTH</span><span style="color:#F97583;">/</span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">LockAndModify</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Thread</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> ByteBuffer buff;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> start, end;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">LockAndModify</span><span style="color:#E1E4E8;">(ByteBuffer </span><span style="color:#FFAB70;">mbb</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">start</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">end</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.start </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> start;</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.end </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> end;</span></span>
<span class="line"><span style="color:#E1E4E8;">      mbb.</span><span style="color:#B392F0;">limit</span><span style="color:#E1E4E8;">(end);</span></span>
<span class="line"><span style="color:#E1E4E8;">      mbb.</span><span style="color:#B392F0;">position</span><span style="color:#E1E4E8;">(start);</span></span>
<span class="line"><span style="color:#E1E4E8;">      buff </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> mbb.</span><span style="color:#B392F0;">slice</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">start</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">run</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// Exclusive lock with no overlap:</span></span>
<span class="line"><span style="color:#E1E4E8;">        FileLock fl </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> fc.</span><span style="color:#B392F0;">lock</span><span style="color:#E1E4E8;">(start, end, </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#9ECBFF;">&quot;Locked: &quot;</span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> start </span><span style="color:#F97583;">+</span><span style="color:#9ECBFF;">&quot; to &quot;</span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> end);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// Perform modification:</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">while</span><span style="color:#E1E4E8;">(buff.</span><span style="color:#B392F0;">position</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> buff.</span><span style="color:#B392F0;">limit</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">          buff.</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">((</span><span style="color:#F97583;">byte</span><span style="color:#E1E4E8;">)(buff.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"><span style="color:#E1E4E8;">        fl.</span><span style="color:#B392F0;">release</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#9ECBFF;">&quot;Released: &quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> start </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot; to &quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> end);</span></span>
<span class="line"><span style="color:#E1E4E8;">      } </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;">(IOException </span><span style="color:#FFAB70;">e</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">RuntimeException</span><span style="color:#E1E4E8;">(e);</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// newio/LockingMappedFiles.java</span></span>
<span class="line"><span style="color:#6A737D;">// (c)2017 MindView LLC: see Copyright.txt</span></span>
<span class="line"><span style="color:#6A737D;">// 我们无法保证该代码是否适用于其他用途。</span></span>
<span class="line"><span style="color:#6A737D;">// 访问 http://OnJava8.com 了解更多本书信息。</span></span>
<span class="line"><span style="color:#6A737D;">// Locking portions of a mapped file</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> java.nio.</span><span style="color:#005CC5;">*</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> java.nio.channels.</span><span style="color:#005CC5;">*</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> java.io.</span><span style="color:#005CC5;">*</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">LockingMappedFiles</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> LENGTH </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0x8FFFFFF</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// 128 MB</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> FileChannel fc;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> Exception {</span></span>
<span class="line"><span style="color:#24292E;">    fc </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">RandomAccessFile</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;test.dat&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;rw&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">      .</span><span style="color:#6F42C1;">getChannel</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    MappedByteBuffer out </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> fc.</span><span style="color:#6F42C1;">map</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">      FileChannel.MapMode.READ_WRITE, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, LENGTH);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> LENGTH; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">      out.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">((</span><span style="color:#D73A49;">byte</span><span style="color:#24292E;">)</span><span style="color:#032F62;">&#39;x&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">LockAndModify</span><span style="color:#24292E;">(out, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> LENGTH</span><span style="color:#D73A49;">/</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">LockAndModify</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">      out, LENGTH</span><span style="color:#D73A49;">/</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, LENGTH</span><span style="color:#D73A49;">/</span><span style="color:#005CC5;">2</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> LENGTH</span><span style="color:#D73A49;">/</span><span style="color:#005CC5;">4</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">LockAndModify</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Thread</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> ByteBuffer buff;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> start, end;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">LockAndModify</span><span style="color:#24292E;">(ByteBuffer </span><span style="color:#E36209;">mbb</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">start</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">end</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.start </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> start;</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.end </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> end;</span></span>
<span class="line"><span style="color:#24292E;">      mbb.</span><span style="color:#6F42C1;">limit</span><span style="color:#24292E;">(end);</span></span>
<span class="line"><span style="color:#24292E;">      mbb.</span><span style="color:#6F42C1;">position</span><span style="color:#24292E;">(start);</span></span>
<span class="line"><span style="color:#24292E;">      buff </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> mbb.</span><span style="color:#6F42C1;">slice</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">start</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">run</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// Exclusive lock with no overlap:</span></span>
<span class="line"><span style="color:#24292E;">        FileLock fl </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> fc.</span><span style="color:#6F42C1;">lock</span><span style="color:#24292E;">(start, end, </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#032F62;">&quot;Locked: &quot;</span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> start </span><span style="color:#D73A49;">+</span><span style="color:#032F62;">&quot; to &quot;</span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> end);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// Perform modification:</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">while</span><span style="color:#24292E;">(buff.</span><span style="color:#6F42C1;">position</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> buff.</span><span style="color:#6F42C1;">limit</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">          buff.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">((</span><span style="color:#D73A49;">byte</span><span style="color:#24292E;">)(buff.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#24292E;">        fl.</span><span style="color:#6F42C1;">release</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#032F62;">&quot;Released: &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> start </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot; to &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> end);</span></span>
<span class="line"><span style="color:#24292E;">      } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;">(IOException </span><span style="color:#E36209;">e</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">RuntimeException</span><span style="color:#24292E;">(e);</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>输出结果：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">Locked: 75497471 to 113246206</span></span>
<span class="line"><span style="color:#e1e4e8;">Locked: 0 to 50331647</span></span>
<span class="line"><span style="color:#e1e4e8;">Released: 75497471 to 113246206</span></span>
<span class="line"><span style="color:#e1e4e8;">Released: 0 to 50331647</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">Locked: 75497471 to 113246206</span></span>
<span class="line"><span style="color:#24292e;">Locked: 0 to 50331647</span></span>
<span class="line"><span style="color:#24292e;">Released: 75497471 to 113246206</span></span>
<span class="line"><span style="color:#24292e;">Released: 0 to 50331647</span></span></code></pre></div><p><strong>LockAndModify</strong> 线程类设置缓冲区并创建要修改的 <code>slice()</code>，在 <code>run()</code> 中，锁在文件通道上获取（不能在缓冲区上获取锁—只能在通道上获取锁）。<code>lock()</code> 的调用非常类似于获取对象上的线程锁 —— 现在有了一个“临界区”，可以对文件的这部分进行独占访问。<a href="./更多详情可参考[附录:并发底层原理](./book/Appendix-Low-Level-Concurrency.md)。.html">^1</a></p><p>当 JVM 退出或关闭获取锁的通道时，锁会自动释放，但是你也可以显式地调用 <strong>FileLock</strong> 对象上的 <code>release()</code>，如上所示。</p>`,137),f=[B];function d(C,g,A,D,h,b){return n(),a("div",null,f)}const w=s(u,[["render",d]]);export{v as __pageData,w as default};
