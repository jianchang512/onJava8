import{_ as s,o as n,c as a,Q as l}from"./chunks/framework.c3fbb961.js";const d=JSON.parse('{"title":"第二十三章 注解","description":"","frontmatter":{},"headers":[],"relativePath":"book/23-Annotations.md","filePath":"book/23-Annotations.md"}'),p={name:"book/23-Annotations.md"},o=l(`<p>[TOC]</p><h1 id="第二十三章-注解" tabindex="-1">第二十三章 注解 <a class="header-anchor" href="#第二十三章-注解" aria-label="Permalink to &quot;第二十三章 注解&quot;">​</a></h1><p>注解（也被称为元数据）为我们在代码中添加信息提供了一种形式化的方式，使我们可以在稍后的某个时刻更容易的使用这些数据。</p><p>注解在一定程度上是把元数据和源代码文件结合在一起的趋势所激发的，而不是保存在外部文档。这同样是对像 C# 语言对于 Java 语言特性压力的一种回应。</p><p>注解是 Java 5 所引入的众多语言变化之一。它们提供了 Java 无法表达的但是你需要完整表述程序所需的信息。因此，注解使得我们可以以编译器验证的格式存储程序的额外信息。注解可以生成描述符文件，甚至是新的类定义，并且有助于减轻编写“样板”代码的负担。通过使用注解，你可以将元数据保存在 Java 源代码中。并拥有如下优势：简单易读的代码，编译器类型检查，使用 annotation API 为自己的注解构造处理工具。即使 Java 定义了一些类型的元数据，但是一般来说注解类型的添加和如何使用完全取决于你。</p><p>注解的语法十分简单，主要是在现有语法中添加 @ 符号。Java 5 引入了前三种定义在 <strong>java.lang</strong> 包中的注解：</p><ul><li><strong>@Override</strong>：表示当前的方法定义将覆盖基类的方法。如果你不小心拼写错误，或者方法签名被错误拼写的时候，编译器就会发出错误提示。</li><li><strong>@Deprecated</strong>：如果使用该注解的元素被调用，编译器就会发出警告信息。</li><li><strong>@SuppressWarnings</strong>：关闭不当的编译器警告信息。</li><li><strong>@SafeVarargs</strong>：在 Java 7 中加入用于禁止对具有泛型varargs参数的方法或构造函数的调用方发出警告。</li><li><strong>@FunctionalInterface</strong>：Java 8 中加入用于表示类型声明为函数式接口</li></ul><p>还有 5 种额外的注解类型用于创造新的注解。你将会在这一章学习它们。</p><p>每当创建涉及重复工作的类或接口时，你通常可以使用注解来自动化和简化流程。例如在 Enterprise JavaBean（EJB）中的许多额外工作就是通过注解来消除的。</p><p>注解的出现可以替代一些现有的系统，例如 XDoclet，它是一种独立的文档化工具，专门设计用来生成注解风格的文档。与之相比，注解是真正语言层级的概念，以前构造出来就享有编译器的类型检查保护。注解在源代码级别保存所有信息而不是通过注释文字，这使得代码更加整洁和便于维护。通过使用拓展的 annotation API 或稍后在本章节可以看到的外部的字节码工具类库，你会拥有对源代码及字节码强大的检查与操作能力。</p><h2 id="基本语法" tabindex="-1">基本语法 <a class="header-anchor" href="#基本语法" aria-label="Permalink to &quot;基本语法&quot;">​</a></h2><p>在下面的例子中，使用 <code>@Test</code> 对 <code>testExecute()</code> 进行注解。该注解本身不做任何事情，但是编译器要保证其类路径上有 <code>@Test</code> 注解的定义。你将在本章看到，我们通过注解创建了一个工具用于运行这个方法：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// annotations/Testable.java</span></span>
<span class="line"><span style="color:#F97583;">package</span><span style="color:#E1E4E8;"> annotations;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> onjava.atunit.</span><span style="color:#79B8FF;">*</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Testable</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">execute</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Executing..&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Test</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">testExecute</span><span style="color:#E1E4E8;">() { </span><span style="color:#B392F0;">execute</span><span style="color:#E1E4E8;">(); }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// annotations/Testable.java</span></span>
<span class="line"><span style="color:#D73A49;">package</span><span style="color:#24292E;"> annotations;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> onjava.atunit.</span><span style="color:#005CC5;">*</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Testable</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">execute</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Executing..&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Test</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">testExecute</span><span style="color:#24292E;">() { </span><span style="color:#6F42C1;">execute</span><span style="color:#24292E;">(); }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>被注解标注的方法和其他的方法没有任何区别。在这个例子中，注解 <code>@Test</code> 可以和任何修饰符共同用于方法，诸如 <strong>public</strong>、<strong>static</strong> 或 <strong>void</strong>。从语法的角度上看，注解的使用方式和修饰符的使用方式一致。</p><h3 id="定义注解" tabindex="-1">定义注解 <a class="header-anchor" href="#定义注解" aria-label="Permalink to &quot;定义注解&quot;">​</a></h3><p>如下是一个注解的定义。注解的定义看起来很像接口的定义。事实上，它们和其他 Java 接口一样，也会被编译成 class 文件。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// onjava/atunit/Test.java</span></span>
<span class="line"><span style="color:#6A737D;">// The @Test tag</span></span>
<span class="line"><span style="color:#F97583;">package</span><span style="color:#E1E4E8;"> onjava.atunit;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> java.lang.annotation.</span><span style="color:#79B8FF;">*</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Target</span><span style="color:#E1E4E8;">(ElementType.METHOD)</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Retention</span><span style="color:#E1E4E8;">(RetentionPolicy.RUNTIME)</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> @</span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">Test</span><span style="color:#E1E4E8;"> {}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// onjava/atunit/Test.java</span></span>
<span class="line"><span style="color:#6A737D;">// The @Test tag</span></span>
<span class="line"><span style="color:#D73A49;">package</span><span style="color:#24292E;"> onjava.atunit;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> java.lang.annotation.</span><span style="color:#005CC5;">*</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Target</span><span style="color:#24292E;">(ElementType.METHOD)</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Retention</span><span style="color:#24292E;">(RetentionPolicy.RUNTIME)</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> @</span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">Test</span><span style="color:#24292E;"> {}</span></span></code></pre></div><p>除了 @ 符号之外， <code>@Test</code> 的定义看起来更像一个空接口。注解的定义也需要一些元注解（meta-annoation），比如 <code>@Target</code> 和 <code>@Retention</code>。<code>@Target</code> 定义你的注解可以应用在哪里（例如是方法还是字段）。<code>@Retention</code> 定义了注解在哪里可用，在源代码中（SOURCE），class文件（CLASS）中或者是在运行时（RUNTIME）。</p><p>注解通常会包含一些表示特定值的元素。当分析处理注解的时候，程序或工具可以利用这些值。注解的元素看起来就像接口的方法，但是可以为其指定默认值。</p><p>不包含任何元素的注解称为标记注解（marker annotation），例如上例中的 <code>@Test</code> 就是标记注解。</p><p>下面是一个简单的注解，我们可以用它来追踪项目中的用例。程序员可以使用该注解来标注满足特定用例的一个方法或者一组方法。于是，项目经理可以通过统计已经实现的用例来掌控项目的进展，而开发者在维护项目时可以轻松的找到用例用于更新，或者他们可以调试系统中业务逻辑。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// annotations/UseCase.java</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> java.lang.annotation.</span><span style="color:#79B8FF;">*</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Target</span><span style="color:#E1E4E8;">(ElementType.METHOD)</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Retention</span><span style="color:#E1E4E8;">(RetentionPolicy.RUNTIME)</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> @</span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">UseCase</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">id</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    String </span><span style="color:#B392F0;">description</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;no description&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// annotations/UseCase.java</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> java.lang.annotation.</span><span style="color:#005CC5;">*</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Target</span><span style="color:#24292E;">(ElementType.METHOD)</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Retention</span><span style="color:#24292E;">(RetentionPolicy.RUNTIME)</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> @</span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">UseCase</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">id</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    String </span><span style="color:#6F42C1;">description</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;no description&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>注意 <strong>id</strong> 和 <strong>description</strong> 与方法定义类似。由于编译器会对 <strong>id</strong> 进行类型检查，因此将跟踪数据库与用例文档和源代码相关联是可靠的方式。<strong>description</strong> 元素拥有一个 <strong>default</strong> 值，如果在注解某个方法时没有给出 <strong>description</strong> 的值。则该注解的处理器会使用此元素的默认值。</p><p>在下面的类中，有三个方法被注解为用例：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// annotations/PasswordUtils.java</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> java.util.</span><span style="color:#79B8FF;">*</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">PasswordUtils</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">UseCase</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">id</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">47</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">description</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#9ECBFF;">&quot;Passwords must contain at least one numeric&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">validatePassword</span><span style="color:#E1E4E8;">(String </span><span style="color:#FFAB70;">passwd</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> (passwd.</span><span style="color:#B392F0;">matches</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#79B8FF;">\\\\</span><span style="color:#9ECBFF;">w*</span><span style="color:#79B8FF;">\\\\</span><span style="color:#9ECBFF;">d</span><span style="color:#79B8FF;">\\\\</span><span style="color:#9ECBFF;">w*&quot;</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">UseCase</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">id</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">48</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> String </span><span style="color:#B392F0;">encryptPassword</span><span style="color:#E1E4E8;">(String </span><span style="color:#FFAB70;">passwd</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">StringBuilder</span><span style="color:#E1E4E8;">(passwd)</span></span>
<span class="line"><span style="color:#E1E4E8;">                .</span><span style="color:#B392F0;">reverse</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">toString</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">UseCase</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">id</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">49</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">description</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#9ECBFF;">&quot;New passwords can&#39;t equal previously used ones&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">checkForNewPassword</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">            List&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#FFAB70;">prevPasswords</span><span style="color:#E1E4E8;">, String </span><span style="color:#FFAB70;">passwd</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">prevPasswords.</span><span style="color:#B392F0;">contains</span><span style="color:#E1E4E8;">(passwd);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// annotations/PasswordUtils.java</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> java.util.</span><span style="color:#005CC5;">*</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">PasswordUtils</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">UseCase</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">id</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">47</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">description</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#032F62;">&quot;Passwords must contain at least one numeric&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">validatePassword</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">passwd</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> (passwd.</span><span style="color:#6F42C1;">matches</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;</span><span style="color:#005CC5;">\\\\</span><span style="color:#032F62;">w*</span><span style="color:#005CC5;">\\\\</span><span style="color:#032F62;">d</span><span style="color:#005CC5;">\\\\</span><span style="color:#032F62;">w*&quot;</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">UseCase</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">id</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">48</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> String </span><span style="color:#6F42C1;">encryptPassword</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">passwd</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">StringBuilder</span><span style="color:#24292E;">(passwd)</span></span>
<span class="line"><span style="color:#24292E;">                .</span><span style="color:#6F42C1;">reverse</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">toString</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">UseCase</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">id</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">49</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">description</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#032F62;">&quot;New passwords can&#39;t equal previously used ones&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">checkForNewPassword</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">            List&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; </span><span style="color:#E36209;">prevPasswords</span><span style="color:#24292E;">, String </span><span style="color:#E36209;">passwd</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">!</span><span style="color:#24292E;">prevPasswords.</span><span style="color:#6F42C1;">contains</span><span style="color:#24292E;">(passwd);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>注解的元素在使用时表现为 名-值 对的形式，并且需要放置在 <code>@UseCase</code> 声明之后的括号内。在 <code>encryptPassword()</code> 方法的注解中，并没有给出 <strong>description</strong> 的值，所以在 <strong>@interface UseCase</strong> 的注解处理器分析处理这个类的时候会使用该元素的默认值。</p><p>你应该能够想象到如何使用这套工具来“勾勒”出将要建造的系统，然后在建造的过程中逐渐实现系统的各项功能。</p><h3 id="元注解" tabindex="-1">元注解 <a class="header-anchor" href="#元注解" aria-label="Permalink to &quot;元注解&quot;">​</a></h3><p>Java 语言中目前有 5 种标准注解（前面介绍过），以及 5 种元注解。元注解用于注解其他的注解</p><table><thead><tr><th>注解</th><th>解释</th></tr></thead><tbody><tr><td>@Target</td><td>表示注解可以用于哪些地方。可能的 <strong>ElementType</strong> 参数包括：<br><strong>CONSTRUCTOR</strong>：构造器的声明<br><strong>FIELD</strong>：字段声明（包括 enum 实例）<br><strong>LOCAL_VARIABLE</strong>：局部变量声明<br><strong>METHOD</strong>：方法声明<br><strong>PACKAGE</strong>：包声明<br><strong>PARAMETER</strong>：参数声明<br><strong>TYPE</strong>：类、接口（包括注解类型）或者 enum 声明</td></tr><tr><td>@Retention</td><td>表示注解信息保存的时长。可选的 <strong>RetentionPolicy</strong> 参数包括：<br><strong>SOURCE</strong>：注解将被编译器丢弃<br><strong>CLASS</strong>：注解在 class 文件中可用，但是会被 VM 丢弃。<br><strong>RUNTIME</strong>：VM 将在运行期也保留注解，因此可以通过反射机制读取注解的信息。</td></tr><tr><td>@Documented</td><td>将此注解保存在 Javadoc 中</td></tr><tr><td>@Inherited</td><td>允许子类继承父类的注解</td></tr><tr><td>@Repeatable</td><td>允许一个注解可以被使用一次或者多次（Java 8）。</td></tr></tbody></table><p>大多数时候，程序员定义自己的注解，并编写自己的处理器来处理他们。</p><h2 id="编写注解处理器" tabindex="-1">编写注解处理器 <a class="header-anchor" href="#编写注解处理器" aria-label="Permalink to &quot;编写注解处理器&quot;">​</a></h2><p>如果没有用于读取注解的工具，那么注解不会比注释更有用。使用注解中一个很重要的部分就是，创建与使用注解处理器。Java 拓展了反射机制的 API 用于帮助你创造这类工具。同时他还提供了 javac 编译器钩子在编译时使用注解。</p><p>下面是一个非常简单的注解处理器，我们用它来读取被注解的 <strong>PasswordUtils</strong> 类，并且使用反射机制来寻找 <strong>@UseCase</strong> 标记。给定一组 <strong>id</strong> 值，然后列出在 <strong>PasswordUtils</strong> 中找到的用例，以及缺失的用例。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// annotations/UseCaseTracker.java</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> java.util.</span><span style="color:#79B8FF;">*</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> java.util.stream.</span><span style="color:#79B8FF;">*</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> java.lang.reflect.</span><span style="color:#79B8FF;">*</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">UseCaseTracker</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">trackUseCases</span><span style="color:#E1E4E8;">(List&lt;</span><span style="color:#F97583;">Integer</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#FFAB70;">useCases</span><span style="color:#E1E4E8;">, Class&lt;</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#FFAB70;">cl</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;">(Method m </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> cl.</span><span style="color:#B392F0;">getDeclaredMethods</span><span style="color:#E1E4E8;">()) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            UseCase uc </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> m.</span><span style="color:#B392F0;">getAnnotation</span><span style="color:#E1E4E8;">(UseCase.class);</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(uc </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Found Use Case &quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span></span>
<span class="line"><span style="color:#E1E4E8;">                        uc.</span><span style="color:#B392F0;">id</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;"> &quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> uc.</span><span style="color:#B392F0;">description</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">                useCases.</span><span style="color:#B392F0;">remove</span><span style="color:#E1E4E8;">(Integer.</span><span style="color:#B392F0;">valueOf</span><span style="color:#E1E4E8;">(uc.</span><span style="color:#B392F0;">id</span><span style="color:#E1E4E8;">()));</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        useCases.</span><span style="color:#B392F0;">forEach</span><span style="color:#E1E4E8;">(i </span><span style="color:#F97583;">-&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">                System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Missing use case &quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> i));</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] </span><span style="color:#FFAB70;">args</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        List&lt;</span><span style="color:#F97583;">Integer</span><span style="color:#E1E4E8;">&gt; useCases </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> IntStream.</span><span style="color:#B392F0;">range</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">47</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">51</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">                .</span><span style="color:#B392F0;">boxed</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">collect</span><span style="color:#E1E4E8;">(Collectors.</span><span style="color:#B392F0;">toList</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">trackUseCases</span><span style="color:#E1E4E8;">(useCases, PasswordUtils.class);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// annotations/UseCaseTracker.java</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> java.util.</span><span style="color:#005CC5;">*</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> java.util.stream.</span><span style="color:#005CC5;">*</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> java.lang.reflect.</span><span style="color:#005CC5;">*</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">UseCaseTracker</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">trackUseCases</span><span style="color:#24292E;">(List&lt;</span><span style="color:#D73A49;">Integer</span><span style="color:#24292E;">&gt; </span><span style="color:#E36209;">useCases</span><span style="color:#24292E;">, Class&lt;</span><span style="color:#D73A49;">?</span><span style="color:#24292E;">&gt; </span><span style="color:#E36209;">cl</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">for</span><span style="color:#24292E;">(Method m </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> cl.</span><span style="color:#6F42C1;">getDeclaredMethods</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">            UseCase uc </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> m.</span><span style="color:#6F42C1;">getAnnotation</span><span style="color:#24292E;">(UseCase.class);</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(uc </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">                System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Found Use Case &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span></span>
<span class="line"><span style="color:#24292E;">                        uc.</span><span style="color:#6F42C1;">id</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;"> &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> uc.</span><span style="color:#6F42C1;">description</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">                useCases.</span><span style="color:#6F42C1;">remove</span><span style="color:#24292E;">(Integer.</span><span style="color:#6F42C1;">valueOf</span><span style="color:#24292E;">(uc.</span><span style="color:#6F42C1;">id</span><span style="color:#24292E;">()));</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        useCases.</span><span style="color:#6F42C1;">forEach</span><span style="color:#24292E;">(i </span><span style="color:#D73A49;">-&gt;</span></span>
<span class="line"><span style="color:#24292E;">                System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Missing use case &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> i));</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        List&lt;</span><span style="color:#D73A49;">Integer</span><span style="color:#24292E;">&gt; useCases </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> IntStream.</span><span style="color:#6F42C1;">range</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">47</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">51</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">                .</span><span style="color:#6F42C1;">boxed</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">collect</span><span style="color:#24292E;">(Collectors.</span><span style="color:#6F42C1;">toList</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">trackUseCases</span><span style="color:#24292E;">(useCases, PasswordUtils.class);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>输出为：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Found Use Case </span><span style="color:#79B8FF;">48</span></span>
<span class="line"><span style="color:#E1E4E8;">no description</span></span>
<span class="line"><span style="color:#E1E4E8;">Found Use Case </span><span style="color:#79B8FF;">47</span></span>
<span class="line"><span style="color:#E1E4E8;">Passwords must contain at least one numeric</span></span>
<span class="line"><span style="color:#E1E4E8;">Found Use Case </span><span style="color:#79B8FF;">49</span></span>
<span class="line"><span style="color:#E1E4E8;">New passwords can</span><span style="color:#9ECBFF;">&#39;t equal previously used ones</span></span>
<span class="line"><span style="color:#9ECBFF;">Missing use case 50</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Found Use Case </span><span style="color:#005CC5;">48</span></span>
<span class="line"><span style="color:#24292E;">no description</span></span>
<span class="line"><span style="color:#24292E;">Found Use Case </span><span style="color:#005CC5;">47</span></span>
<span class="line"><span style="color:#24292E;">Passwords must contain at least one numeric</span></span>
<span class="line"><span style="color:#24292E;">Found Use Case </span><span style="color:#005CC5;">49</span></span>
<span class="line"><span style="color:#24292E;">New passwords can</span><span style="color:#032F62;">&#39;t equal previously used ones</span></span>
<span class="line"><span style="color:#032F62;">Missing use case 50</span></span></code></pre></div><p>这个程序用了两个反射的方法：<code>getDeclaredMethods()</code> 和 <code>getAnnotation()</code>，它们都属于 <strong>AnnotatedElement</strong> 接口（<strong>Class</strong>，<strong>Method</strong> 与 <strong>Field</strong> 类都实现了该接口）。<code>getAnnotation()</code> 方法返回指定类型的注解对象，在本例中就是 “<strong>UseCase</strong>”。如果被注解的方法上没有该类型的注解，返回值就为 <strong>null</strong>。我们通过调用 <code>id()</code> 和 <code>description()</code> 方法来提取元素值。注意 <code>encryptPassword()</code> 方法在注解的时候没有指定 <strong>description</strong> 的值，因此处理器在处理它对应的注解时，通过 <code>description()</code> 取得的是默认值 “no description”。</p><h3 id="注解元素" tabindex="-1">注解元素 <a class="header-anchor" href="#注解元素" aria-label="Permalink to &quot;注解元素&quot;">​</a></h3><p>在 <strong>UseCase.java</strong> 中定义的 <strong>@UseCase</strong> 的标签包含 int 元素 <strong>id</strong> 和 String 元素 <strong>description</strong>。注解元素可用的类型如下所示：</p><ul><li>所有基本类型（int、float、boolean等）</li><li>String</li><li>Class</li><li>enum</li><li>Annotation</li><li>以上类型的数组</li></ul><p>如果你使用了其他类型，编译器就会报错。注意，也不允许使用任何包装类型，但是由于自动装箱的存在，这不算是什么限制。注解也可以作为元素的类型。稍后你会看到，注解嵌套是一个非常有用的技巧。</p><h3 id="默认值限制" tabindex="-1">默认值限制 <a class="header-anchor" href="#默认值限制" aria-label="Permalink to &quot;默认值限制&quot;">​</a></h3><p>编译器对于元素的默认值有些过于挑剔。首先，元素不能有不确定的值。也就是说，元素要么有默认值，要么就在使用注解时提供元素的值。</p><p>这里有另外一个限制：任何非基本类型的元素， 无论是在源代码声明时还是在注解接口中定义默认值时，都不能使用 null 作为其值。这个限制使得处理器很难表现一个元素的存在或者缺失的状态，因为在每个注解的声明中，所有的元素都存在，并且具有相应的值。为了绕开这个约束，可以自定义一些特殊的值，比如空字符串或者负数用于表达某个元素不存在。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// annotations/SimulatingNull.java</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> java.lang.annotation.</span><span style="color:#79B8FF;">*</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Target</span><span style="color:#E1E4E8;">(ElementType.METHOD)</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Retention</span><span style="color:#E1E4E8;">(RetentionPolicy.RUNTIME)</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> @</span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">SimulatingNull</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">id</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    String </span><span style="color:#B392F0;">description</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// annotations/SimulatingNull.java</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> java.lang.annotation.</span><span style="color:#005CC5;">*</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Target</span><span style="color:#24292E;">(ElementType.METHOD)</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Retention</span><span style="color:#24292E;">(RetentionPolicy.RUNTIME)</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> @</span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">SimulatingNull</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">id</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    String </span><span style="color:#6F42C1;">description</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>这是一个在定义注解的习惯用法。</p><h3 id="生成外部文件" tabindex="-1">生成外部文件 <a class="header-anchor" href="#生成外部文件" aria-label="Permalink to &quot;生成外部文件&quot;">​</a></h3><p>当有些框架需要一些额外的信息才能与你的源代码协同工作，这种情况下注解就会变得十分有用。像 Enterprise JavaBeans (EJB3 之前)这样的技术，每一个 Bean 都需要需要大量的接口和部署描述文件，而这些就是“样板”文件。Web Service，自定义标签库以及对象/关系映射工具（例如 Toplink 和 Hibernate）通常都需要 XML 描述文件，而这些文件脱离于代码之外。除了定义 Java 类，程序员还必须忍受沉闷，重复的提供某些信息，例如类名和包名等已经在原始类中已经提供的信息。每当你使用外部描述文件时，他就拥有了一个类的两个独立信息源，这经常导致代码的同步问题。同时这也要求了为项目工作的程序员在知道如何编写 Java 程序的同时，也必须知道如何编辑描述文件。</p><p>假设你想提供一些基本的对象/关系映射功能，能够自动生成数据库表。你可以使用 XML 描述文件来指明类的名字、每个成员以及数据库映射的相关信息。但是，通过使用注解，你可以把所有信息都保存在 <strong>JavaBean</strong> 源文件中。为此你需要一些用于定义数据库表名称、数据库列以及将 SQL 类型映射到属性的注解。</p><p>以下是一个注解的定义，它告诉注解处理器应该创建一个数据库表：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// annotations/database/DBTable.java</span></span>
<span class="line"><span style="color:#F97583;">package</span><span style="color:#E1E4E8;"> annotations.database;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> java.lang.annotation.</span><span style="color:#79B8FF;">*</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Target</span><span style="color:#E1E4E8;">(ElementType.TYPE) </span><span style="color:#6A737D;">// Applies to classes only</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Retention</span><span style="color:#E1E4E8;">(RetentionPolicy.RUNTIME)</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> @</span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">DBTable</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    String </span><span style="color:#B392F0;">name</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// annotations/database/DBTable.java</span></span>
<span class="line"><span style="color:#D73A49;">package</span><span style="color:#24292E;"> annotations.database;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> java.lang.annotation.</span><span style="color:#005CC5;">*</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Target</span><span style="color:#24292E;">(ElementType.TYPE) </span><span style="color:#6A737D;">// Applies to classes only</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Retention</span><span style="color:#24292E;">(RetentionPolicy.RUNTIME)</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> @</span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">DBTable</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    String </span><span style="color:#6F42C1;">name</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>在 <code>@Target</code> 注解中指定的每一个 <strong>ElementType</strong> 就是一个约束，它告诉编译器，这个自定义的注解只能用于指定的类型。你可以指定 <strong>enum ElementType</strong> 中的一个值，或者以逗号分割的形式指定多个值。如果想要将注解应用于所有的 <strong>ElementType</strong>，那么可以省去 <code>@Target</code> 注解，但是这并不常见。</p><p>注意 <strong>@DBTable</strong> 中有一个 <code>name()</code> 元素，该注解通过这个元素为处理器创建数据库时提供表的名字。</p><p>如下是修饰字段的注解：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// annotations/database/Constraints.java</span></span>
<span class="line"><span style="color:#F97583;">package</span><span style="color:#E1E4E8;"> annotations.database;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> java.lang.annotation.</span><span style="color:#79B8FF;">*</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Target</span><span style="color:#E1E4E8;">(ElementType.FIELD)</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Retention</span><span style="color:#E1E4E8;">(RetentionPolicy.RUNTIME)</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> @</span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">Constraints</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">primaryKey</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">allowNull</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">unique</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// annotations/database/Constraints.java</span></span>
<span class="line"><span style="color:#D73A49;">package</span><span style="color:#24292E;"> annotations.database;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> java.lang.annotation.</span><span style="color:#005CC5;">*</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Target</span><span style="color:#24292E;">(ElementType.FIELD)</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Retention</span><span style="color:#24292E;">(RetentionPolicy.RUNTIME)</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> @</span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">Constraints</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">primaryKey</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">allowNull</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">unique</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// annotations/database/SQLString.java</span></span>
<span class="line"><span style="color:#F97583;">package</span><span style="color:#E1E4E8;"> annotations.database;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> java.lang.annotation.</span><span style="color:#79B8FF;">*</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Target</span><span style="color:#E1E4E8;">(ElementType.FIELD)</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Retention</span><span style="color:#E1E4E8;">(RetentionPolicy.RUNTIME)</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> @</span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">SQLString</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">value</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    String </span><span style="color:#B392F0;">name</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    Constraints </span><span style="color:#B392F0;">constraints</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> @</span><span style="color:#F97583;">Constraints</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// annotations/database/SQLString.java</span></span>
<span class="line"><span style="color:#D73A49;">package</span><span style="color:#24292E;"> annotations.database;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> java.lang.annotation.</span><span style="color:#005CC5;">*</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Target</span><span style="color:#24292E;">(ElementType.FIELD)</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Retention</span><span style="color:#24292E;">(RetentionPolicy.RUNTIME)</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> @</span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">SQLString</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">value</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    String </span><span style="color:#6F42C1;">name</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    Constraints </span><span style="color:#6F42C1;">constraints</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> @</span><span style="color:#D73A49;">Constraints</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// annotations/database/SQLInteger.java</span></span>
<span class="line"><span style="color:#F97583;">package</span><span style="color:#E1E4E8;"> annotations.database;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> java.lang.annotation.</span><span style="color:#79B8FF;">*</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Target</span><span style="color:#E1E4E8;">(ElementType.FIELD)</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Retention</span><span style="color:#E1E4E8;">(RetentionPolicy.RUNTIME)</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> @</span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">SQLInteger</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    String </span><span style="color:#B392F0;">name</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    Constraints </span><span style="color:#B392F0;">constraints</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> @</span><span style="color:#F97583;">Constraints</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// annotations/database/SQLInteger.java</span></span>
<span class="line"><span style="color:#D73A49;">package</span><span style="color:#24292E;"> annotations.database;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> java.lang.annotation.</span><span style="color:#005CC5;">*</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Target</span><span style="color:#24292E;">(ElementType.FIELD)</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Retention</span><span style="color:#24292E;">(RetentionPolicy.RUNTIME)</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> @</span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">SQLInteger</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    String </span><span style="color:#6F42C1;">name</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    Constraints </span><span style="color:#6F42C1;">constraints</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> @</span><span style="color:#D73A49;">Constraints</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p><strong>@Constraints</strong> 注解允许处理器提供数据库表的元数据。<strong>@Constraints</strong> 代表了数据库通常提供的约束的一小部分，但是它所要表达的思想已经很清楚了。<code>primaryKey()</code>，<code>allowNull()</code> 和 <code>unique()</code> 元素明显的提供了默认值，从而使得在大多数情况下，该注解的使用者不需要输入太多东西。</p><p>另外两个 <strong>@interface</strong> 定义的是 SQL 类型。如果希望这个框架更有价值的话，我们应该为每个 SQL 类型都定义相应的注解。不过为为示例，两个元素足够了。</p><p>这些 SQL 类型具有 <code>name()</code> 元素和 <code>constraints()</code> 元素。后者利用了嵌套注解的功能，将数据库列的类型约束信息嵌入其中。注意 <code>constraints()</code> 元素的默认值是 <strong>@Constraints</strong>。由于在 <strong>@Constraints</strong> 注解类型之后，没有在括号中指明 <strong>@Constraints</strong> 元素的值，因此，<strong>constraints()</strong> 的默认值为所有元素都为默认值的 <strong>@Constraints</strong> 注解。如果要使得嵌入的 <strong>@Constraints</strong> 注解中的 <code>unique()</code> 元素为 true，并作为 <code>constraints()</code> 元素的默认值，你可以像如下定义：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// annotations/database/Uniqueness.java</span></span>
<span class="line"><span style="color:#6A737D;">// Sample of nested annotations</span></span>
<span class="line"><span style="color:#F97583;">package</span><span style="color:#E1E4E8;"> annotations.database;</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> @</span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">Uniqueness</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    Constraints </span><span style="color:#B392F0;">constraints</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> @</span><span style="color:#F97583;">Constraints</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">unique</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// annotations/database/Uniqueness.java</span></span>
<span class="line"><span style="color:#6A737D;">// Sample of nested annotations</span></span>
<span class="line"><span style="color:#D73A49;">package</span><span style="color:#24292E;"> annotations.database;</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> @</span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">Uniqueness</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    Constraints </span><span style="color:#6F42C1;">constraints</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> @</span><span style="color:#D73A49;">Constraints</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">unique</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>下面是一个简单的，使用了如上注解的类：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// annotations/database/Member.java</span></span>
<span class="line"><span style="color:#F97583;">package</span><span style="color:#E1E4E8;"> annotations.database;</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">DBTable</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">name</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;MEMBER&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Member</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">SQLString</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">30</span><span style="color:#E1E4E8;">) String firstName;</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">SQLString</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">50</span><span style="color:#E1E4E8;">) String lastName;</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">SQLInteger</span><span style="color:#E1E4E8;"> Integer age;</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">SQLString</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">value</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">30</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#79B8FF;">constraints</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> @</span><span style="color:#F97583;">Constraints</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">primaryKey</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">))</span></span>
<span class="line"><span style="color:#E1E4E8;">    String reference;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> memberCount;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> String </span><span style="color:#B392F0;">getReference</span><span style="color:#E1E4E8;">() { </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> reference; }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> String </span><span style="color:#B392F0;">getFirstName</span><span style="color:#E1E4E8;">() { </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> firstName; }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> String </span><span style="color:#B392F0;">getLastName</span><span style="color:#E1E4E8;">() { </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> lastName; }</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> String </span><span style="color:#B392F0;">toString</span><span style="color:#E1E4E8;">() { </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> reference; }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> Integer </span><span style="color:#B392F0;">getAge</span><span style="color:#E1E4E8;">() { </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> age; }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// annotations/database/Member.java</span></span>
<span class="line"><span style="color:#D73A49;">package</span><span style="color:#24292E;"> annotations.database;</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">DBTable</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">name</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;MEMBER&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Member</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">SQLString</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">30</span><span style="color:#24292E;">) String firstName;</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">SQLString</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">50</span><span style="color:#24292E;">) String lastName;</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">SQLInteger</span><span style="color:#24292E;"> Integer age;</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">SQLString</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">value</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">30</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#005CC5;">constraints</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> @</span><span style="color:#D73A49;">Constraints</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">primaryKey</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">))</span></span>
<span class="line"><span style="color:#24292E;">    String reference;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> memberCount;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> String </span><span style="color:#6F42C1;">getReference</span><span style="color:#24292E;">() { </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> reference; }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> String </span><span style="color:#6F42C1;">getFirstName</span><span style="color:#24292E;">() { </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> firstName; }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> String </span><span style="color:#6F42C1;">getLastName</span><span style="color:#24292E;">() { </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> lastName; }</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> String </span><span style="color:#6F42C1;">toString</span><span style="color:#24292E;">() { </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> reference; }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Integer </span><span style="color:#6F42C1;">getAge</span><span style="color:#24292E;">() { </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> age; }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>类注解 <strong>@DBTable</strong> 注解给定了元素值 MEMBER，它将会作为标的名字。类的属性 <strong>firstName</strong> 和 <strong>lastName</strong> 都被注解为 <strong>@SQLString</strong> 类型并且给了默认元素值分别为 30 和 50。这些注解都有两个有趣的地方：首先，他们都使用了嵌入的 <strong>@Constraints</strong> 注解的默认值；其次，它们都是用了快捷方式特性。如果你在注解中定义了名为 <strong>value</strong> 的元素，并且在使用该注解时，<strong>value</strong> 为唯一一个需要赋值的元素，你就不需要使用名—值对的语法，你只需要在括号中给出 <strong>value</strong> 元素的值即可。这可以应用于任何合法类型的元素。这也限制了你必须将元素命名为 <strong>value</strong>，不过在上面的例子中，这样的注解语句也更易于理解：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">SQLString</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">30</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">SQLString</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">30</span><span style="color:#24292E;">)</span></span></code></pre></div><p>处理器将在创建表的时候使用该值设置 SQL 列的大小。</p><p>默认值的语法虽然很灵巧，但是它很快就变的复杂起来。以 <strong>reference</strong> 字段的注解为例，上面拥有 <strong>@SQLString</strong> 注解，但是这个字段也将成为表的主键，因此在嵌入的 <strong>@Constraint</strong> 注解中设定 <strong>primaryKey</strong> 元素的值。这时事情就变的复杂了。你不得不为这个嵌入的注解使用很长的键—值对的形式，来指定元素名称和 <strong>@interface</strong> 的名称。同时，由于有特殊命名的 <strong>value</strong> 也不是唯一需要赋值的元素，因此不能再使用快捷方式特性。如你所见，最终结果不算清晰易懂。</p><h3 id="替代方案" tabindex="-1">替代方案 <a class="header-anchor" href="#替代方案" aria-label="Permalink to &quot;替代方案&quot;">​</a></h3><p>可以使用多种不同的方式来定义自己的注解用于上述任务。例如，你可以使用一个单一的注解类 <strong>@TableColumn</strong>，它拥有一个 <strong>enum</strong> 元素，元素值定义了 <strong>STRING</strong>，<strong>INTEGER</strong>，<strong>FLOAT</strong> 等类型。这消除了每个 SQL 类型都需要定义一个 <strong>@interface</strong> 的负担，不过也使得用额外信息修饰 SQL 类型变的不可能，这些额外的信息例如长度或精度等，都可能是非常有用的。</p><p>你也可以使用一个 <strong>String</strong> 类型的元素来描述实际的 SQL 类型，比如 “VARCHAR(30)” 或者 “INTEGER”。这使得你可以修饰 SQL 类型，但是这也将 Java 类型到 SQL 类型的映射绑在了一起，这不是一个好的设计。你并不想在数据库更改之后重新编译你的代码；如果我们只需要告诉注解处理器，我们正在使用的是什么“口味（favor）”的 SQL，然后注解助力器来为我们处理 SQL 类型的细节，那将是一个优雅的设计。</p><p>第三种可行的方案是一起使用两个注解，<strong>@Constraints</strong> 和相应的 SQL 类型（例如，<strong>@SQLInteger</strong>）去注解同一个字段。这可能会让代码有些混乱，但是编译器允许你对同一个目标使用多个注解。在 Java 8，在使用多个注解的时候，你可以重复使用同一个注解。</p><h3 id="注解不支持继承" tabindex="-1">注解不支持继承 <a class="header-anchor" href="#注解不支持继承" aria-label="Permalink to &quot;注解不支持继承&quot;">​</a></h3><p>你不能使用 <strong>extends</strong> 关键字来继承 <strong>@interfaces</strong>。这真是一个遗憾，如果可以定义 <strong>@TableColumn</strong> 注解（参考前面的建议），同时嵌套一个 <strong>@SQLType</strong> 类型的注解，将成为一个优雅的设计。按照这种方式，你可以通过继承 <strong>@SQLType</strong> 来创造各种 SQL 类型。例如 <strong>@SQLInteger</strong> 和 <strong>@SQLString</strong>。如果支持继承，就会大大减少打字的工作量并且使得语法更整洁。在 Java 的未来版本中，似乎没有任何关于让注解支持继承的提案，所以在当前情况下，上例中的解决方案可能已经是最佳方案了。</p><h3 id="实现处理器" tabindex="-1">实现处理器 <a class="header-anchor" href="#实现处理器" aria-label="Permalink to &quot;实现处理器&quot;">​</a></h3><p>下面是一个注解处理器的例子，他将读取一个类文件，检查上面的数据库注解，并生成用于创建数据库的 SQL 命令：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// annotations/database/TableCreator.java</span></span>
<span class="line"><span style="color:#6A737D;">// Reflection-based annotation processor</span></span>
<span class="line"><span style="color:#6A737D;">// {java annotations.database.TableCreator</span></span>
<span class="line"><span style="color:#6A737D;">// annotations.database.Member}</span></span>
<span class="line"><span style="color:#F97583;">package</span><span style="color:#E1E4E8;"> annotations.database;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> java.lang.annotation.Annotation;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> java.lang.reflect.Field;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> java.util.ArrayList;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> java.util.List;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">TableCreator</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] </span><span style="color:#FFAB70;">args</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> Exception {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (args.length </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#9ECBFF;">&quot;arguments: annotated classes&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">            System.</span><span style="color:#B392F0;">exit</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (String className </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> args) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            Class&lt;</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">&gt; cl </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Class.</span><span style="color:#B392F0;">forName</span><span style="color:#E1E4E8;">(className);</span></span>
<span class="line"><span style="color:#E1E4E8;">            DBTable dbTable </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> cl.</span><span style="color:#B392F0;">getAnnotation</span><span style="color:#E1E4E8;">(DBTable.class);</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (dbTable </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">                        </span><span style="color:#9ECBFF;">&quot;No DBTable annotations in class &quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span></span>
<span class="line"><span style="color:#E1E4E8;">                                className);</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">continue</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">            String tableName </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> dbTable.</span><span style="color:#B392F0;">name</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// If the name is empty, use the Class name:</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (tableName.</span><span style="color:#B392F0;">length</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">                tableName </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> cl.</span><span style="color:#B392F0;">getName</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">toUpperCase</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">            List&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; columnDefs </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> ArrayList&lt;&gt;();</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (Field field </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> cl.</span><span style="color:#B392F0;">getDeclaredFields</span><span style="color:#E1E4E8;">()) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                String columnName </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">Annotation</span><span style="color:#E1E4E8;">[] anns </span><span style="color:#F97583;">=</span></span>
<span class="line"><span style="color:#E1E4E8;">                        field.</span><span style="color:#B392F0;">getDeclaredAnnotations</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (anns.length </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#F97583;">continue</span><span style="color:#E1E4E8;">; </span><span style="color:#6A737D;">// Not a db table column</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (anns[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">instanceof</span><span style="color:#E1E4E8;"> SQLInteger) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                    SQLInteger sInt </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (SQLInteger) anns[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">];</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#6A737D;">// Use field name if name not specified</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (sInt.</span><span style="color:#B392F0;">name</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">length</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">                        columnName </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> field.</span><span style="color:#B392F0;">getName</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">toUpperCase</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#F97583;">else</span></span>
<span class="line"><span style="color:#E1E4E8;">                        columnName </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> sInt.</span><span style="color:#B392F0;">name</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">                    columnDefs.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(columnName </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot; INT&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span></span>
<span class="line"><span style="color:#E1E4E8;">                            </span><span style="color:#B392F0;">getConstraints</span><span style="color:#E1E4E8;">(sInt.</span><span style="color:#B392F0;">constraints</span><span style="color:#E1E4E8;">()));</span></span>
<span class="line"><span style="color:#E1E4E8;">                }</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (anns[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">instanceof</span><span style="color:#E1E4E8;"> SQLString) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                    SQLString sString </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (SQLString) anns[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">];</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#6A737D;">// Use field name if name not specified.</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (sString.</span><span style="color:#B392F0;">name</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">length</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">                        columnName </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> field.</span><span style="color:#B392F0;">getName</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">toUpperCase</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#F97583;">else</span></span>
<span class="line"><span style="color:#E1E4E8;">                        columnName </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> sString.</span><span style="color:#B392F0;">name</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">                    columnDefs.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(columnName </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot; VARCHAR(&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span></span>
<span class="line"><span style="color:#E1E4E8;">                            sString.</span><span style="color:#B392F0;">value</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;)&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span></span>
<span class="line"><span style="color:#E1E4E8;">                            </span><span style="color:#B392F0;">getConstraints</span><span style="color:#E1E4E8;">(sString.</span><span style="color:#B392F0;">constraints</span><span style="color:#E1E4E8;">()));</span></span>
<span class="line"><span style="color:#E1E4E8;">                }</span></span>
<span class="line"><span style="color:#E1E4E8;">                StringBuilder createCommand </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">StringBuilder</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">                        </span><span style="color:#9ECBFF;">&quot;CREATE TABLE &quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> tableName </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;(&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (String columnDef </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> columnDefs)</span></span>
<span class="line"><span style="color:#E1E4E8;">                    createCommand.</span><span style="color:#B392F0;">append</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">                            </span><span style="color:#9ECBFF;">&quot;</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;"> &quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> columnDef </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;,&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#6A737D;">// Remove trailing comma</span></span>
<span class="line"><span style="color:#E1E4E8;">                String tableCreate </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> createCommand.</span><span style="color:#B392F0;">substring</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">                        </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, createCommand.</span><span style="color:#B392F0;">length</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;);&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">                System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Table Creation SQL for &quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span></span>
<span class="line"><span style="color:#E1E4E8;">                        className </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot; is:</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> tableCreate);</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> String </span><span style="color:#B392F0;">getConstraints</span><span style="color:#E1E4E8;">(Constraints </span><span style="color:#FFAB70;">con</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        String constraints </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">con.</span><span style="color:#B392F0;">allowNull</span><span style="color:#E1E4E8;">())</span></span>
<span class="line"><span style="color:#E1E4E8;">            constraints </span><span style="color:#F97583;">+=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot; NOT NULL&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (con.</span><span style="color:#B392F0;">primaryKey</span><span style="color:#E1E4E8;">())</span></span>
<span class="line"><span style="color:#E1E4E8;">            constraints </span><span style="color:#F97583;">+=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot; PRIMARY KEY&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (con.</span><span style="color:#B392F0;">unique</span><span style="color:#E1E4E8;">())</span></span>
<span class="line"><span style="color:#E1E4E8;">            constraints </span><span style="color:#F97583;">+=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot; UNIQUE&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> constraints;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// annotations/database/TableCreator.java</span></span>
<span class="line"><span style="color:#6A737D;">// Reflection-based annotation processor</span></span>
<span class="line"><span style="color:#6A737D;">// {java annotations.database.TableCreator</span></span>
<span class="line"><span style="color:#6A737D;">// annotations.database.Member}</span></span>
<span class="line"><span style="color:#D73A49;">package</span><span style="color:#24292E;"> annotations.database;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> java.lang.annotation.Annotation;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> java.lang.reflect.Field;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> java.util.ArrayList;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> java.util.List;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TableCreator</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> Exception {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (args.length </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#032F62;">&quot;arguments: annotated classes&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">            System.</span><span style="color:#6F42C1;">exit</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (String className </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> args) {</span></span>
<span class="line"><span style="color:#24292E;">            Class&lt;</span><span style="color:#D73A49;">?</span><span style="color:#24292E;">&gt; cl </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Class.</span><span style="color:#6F42C1;">forName</span><span style="color:#24292E;">(className);</span></span>
<span class="line"><span style="color:#24292E;">            DBTable dbTable </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> cl.</span><span style="color:#6F42C1;">getAnnotation</span><span style="color:#24292E;">(DBTable.class);</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (dbTable </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">                System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">                        </span><span style="color:#032F62;">&quot;No DBTable annotations in class &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span></span>
<span class="line"><span style="color:#24292E;">                                className);</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">continue</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">            String tableName </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> dbTable.</span><span style="color:#6F42C1;">name</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// If the name is empty, use the Class name:</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (tableName.</span><span style="color:#6F42C1;">length</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">                tableName </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> cl.</span><span style="color:#6F42C1;">getName</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">toUpperCase</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">            List&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; columnDefs </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> ArrayList&lt;&gt;();</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (Field field </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> cl.</span><span style="color:#6F42C1;">getDeclaredFields</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">                String columnName </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">Annotation</span><span style="color:#24292E;">[] anns </span><span style="color:#D73A49;">=</span></span>
<span class="line"><span style="color:#24292E;">                        field.</span><span style="color:#6F42C1;">getDeclaredAnnotations</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (anns.length </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#D73A49;">continue</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// Not a db table column</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (anns[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">instanceof</span><span style="color:#24292E;"> SQLInteger) {</span></span>
<span class="line"><span style="color:#24292E;">                    SQLInteger sInt </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (SQLInteger) anns[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#6A737D;">// Use field name if name not specified</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (sInt.</span><span style="color:#6F42C1;">name</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">length</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">                        columnName </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> field.</span><span style="color:#6F42C1;">getName</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">toUpperCase</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#D73A49;">else</span></span>
<span class="line"><span style="color:#24292E;">                        columnName </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> sInt.</span><span style="color:#6F42C1;">name</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">                    columnDefs.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(columnName </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot; INT&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span></span>
<span class="line"><span style="color:#24292E;">                            </span><span style="color:#6F42C1;">getConstraints</span><span style="color:#24292E;">(sInt.</span><span style="color:#6F42C1;">constraints</span><span style="color:#24292E;">()));</span></span>
<span class="line"><span style="color:#24292E;">                }</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (anns[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">instanceof</span><span style="color:#24292E;"> SQLString) {</span></span>
<span class="line"><span style="color:#24292E;">                    SQLString sString </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (SQLString) anns[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#6A737D;">// Use field name if name not specified.</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (sString.</span><span style="color:#6F42C1;">name</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">length</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">                        columnName </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> field.</span><span style="color:#6F42C1;">getName</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">toUpperCase</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#D73A49;">else</span></span>
<span class="line"><span style="color:#24292E;">                        columnName </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> sString.</span><span style="color:#6F42C1;">name</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">                    columnDefs.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(columnName </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot; VARCHAR(&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span></span>
<span class="line"><span style="color:#24292E;">                            sString.</span><span style="color:#6F42C1;">value</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;)&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span></span>
<span class="line"><span style="color:#24292E;">                            </span><span style="color:#6F42C1;">getConstraints</span><span style="color:#24292E;">(sString.</span><span style="color:#6F42C1;">constraints</span><span style="color:#24292E;">()));</span></span>
<span class="line"><span style="color:#24292E;">                }</span></span>
<span class="line"><span style="color:#24292E;">                StringBuilder createCommand </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">StringBuilder</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">                        </span><span style="color:#032F62;">&quot;CREATE TABLE &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> tableName </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;(&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (String columnDef </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> columnDefs)</span></span>
<span class="line"><span style="color:#24292E;">                    createCommand.</span><span style="color:#6F42C1;">append</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">                            </span><span style="color:#032F62;">&quot;</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;"> &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> columnDef </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;,&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;">// Remove trailing comma</span></span>
<span class="line"><span style="color:#24292E;">                String tableCreate </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> createCommand.</span><span style="color:#6F42C1;">substring</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">                        </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, createCommand.</span><span style="color:#6F42C1;">length</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;);&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">                System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Table Creation SQL for &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span></span>
<span class="line"><span style="color:#24292E;">                        className </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot; is:</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> tableCreate);</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> String </span><span style="color:#6F42C1;">getConstraints</span><span style="color:#24292E;">(Constraints </span><span style="color:#E36209;">con</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        String constraints </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">con.</span><span style="color:#6F42C1;">allowNull</span><span style="color:#24292E;">())</span></span>
<span class="line"><span style="color:#24292E;">            constraints </span><span style="color:#D73A49;">+=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot; NOT NULL&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (con.</span><span style="color:#6F42C1;">primaryKey</span><span style="color:#24292E;">())</span></span>
<span class="line"><span style="color:#24292E;">            constraints </span><span style="color:#D73A49;">+=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot; PRIMARY KEY&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (con.</span><span style="color:#6F42C1;">unique</span><span style="color:#24292E;">())</span></span>
<span class="line"><span style="color:#24292E;">            constraints </span><span style="color:#D73A49;">+=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot; UNIQUE&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> constraints;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>输出为：</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">Table</span><span style="color:#E1E4E8;"> Creation </span><span style="color:#F97583;">SQL</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">annotations</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">database</span><span style="color:#E1E4E8;">.Member </span><span style="color:#F97583;">is</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#F97583;">CREATE</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">TABLE</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MEMBER</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    FIRSTNAME </span><span style="color:#F97583;">VARCHAR</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">30</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"><span style="color:#F97583;">Table</span><span style="color:#E1E4E8;"> Creation </span><span style="color:#F97583;">SQL</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">annotations</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">database</span><span style="color:#E1E4E8;">.Member </span><span style="color:#F97583;">is</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#F97583;">CREATE</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">TABLE</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MEMBER</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    FIRSTNAME </span><span style="color:#F97583;">VARCHAR</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">30</span><span style="color:#E1E4E8;">),</span></span>
<span class="line"><span style="color:#E1E4E8;">    LASTNAME </span><span style="color:#F97583;">VARCHAR</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">50</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"><span style="color:#F97583;">Table</span><span style="color:#E1E4E8;"> Creation </span><span style="color:#F97583;">SQL</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">annotations</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">database</span><span style="color:#E1E4E8;">.Member </span><span style="color:#F97583;">is</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#F97583;">CREATE</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">TABLE</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MEMBER</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    FIRSTNAME </span><span style="color:#F97583;">VARCHAR</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">30</span><span style="color:#E1E4E8;">),</span></span>
<span class="line"><span style="color:#E1E4E8;">    LASTNAME </span><span style="color:#F97583;">VARCHAR</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">50</span><span style="color:#E1E4E8;">),</span></span>
<span class="line"><span style="color:#E1E4E8;">    AGE </span><span style="color:#F97583;">INT</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">Table</span><span style="color:#E1E4E8;"> Creation </span><span style="color:#F97583;">SQL</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">annotations</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">database</span><span style="color:#E1E4E8;">.Member </span><span style="color:#F97583;">is</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#F97583;">CREATE</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">TABLE</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MEMBER</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    FIRSTNAME </span><span style="color:#F97583;">VARCHAR</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">30</span><span style="color:#E1E4E8;">),</span></span>
<span class="line"><span style="color:#E1E4E8;">    LASTNAME </span><span style="color:#F97583;">VARCHAR</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">50</span><span style="color:#E1E4E8;">),</span></span>
<span class="line"><span style="color:#E1E4E8;">    AGE </span><span style="color:#F97583;">INT</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    REFERENCE </span><span style="color:#F97583;">VARCHAR</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">30</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">PRIMARY KEY</span><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">Table</span><span style="color:#24292E;"> Creation </span><span style="color:#D73A49;">SQL</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">annotations</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">database</span><span style="color:#24292E;">.Member </span><span style="color:#D73A49;">is</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#D73A49;">CREATE</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">TABLE</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MEMBER</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    FIRSTNAME </span><span style="color:#D73A49;">VARCHAR</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">30</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#D73A49;">Table</span><span style="color:#24292E;"> Creation </span><span style="color:#D73A49;">SQL</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">annotations</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">database</span><span style="color:#24292E;">.Member </span><span style="color:#D73A49;">is</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#D73A49;">CREATE</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">TABLE</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MEMBER</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    FIRSTNAME </span><span style="color:#D73A49;">VARCHAR</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">30</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">    LASTNAME </span><span style="color:#D73A49;">VARCHAR</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">50</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#D73A49;">Table</span><span style="color:#24292E;"> Creation </span><span style="color:#D73A49;">SQL</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">annotations</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">database</span><span style="color:#24292E;">.Member </span><span style="color:#D73A49;">is</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#D73A49;">CREATE</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">TABLE</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MEMBER</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    FIRSTNAME </span><span style="color:#D73A49;">VARCHAR</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">30</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">    LASTNAME </span><span style="color:#D73A49;">VARCHAR</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">50</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">    AGE </span><span style="color:#D73A49;">INT</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">Table</span><span style="color:#24292E;"> Creation </span><span style="color:#D73A49;">SQL</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">annotations</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">database</span><span style="color:#24292E;">.Member </span><span style="color:#D73A49;">is</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#D73A49;">CREATE</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">TABLE</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MEMBER</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    FIRSTNAME </span><span style="color:#D73A49;">VARCHAR</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">30</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">    LASTNAME </span><span style="color:#D73A49;">VARCHAR</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">50</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">    AGE </span><span style="color:#D73A49;">INT</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    REFERENCE </span><span style="color:#D73A49;">VARCHAR</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">30</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">PRIMARY KEY</span><span style="color:#24292E;">);</span></span></code></pre></div><p>主方法会循环处理命令行传入的每一个类名。每一个类都是用 <code> forName()</code> 方法进行加载，并使用 <code>getAnnotation(DBTable.class)</code> 来检查该类是否带有 <strong>@DBTable</strong> 注解。如果存在，将表名存储起来。然后读取这个类的所有字段，并使用 <code>getDeclaredAnnotations()</code> 进行检查。这个方法返回一个包含特定字段上所有注解的数组。然后使用 <strong>instanceof</strong> 操作符判断这些注解是否是 <strong>@SQLInteger</strong> 或者 <strong>@SQLString</strong> 类型。如果是的话，在对应的处理块中将构造出相应的数据库列的字符串片段。注意，由于注解没有继承机制，如果要获取近似多态的行为，使用 <code>getDeclaredAnnotations()</code> 似乎是唯一的方式。</p><p>嵌套的 <strong>@Constraint</strong> 注解被传递给 <code>getConstraints()</code>方法，并用它来构造一个包含 SQL 约束的 String 对象。</p><p>需要提醒的是，上面演示的技巧对于真实的对象/映射关系而言，是十分幼稚的。使用 <strong>@DBTable</strong> 的注解来获取表的名称，这使得如果要修改表的名字，则迫使你重新编译 Java 代码。这种效果并不理想。现在已经有了很多可用的框架，用于将对象映射到数据库中，并且越来越多的框架开始使用注解了。</p><h2 id="使用javac处理注解" tabindex="-1">使用javac处理注解 <a class="header-anchor" href="#使用javac处理注解" aria-label="Permalink to &quot;使用javac处理注解&quot;">​</a></h2><p>通过 <strong>javac</strong>，你可以通过创建编译时（compile-time）注解处理器在 Java 源文件上使用注解，而不是编译之后的 class 文件。但是这里有一个重大限制：你不能通过处理器来改变源代码。唯一影响输出的方式就是创建新的文件。</p><p>如果你的注解处理器创建了新的源文件，在新一轮处理中注解会检查源文件本身。工具在检测一轮之后持续循环，直到不再有新的源文件产生。然后它编译所有的源文件。</p><p>每一个你编写的注解都需要处理器，但是 <strong>javac</strong> 可以非常容易的将多个注解处理器合并在一起。你可以指定多个需要处理的类，并且你可以添加监听器用于监听注解处理完成后接到通知。</p><p>本节中的示例将帮助你开始学习，但如果你必须深入学习，请做好反复学习，大量访问 Google 和StackOverflow 的准备。</p><h3 id="最简单的处理器" tabindex="-1">最简单的处理器 <a class="header-anchor" href="#最简单的处理器" aria-label="Permalink to &quot;最简单的处理器&quot;">​</a></h3><p>让我们开始定义我们能想到的最简单的处理器，只是为了编译和测试。如下是注解的定义：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// annotations/simplest/Simple.java</span></span>
<span class="line"><span style="color:#6A737D;">// A bare-bones annotation</span></span>
<span class="line"><span style="color:#F97583;">package</span><span style="color:#E1E4E8;"> annotations.simplest;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> java.lang.annotation.Retention;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> java.lang.annotation.RetentionPolicy;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> java.lang.annotation.Target;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> java.lang.annotation.ElementType;</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Retention</span><span style="color:#E1E4E8;">(RetentionPolicy.SOURCE)</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Target</span><span style="color:#E1E4E8;">({ElementType.TYPE, ElementType.METHOD,</span></span>
<span class="line"><span style="color:#E1E4E8;">        ElementType.CONSTRUCTOR,</span></span>
<span class="line"><span style="color:#E1E4E8;">        ElementType.ANNOTATION_TYPE,</span></span>
<span class="line"><span style="color:#E1E4E8;">        ElementType.PACKAGE, ElementType.FIELD,</span></span>
<span class="line"><span style="color:#E1E4E8;">        ElementType.LOCAL_VARIABLE})</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> @</span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">Simple</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    String </span><span style="color:#B392F0;">value</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;-default-&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// annotations/simplest/Simple.java</span></span>
<span class="line"><span style="color:#6A737D;">// A bare-bones annotation</span></span>
<span class="line"><span style="color:#D73A49;">package</span><span style="color:#24292E;"> annotations.simplest;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> java.lang.annotation.Retention;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> java.lang.annotation.RetentionPolicy;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> java.lang.annotation.Target;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> java.lang.annotation.ElementType;</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Retention</span><span style="color:#24292E;">(RetentionPolicy.SOURCE)</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Target</span><span style="color:#24292E;">({ElementType.TYPE, ElementType.METHOD,</span></span>
<span class="line"><span style="color:#24292E;">        ElementType.CONSTRUCTOR,</span></span>
<span class="line"><span style="color:#24292E;">        ElementType.ANNOTATION_TYPE,</span></span>
<span class="line"><span style="color:#24292E;">        ElementType.PACKAGE, ElementType.FIELD,</span></span>
<span class="line"><span style="color:#24292E;">        ElementType.LOCAL_VARIABLE})</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> @</span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">Simple</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    String </span><span style="color:#6F42C1;">value</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;-default-&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p><strong>@Retention</strong> 的参数现在为 <strong>SOURCE</strong>，这意味着注解不会再存留在编译后的代码。这在编译时处理注解是没有必要的，它只是指出，在这里，<strong>javac</strong> 是唯一有机会处理注解的代理。</p><p><strong>@Target</strong> 声明了几乎所有的目标类型（除了 <strong>PACKAGE</strong>） ，同样是为了演示。下面是一个测试示例。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// annotations/simplest/SimpleTest.java</span></span>
<span class="line"><span style="color:#6A737D;">// Test the &quot;Simple&quot; annotation</span></span>
<span class="line"><span style="color:#6A737D;">// {java annotations.simplest.SimpleTest}</span></span>
<span class="line"><span style="color:#F97583;">package</span><span style="color:#E1E4E8;"> annotations.simplest;</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Simple</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SimpleTest</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Simple</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> i;</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Simple</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SimpleTest</span><span style="color:#E1E4E8;">() {}</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Simple</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">foo</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;SimpleTest.foo()&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Simple</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">bar</span><span style="color:#E1E4E8;">(String </span><span style="color:#FFAB70;">s</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">i</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">float</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">f</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;SimpleTest.bar()&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Simple</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] </span><span style="color:#FFAB70;">args</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        @</span><span style="color:#F97583;">Simple</span></span>
<span class="line"><span style="color:#E1E4E8;">        SimpleTest st </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SimpleTest</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        st.</span><span style="color:#B392F0;">foo</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// annotations/simplest/SimpleTest.java</span></span>
<span class="line"><span style="color:#6A737D;">// Test the &quot;Simple&quot; annotation</span></span>
<span class="line"><span style="color:#6A737D;">// {java annotations.simplest.SimpleTest}</span></span>
<span class="line"><span style="color:#D73A49;">package</span><span style="color:#24292E;"> annotations.simplest;</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Simple</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SimpleTest</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Simple</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i;</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Simple</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SimpleTest</span><span style="color:#24292E;">() {}</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Simple</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">foo</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;SimpleTest.foo()&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Simple</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">bar</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">s</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">i</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">float</span><span style="color:#24292E;"> </span><span style="color:#E36209;">f</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;SimpleTest.bar()&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Simple</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        @</span><span style="color:#D73A49;">Simple</span></span>
<span class="line"><span style="color:#24292E;">        SimpleTest st </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SimpleTest</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        st.</span><span style="color:#6F42C1;">foo</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>输出为：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">SimpleTest.</span><span style="color:#B392F0;">foo</span><span style="color:#E1E4E8;">()</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">SimpleTest.</span><span style="color:#6F42C1;">foo</span><span style="color:#24292E;">()</span></span></code></pre></div><p>在这里我们使用 <strong>@Simple</strong> 注解了所有 <strong>@Target</strong> 声明允许的地方。</p><p><strong>SimpleTest.java</strong> 只需要 <strong>Simple.java</strong> 就可以编译成功。当我们编译的时候什么都没有发生。</p><p><strong>javac</strong> 允许 <strong>@Simple</strong> 注解（只要它存在）在我们创建处理器并将其 hook 到编译器之前，不做任何事情。</p><p>如下是一个十分简单的处理器，其所作的事情就是把注解相关的信息打印出来：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// annotations/simplest/SimpleProcessor.java</span></span>
<span class="line"><span style="color:#6A737D;">// A bare-bones annotation processor</span></span>
<span class="line"><span style="color:#F97583;">package</span><span style="color:#E1E4E8;"> annotations.simplest;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> javax.annotation.processing.</span><span style="color:#79B8FF;">*</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> javax.lang.model.SourceVersion;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> javax.lang.model.element.</span><span style="color:#79B8FF;">*</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> java.util.</span><span style="color:#79B8FF;">*</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">SupportedAnnotationTypes</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">&quot;annotations.simplest.Simple&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">SupportedSourceVersion</span><span style="color:#E1E4E8;">(SourceVersion.RELEASE_8)</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SimpleProcessor</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">AbstractProcessor</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">process</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">            Set&lt;</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">TypeElement</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#FFAB70;">annotations</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">            RoundEnvironment </span><span style="color:#FFAB70;">env</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;">(TypeElement t </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> annotations)</span></span>
<span class="line"><span style="color:#E1E4E8;">            System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(t);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;">(Element el </span><span style="color:#F97583;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">                env.</span><span style="color:#B392F0;">getElementsAnnotatedWith</span><span style="color:#E1E4E8;">(Simple.class))</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#B392F0;">display</span><span style="color:#E1E4E8;">(el);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">display</span><span style="color:#E1E4E8;">(Element </span><span style="color:#FFAB70;">el</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;==== &quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> el </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot; ====&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(el.</span><span style="color:#B392F0;">getKind</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">+</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#9ECBFF;">&quot; : &quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> el.</span><span style="color:#B392F0;">getModifiers</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">+</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#9ECBFF;">&quot; : &quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> el.</span><span style="color:#B392F0;">getSimpleName</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">+</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#9ECBFF;">&quot; : &quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> el.</span><span style="color:#B392F0;">asType</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(el.</span><span style="color:#B392F0;">getKind</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">equals</span><span style="color:#E1E4E8;">(ElementKind.CLASS)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            TypeElement te </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (TypeElement)el;</span></span>
<span class="line"><span style="color:#E1E4E8;">            System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(te.</span><span style="color:#B392F0;">getQualifiedName</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">            System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(te.</span><span style="color:#B392F0;">getSuperclass</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">            System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(te.</span><span style="color:#B392F0;">getEnclosedElements</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(el.</span><span style="color:#B392F0;">getKind</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">equals</span><span style="color:#E1E4E8;">(ElementKind.METHOD)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            ExecutableElement ex </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (ExecutableElement)el;</span></span>
<span class="line"><span style="color:#E1E4E8;">            System.out.</span><span style="color:#B392F0;">print</span><span style="color:#E1E4E8;">(ex.</span><span style="color:#B392F0;">getReturnType</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot; &quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">            System.out.</span><span style="color:#B392F0;">print</span><span style="color:#E1E4E8;">(ex.</span><span style="color:#B392F0;">getSimpleName</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;(&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">            System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(ex.</span><span style="color:#B392F0;">getParameters</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;)&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// annotations/simplest/SimpleProcessor.java</span></span>
<span class="line"><span style="color:#6A737D;">// A bare-bones annotation processor</span></span>
<span class="line"><span style="color:#D73A49;">package</span><span style="color:#24292E;"> annotations.simplest;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> javax.annotation.processing.</span><span style="color:#005CC5;">*</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> javax.lang.model.SourceVersion;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> javax.lang.model.element.</span><span style="color:#005CC5;">*</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> java.util.</span><span style="color:#005CC5;">*</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">SupportedAnnotationTypes</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&quot;annotations.simplest.Simple&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">SupportedSourceVersion</span><span style="color:#24292E;">(SourceVersion.RELEASE_8)</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SimpleProcessor</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">AbstractProcessor</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">process</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">            Set&lt;</span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">TypeElement</span><span style="color:#24292E;">&gt; </span><span style="color:#E36209;">annotations</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">            RoundEnvironment </span><span style="color:#E36209;">env</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">for</span><span style="color:#24292E;">(TypeElement t </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> annotations)</span></span>
<span class="line"><span style="color:#24292E;">            System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(t);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">for</span><span style="color:#24292E;">(Element el </span><span style="color:#D73A49;">:</span></span>
<span class="line"><span style="color:#24292E;">                env.</span><span style="color:#6F42C1;">getElementsAnnotatedWith</span><span style="color:#24292E;">(Simple.class))</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6F42C1;">display</span><span style="color:#24292E;">(el);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">display</span><span style="color:#24292E;">(Element </span><span style="color:#E36209;">el</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;==== &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> el </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot; ====&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(el.</span><span style="color:#6F42C1;">getKind</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">+</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#032F62;">&quot; : &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> el.</span><span style="color:#6F42C1;">getModifiers</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">+</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#032F62;">&quot; : &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> el.</span><span style="color:#6F42C1;">getSimpleName</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">+</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#032F62;">&quot; : &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> el.</span><span style="color:#6F42C1;">asType</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(el.</span><span style="color:#6F42C1;">getKind</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">equals</span><span style="color:#24292E;">(ElementKind.CLASS)) {</span></span>
<span class="line"><span style="color:#24292E;">            TypeElement te </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (TypeElement)el;</span></span>
<span class="line"><span style="color:#24292E;">            System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(te.</span><span style="color:#6F42C1;">getQualifiedName</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">            System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(te.</span><span style="color:#6F42C1;">getSuperclass</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">            System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(te.</span><span style="color:#6F42C1;">getEnclosedElements</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(el.</span><span style="color:#6F42C1;">getKind</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">equals</span><span style="color:#24292E;">(ElementKind.METHOD)) {</span></span>
<span class="line"><span style="color:#24292E;">            ExecutableElement ex </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (ExecutableElement)el;</span></span>
<span class="line"><span style="color:#24292E;">            System.out.</span><span style="color:#6F42C1;">print</span><span style="color:#24292E;">(ex.</span><span style="color:#6F42C1;">getReturnType</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot; &quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">            System.out.</span><span style="color:#6F42C1;">print</span><span style="color:#24292E;">(ex.</span><span style="color:#6F42C1;">getSimpleName</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;(&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">            System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(ex.</span><span style="color:#6F42C1;">getParameters</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;)&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>（旧的，失效的）<strong>apt</strong> 版本的处理器需要额外的方法来确定支持哪些注解以及支持的 Java 版本。不过，你现在可以简单的使用 <strong>@SupportedAnnotationTypes</strong> 和 <strong>@SupportedSourceVersion</strong> 注解（这是一个很好的示例关于注解如何简化你的代码）。</p><p>你唯一需要实现的方法就是 <code>process()</code>，这里是所有行为发生的地方。第一个参数告诉你哪个注解是存在的，第二个参数保留了剩余信息。我们所做的事情只是打印了注解（这里只存在一个），可以看 <strong>TypeElement</strong> 文档中的其他行为。通过使用 <code>process()</code> 的第二个操作，我们循环所有被 <strong>@Simple</strong> 注解的元素，并且针对每一个元素调用我们的 <code>display()</code> 方法。所有 <strong>Element</strong> 展示了本身的基本信息；例如，<code>getModifiers()</code> 告诉你它是否为 <strong>public</strong> 和 <strong>static</strong> 的。</p><p><strong>Element</strong> 只能执行那些编译器解析的所有基本对象共有的操作，而类和方法之类的东西有额外的信息需要提取。所以（如果你阅读了正确的文档，但是我没有在任何文档中找到——我不得不通过 StackOverflow 寻找线索）你检查它是哪种 <strong>ElementKind</strong>，然后将其向下转换为更具体的元素类型，注入针对 CLASS 的 TypeElement 和 针对 METHOD 的ExecutableElement。此时，可以为这些元素调用其他方法。</p><p>动态向下转型（在编译期不进行检查）并不像是 Java 的做事方式，这非常不直观这也是为什么我从未想过要这样做事。相反，我花了好几天的时间，试图发现你应该如何访问这些信息，而这些信息至少在某种程度上是用不起作用的恰当方法简单明了的。我还没有遇到任何东西说上面是规范的形式，但在我看来是。</p><p>如果只是通过平常的方式来编译 <strong>SimpleTest.java</strong>，你不会得到任何结果。为了得到注解输出，你必须增加一个 <strong>processor</strong> 标志并且连接注解处理器类</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">javac</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-processor</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">annotations.simplest.SimpleProcessor</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">SimpleTest.java</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">javac</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-processor</span><span style="color:#24292E;"> </span><span style="color:#032F62;">annotations.simplest.SimpleProcessor</span><span style="color:#24292E;"> </span><span style="color:#032F62;">SimpleTest.java</span></span></code></pre></div><p>现在编译器有了输出</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">annotations.simplest.Simple</span></span>
<span class="line"><span style="color:#E1E4E8;">==== </span><span style="color:#9ECBFF;">annotations.simplest.SimpleTest</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">====</span></span>
<span class="line"><span style="color:#B392F0;">CLASS</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">:</span><span style="color:#E1E4E8;"> [public] </span><span style="color:#79B8FF;">:</span><span style="color:#E1E4E8;"> SimpleTest </span><span style="color:#79B8FF;">:</span><span style="color:#E1E4E8;"> annotations.simplest.SimpleTest</span></span>
<span class="line"><span style="color:#B392F0;">annotations.simplest.SimpleTest</span></span>
<span class="line"><span style="color:#B392F0;">java.lang.Object</span></span>
<span class="line"><span style="color:#B392F0;">i,SimpleTest</span><span style="color:#E1E4E8;">()</span><span style="color:#B392F0;">,foo</span><span style="color:#E1E4E8;">(),bar(</span><span style="color:#B392F0;">java.lang.String,int,float</span><span style="color:#E1E4E8;">),main(</span><span style="color:#B392F0;">java.lang.String[]</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">==== </span><span style="color:#9ECBFF;">i</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">====</span></span>
<span class="line"><span style="color:#B392F0;">FIELD</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">:</span><span style="color:#E1E4E8;"> [] </span><span style="color:#79B8FF;">:</span><span style="color:#E1E4E8;"> i </span><span style="color:#79B8FF;">:</span><span style="color:#E1E4E8;"> int</span></span>
<span class="line"><span style="color:#E1E4E8;">==== </span><span style="color:#9ECBFF;">SimpleTest</span><span style="color:#E1E4E8;">() </span><span style="color:#9ECBFF;">====</span></span>
<span class="line"><span style="color:#B392F0;">CONSTRUCTOR</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">:</span><span style="color:#E1E4E8;"> [public] </span><span style="color:#79B8FF;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">init</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">:</span><span style="color:#E1E4E8;"> ()void</span></span>
<span class="line"><span style="color:#E1E4E8;">==== </span><span style="color:#9ECBFF;">foo</span><span style="color:#E1E4E8;">() </span><span style="color:#9ECBFF;">====</span></span>
<span class="line"><span style="color:#B392F0;">METHOD</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">:</span><span style="color:#E1E4E8;"> [public] </span><span style="color:#79B8FF;">:</span><span style="color:#E1E4E8;"> foo </span><span style="color:#B392F0;">:</span><span style="color:#E1E4E8;"> ()void</span></span>
<span class="line"><span style="color:#B392F0;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">foo</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">==== </span><span style="color:#9ECBFF;">bar</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">java.lang.String,int,float</span><span style="color:#E1E4E8;">) </span><span style="color:#9ECBFF;">====</span></span>
<span class="line"><span style="color:#B392F0;">METHOD</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">:</span><span style="color:#E1E4E8;"> [public] </span><span style="color:#79B8FF;">:</span><span style="color:#E1E4E8;"> bar </span><span style="color:#79B8FF;">:</span><span style="color:#E1E4E8;"> (</span><span style="color:#B392F0;">java.lang.String,int,float</span><span style="color:#E1E4E8;">)void</span></span>
<span class="line"><span style="color:#B392F0;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">bar</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">s,i,f</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">==== </span><span style="color:#9ECBFF;">main</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">java.lang.String[]</span><span style="color:#E1E4E8;">) </span><span style="color:#9ECBFF;">====</span></span>
<span class="line"><span style="color:#B392F0;">METHOD</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">:</span><span style="color:#E1E4E8;"> [public, </span><span style="color:#9ECBFF;">static]</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">main</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">:</span><span style="color:#E1E4E8;"> (java.lang.String[])void</span></span>
<span class="line"><span style="color:#B392F0;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">main</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">args</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">annotations.simplest.Simple</span></span>
<span class="line"><span style="color:#24292E;">==== </span><span style="color:#032F62;">annotations.simplest.SimpleTest</span><span style="color:#24292E;"> </span><span style="color:#032F62;">====</span></span>
<span class="line"><span style="color:#6F42C1;">CLASS</span><span style="color:#24292E;"> </span><span style="color:#032F62;">:</span><span style="color:#24292E;"> [public] </span><span style="color:#005CC5;">:</span><span style="color:#24292E;"> SimpleTest </span><span style="color:#005CC5;">:</span><span style="color:#24292E;"> annotations.simplest.SimpleTest</span></span>
<span class="line"><span style="color:#6F42C1;">annotations.simplest.SimpleTest</span></span>
<span class="line"><span style="color:#6F42C1;">java.lang.Object</span></span>
<span class="line"><span style="color:#6F42C1;">i,SimpleTest</span><span style="color:#24292E;">()</span><span style="color:#6F42C1;">,foo</span><span style="color:#24292E;">(),bar(</span><span style="color:#6F42C1;">java.lang.String,int,float</span><span style="color:#24292E;">),main(</span><span style="color:#6F42C1;">java.lang.String[]</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">==== </span><span style="color:#032F62;">i</span><span style="color:#24292E;"> </span><span style="color:#032F62;">====</span></span>
<span class="line"><span style="color:#6F42C1;">FIELD</span><span style="color:#24292E;"> </span><span style="color:#032F62;">:</span><span style="color:#24292E;"> [] </span><span style="color:#005CC5;">:</span><span style="color:#24292E;"> i </span><span style="color:#005CC5;">:</span><span style="color:#24292E;"> int</span></span>
<span class="line"><span style="color:#24292E;">==== </span><span style="color:#032F62;">SimpleTest</span><span style="color:#24292E;">() </span><span style="color:#032F62;">====</span></span>
<span class="line"><span style="color:#6F42C1;">CONSTRUCTOR</span><span style="color:#24292E;"> </span><span style="color:#032F62;">:</span><span style="color:#24292E;"> [public] </span><span style="color:#005CC5;">:</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">init</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">:</span><span style="color:#24292E;"> ()void</span></span>
<span class="line"><span style="color:#24292E;">==== </span><span style="color:#032F62;">foo</span><span style="color:#24292E;">() </span><span style="color:#032F62;">====</span></span>
<span class="line"><span style="color:#6F42C1;">METHOD</span><span style="color:#24292E;"> </span><span style="color:#032F62;">:</span><span style="color:#24292E;"> [public] </span><span style="color:#005CC5;">:</span><span style="color:#24292E;"> foo </span><span style="color:#6F42C1;">:</span><span style="color:#24292E;"> ()void</span></span>
<span class="line"><span style="color:#6F42C1;">void</span><span style="color:#24292E;"> </span><span style="color:#032F62;">foo</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">==== </span><span style="color:#032F62;">bar</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">java.lang.String,int,float</span><span style="color:#24292E;">) </span><span style="color:#032F62;">====</span></span>
<span class="line"><span style="color:#6F42C1;">METHOD</span><span style="color:#24292E;"> </span><span style="color:#032F62;">:</span><span style="color:#24292E;"> [public] </span><span style="color:#005CC5;">:</span><span style="color:#24292E;"> bar </span><span style="color:#005CC5;">:</span><span style="color:#24292E;"> (</span><span style="color:#6F42C1;">java.lang.String,int,float</span><span style="color:#24292E;">)void</span></span>
<span class="line"><span style="color:#6F42C1;">void</span><span style="color:#24292E;"> </span><span style="color:#032F62;">bar</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">s,i,f</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">==== </span><span style="color:#032F62;">main</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">java.lang.String[]</span><span style="color:#24292E;">) </span><span style="color:#032F62;">====</span></span>
<span class="line"><span style="color:#6F42C1;">METHOD</span><span style="color:#24292E;"> </span><span style="color:#032F62;">:</span><span style="color:#24292E;"> [public, </span><span style="color:#032F62;">static]</span><span style="color:#24292E;"> </span><span style="color:#032F62;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">main</span><span style="color:#24292E;"> </span><span style="color:#032F62;">:</span><span style="color:#24292E;"> (java.lang.String[])void</span></span>
<span class="line"><span style="color:#6F42C1;">void</span><span style="color:#24292E;"> </span><span style="color:#032F62;">main</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">args</span><span style="color:#24292E;">)</span></span></code></pre></div><p>这给了你一些可以发现的东西，包括参数名和类型、返回值等。</p><h3 id="更复杂的处理器" tabindex="-1">更复杂的处理器 <a class="header-anchor" href="#更复杂的处理器" aria-label="Permalink to &quot;更复杂的处理器&quot;">​</a></h3><p>当你创建用于 javac 注解处理器时，你不能使用 Java 的反射特性，因为你处理的是源代码，而并非是编译后的 class 文件。各种 mirror[^3 ] 解决这个问题的方法是，通过允许你在未编译的源代码中查看方法、字段和类型。</p><p>如下是一个用于提取类中方法的注解，所以它可以被抽取成为一个接口：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// annotations/ifx/ExtractInterface.java</span></span>
<span class="line"><span style="color:#6A737D;">// javac-based annotation processing</span></span>
<span class="line"><span style="color:#F97583;">package</span><span style="color:#E1E4E8;"> annotations.ifx;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> java.lang.annotation.</span><span style="color:#79B8FF;">*</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Target</span><span style="color:#E1E4E8;">(ElementType.TYPE)</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Retention</span><span style="color:#E1E4E8;">(RetentionPolicy.SOURCE)</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> @</span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">ExtractInterface</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    String </span><span style="color:#B392F0;">interfaceName</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;-!!-&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// annotations/ifx/ExtractInterface.java</span></span>
<span class="line"><span style="color:#6A737D;">// javac-based annotation processing</span></span>
<span class="line"><span style="color:#D73A49;">package</span><span style="color:#24292E;"> annotations.ifx;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> java.lang.annotation.</span><span style="color:#005CC5;">*</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Target</span><span style="color:#24292E;">(ElementType.TYPE)</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Retention</span><span style="color:#24292E;">(RetentionPolicy.SOURCE)</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> @</span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">ExtractInterface</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    String </span><span style="color:#6F42C1;">interfaceName</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;-!!-&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p><strong>RetentionPolicy</strong> 的值为 <strong>SOURCE</strong>，这是为了在提取类中的接口之后不再将注解信息保留在 class 文件中。接下来的测试类提供了一些公用方法，这些方法可以成为接口的一部分：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// annotations/ifx/Multiplier.java</span></span>
<span class="line"><span style="color:#6A737D;">// javac-based annotation processing</span></span>
<span class="line"><span style="color:#6A737D;">// {java annotations.ifx.Multiplier}</span></span>
<span class="line"><span style="color:#F97583;">package</span><span style="color:#E1E4E8;"> annotations.ifx;</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">ExtractInterface</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">interfaceName</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;IMultiplier&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Multiplier</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> flag </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> n </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">multiply</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">x</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">y</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> total </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> x; i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">            total </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(total, y);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> total;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">fortySeven</span><span style="color:#E1E4E8;">() { </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">47</span><span style="color:#E1E4E8;">; }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">x</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">y</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> x </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> y;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">double</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">timesTen</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">double</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">arg</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> arg </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] </span><span style="color:#FFAB70;">args</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        Multiplier m </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Multiplier</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#9ECBFF;">&quot;11 * 16 = &quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> m.</span><span style="color:#B392F0;">multiply</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">11</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">16</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// annotations/ifx/Multiplier.java</span></span>
<span class="line"><span style="color:#6A737D;">// javac-based annotation processing</span></span>
<span class="line"><span style="color:#6A737D;">// {java annotations.ifx.Multiplier}</span></span>
<span class="line"><span style="color:#D73A49;">package</span><span style="color:#24292E;"> annotations.ifx;</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">ExtractInterface</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">interfaceName</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;IMultiplier&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Multiplier</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> flag </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> n </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">multiply</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">x</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">y</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> total </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">for</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> x; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">            total </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(total, y);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> total;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">fortySeven</span><span style="color:#24292E;">() { </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">47</span><span style="color:#24292E;">; }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">x</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">y</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> x </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> y;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">double</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">timesTen</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">double</span><span style="color:#24292E;"> </span><span style="color:#E36209;">arg</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> arg </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">10</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        Multiplier m </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Multiplier</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#032F62;">&quot;11 * 16 = &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> m.</span><span style="color:#6F42C1;">multiply</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">11</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">16</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>输出为：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">11</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">16</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">176</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">11</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">16</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">176</span></span></code></pre></div><p><strong>Multiplier</strong> 类（只能处理正整数）拥有一个 <code>multiply()</code> 方法，这个方法会多次调用私有方法 <code>add()</code> 来模拟乘法操作。<code> add()</code> 是私有方法，因此不能成为接口的一部分。其他的方法提供了语法多样性。注解被赋予 <strong>IMultiplier</strong> 的 <strong>InterfaceName</strong> 作为要创建的接口的名称。</p><p>这里有一个编译时处理器用于提取有趣的方法，并创建一个新的 interface 源代码文件（这个源文件将会在下一轮中被自动编译）：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// annotations/ifx/IfaceExtractorProcessor.java</span></span>
<span class="line"><span style="color:#6A737D;">// javac-based annotation processing</span></span>
<span class="line"><span style="color:#F97583;">package</span><span style="color:#E1E4E8;"> annotations.ifx;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> javax.annotation.processing.</span><span style="color:#79B8FF;">*</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> javax.lang.model.SourceVersion;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> javax.lang.model.element.</span><span style="color:#79B8FF;">*</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> javax.lang.model.util.</span><span style="color:#79B8FF;">*</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> java.util.</span><span style="color:#79B8FF;">*</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> java.util.stream.</span><span style="color:#79B8FF;">*</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> java.io.</span><span style="color:#79B8FF;">*</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">SupportedAnnotationTypes</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">&quot;annotations.ifx.ExtractInterface&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">SupportedSourceVersion</span><span style="color:#E1E4E8;">(SourceVersion.RELEASE_8)</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">IfaceExtractorProcessor</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">AbstractProcessor</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> ArrayList&lt;</span><span style="color:#F97583;">Element</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">            interfaceMethods </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> ArrayList&lt;&gt;();</span></span>
<span class="line"><span style="color:#E1E4E8;">    Elements elementUtils;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> ProcessingEnvironment processingEnv;</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">init</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">            ProcessingEnvironment </span><span style="color:#FFAB70;">processingEnv</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.processingEnv </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> processingEnv;</span></span>
<span class="line"><span style="color:#E1E4E8;">        elementUtils </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> processingEnv.</span><span style="color:#B392F0;">getElementUtils</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">process</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">            Set&lt;</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">TypeElement</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#FFAB70;">annotations</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">            RoundEnvironment </span><span style="color:#FFAB70;">env</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;">(Element elem</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">env.</span><span style="color:#B392F0;">getElementsAnnotatedWith</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">                ExtractInterface.class)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            String interfaceName </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> elem.</span><span style="color:#B392F0;">getAnnotation</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">                    ExtractInterface.class).</span><span style="color:#B392F0;">interfaceName</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;">(Element enclosed </span><span style="color:#F97583;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">                    elem.</span><span style="color:#B392F0;">getEnclosedElements</span><span style="color:#E1E4E8;">()) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(enclosed.</span><span style="color:#B392F0;">getKind</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">                        .</span><span style="color:#B392F0;">equals</span><span style="color:#E1E4E8;">(ElementKind.METHOD) </span><span style="color:#F97583;">&amp;&amp;</span></span>
<span class="line"><span style="color:#E1E4E8;">                        enclosed.</span><span style="color:#B392F0;">getModifiers</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">                                .</span><span style="color:#B392F0;">contains</span><span style="color:#E1E4E8;">(Modifier.PUBLIC) </span><span style="color:#F97583;">&amp;&amp;</span></span>
<span class="line"><span style="color:#E1E4E8;">                        </span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">enclosed.</span><span style="color:#B392F0;">getModifiers</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">                                .</span><span style="color:#B392F0;">contains</span><span style="color:#E1E4E8;">(Modifier.STATIC)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                    interfaceMethods.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(enclosed);</span></span>
<span class="line"><span style="color:#E1E4E8;">                }</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(interfaceMethods.</span><span style="color:#B392F0;">size</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#B392F0;">writeInterfaceFile</span><span style="color:#E1E4E8;">(interfaceName);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">writeInterfaceFile</span><span style="color:#E1E4E8;">(String </span><span style="color:#FFAB70;">interfaceName</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">                Writer writer </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> processingEnv.</span><span style="color:#B392F0;">getFiler</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">                        .</span><span style="color:#B392F0;">createSourceFile</span><span style="color:#E1E4E8;">(interfaceName)</span></span>
<span class="line"><span style="color:#E1E4E8;">                        .</span><span style="color:#B392F0;">openWriter</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">        ) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            String packageName </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> elementUtils</span></span>
<span class="line"><span style="color:#E1E4E8;">                    .</span><span style="color:#B392F0;">getPackageOf</span><span style="color:#E1E4E8;">(interfaceMethods</span></span>
<span class="line"><span style="color:#E1E4E8;">                            .</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">)).</span><span style="color:#B392F0;">toString</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">            writer.</span><span style="color:#B392F0;">write</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#9ECBFF;">&quot;package &quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> packageName </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;;</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">            writer.</span><span style="color:#B392F0;">write</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;public interface &quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span></span>
<span class="line"><span style="color:#E1E4E8;">                    interfaceName </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot; {</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;">(Element elem </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> interfaceMethods) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                ExecutableElement method </span><span style="color:#F97583;">=</span></span>
<span class="line"><span style="color:#E1E4E8;">                        (ExecutableElement)elem;</span></span>
<span class="line"><span style="color:#E1E4E8;">                String signature </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot; public &quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">                signature </span><span style="color:#F97583;">+=</span><span style="color:#E1E4E8;"> method.</span><span style="color:#B392F0;">getReturnType</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot; &quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">                signature </span><span style="color:#F97583;">+=</span><span style="color:#E1E4E8;"> method.</span><span style="color:#B392F0;">getSimpleName</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">                signature </span><span style="color:#F97583;">+=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">createArgList</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">                        method.</span><span style="color:#B392F0;">getParameters</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">                System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(signature);</span></span>
<span class="line"><span style="color:#E1E4E8;">                writer.</span><span style="color:#B392F0;">write</span><span style="color:#E1E4E8;">(signature </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;;</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">            writer.</span><span style="color:#B392F0;">write</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;}&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;">(Exception </span><span style="color:#FFAB70;">e</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">RuntimeException</span><span style="color:#E1E4E8;">(e);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> String </span><span style="color:#B392F0;">createArgList</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">            List&lt;</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">VariableElement</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#FFAB70;">parameters</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        String args </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> parameters.</span><span style="color:#B392F0;">stream</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">                .</span><span style="color:#B392F0;">map</span><span style="color:#E1E4E8;">(p </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> p.</span><span style="color:#B392F0;">asType</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot; &quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> p.</span><span style="color:#B392F0;">getSimpleName</span><span style="color:#E1E4E8;">())</span></span>
<span class="line"><span style="color:#E1E4E8;">                .</span><span style="color:#B392F0;">collect</span><span style="color:#E1E4E8;">(Collectors.</span><span style="color:#B392F0;">joining</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;, &quot;</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;(&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> args </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;)&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// annotations/ifx/IfaceExtractorProcessor.java</span></span>
<span class="line"><span style="color:#6A737D;">// javac-based annotation processing</span></span>
<span class="line"><span style="color:#D73A49;">package</span><span style="color:#24292E;"> annotations.ifx;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> javax.annotation.processing.</span><span style="color:#005CC5;">*</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> javax.lang.model.SourceVersion;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> javax.lang.model.element.</span><span style="color:#005CC5;">*</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> javax.lang.model.util.</span><span style="color:#005CC5;">*</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> java.util.</span><span style="color:#005CC5;">*</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> java.util.stream.</span><span style="color:#005CC5;">*</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> java.io.</span><span style="color:#005CC5;">*</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">SupportedAnnotationTypes</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&quot;annotations.ifx.ExtractInterface&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">SupportedSourceVersion</span><span style="color:#24292E;">(SourceVersion.RELEASE_8)</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">IfaceExtractorProcessor</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">AbstractProcessor</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> ArrayList&lt;</span><span style="color:#D73A49;">Element</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">            interfaceMethods </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> ArrayList&lt;&gt;();</span></span>
<span class="line"><span style="color:#24292E;">    Elements elementUtils;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> ProcessingEnvironment processingEnv;</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">init</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">            ProcessingEnvironment </span><span style="color:#E36209;">processingEnv</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.processingEnv </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> processingEnv;</span></span>
<span class="line"><span style="color:#24292E;">        elementUtils </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> processingEnv.</span><span style="color:#6F42C1;">getElementUtils</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">process</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">            Set&lt;</span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">TypeElement</span><span style="color:#24292E;">&gt; </span><span style="color:#E36209;">annotations</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">            RoundEnvironment </span><span style="color:#E36209;">env</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">for</span><span style="color:#24292E;">(Element elem</span><span style="color:#D73A49;">:</span><span style="color:#24292E;">env.</span><span style="color:#6F42C1;">getElementsAnnotatedWith</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">                ExtractInterface.class)) {</span></span>
<span class="line"><span style="color:#24292E;">            String interfaceName </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> elem.</span><span style="color:#6F42C1;">getAnnotation</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">                    ExtractInterface.class).</span><span style="color:#6F42C1;">interfaceName</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">for</span><span style="color:#24292E;">(Element enclosed </span><span style="color:#D73A49;">:</span></span>
<span class="line"><span style="color:#24292E;">                    elem.</span><span style="color:#6F42C1;">getEnclosedElements</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(enclosed.</span><span style="color:#6F42C1;">getKind</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">                        .</span><span style="color:#6F42C1;">equals</span><span style="color:#24292E;">(ElementKind.METHOD) </span><span style="color:#D73A49;">&amp;&amp;</span></span>
<span class="line"><span style="color:#24292E;">                        enclosed.</span><span style="color:#6F42C1;">getModifiers</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">                                .</span><span style="color:#6F42C1;">contains</span><span style="color:#24292E;">(Modifier.PUBLIC) </span><span style="color:#D73A49;">&amp;&amp;</span></span>
<span class="line"><span style="color:#24292E;">                        </span><span style="color:#D73A49;">!</span><span style="color:#24292E;">enclosed.</span><span style="color:#6F42C1;">getModifiers</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">                                .</span><span style="color:#6F42C1;">contains</span><span style="color:#24292E;">(Modifier.STATIC)) {</span></span>
<span class="line"><span style="color:#24292E;">                    interfaceMethods.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(enclosed);</span></span>
<span class="line"><span style="color:#24292E;">                }</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(interfaceMethods.</span><span style="color:#6F42C1;">size</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6F42C1;">writeInterfaceFile</span><span style="color:#24292E;">(interfaceName);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">writeInterfaceFile</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">interfaceName</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">try</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">                Writer writer </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> processingEnv.</span><span style="color:#6F42C1;">getFiler</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">                        .</span><span style="color:#6F42C1;">createSourceFile</span><span style="color:#24292E;">(interfaceName)</span></span>
<span class="line"><span style="color:#24292E;">                        .</span><span style="color:#6F42C1;">openWriter</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">        ) {</span></span>
<span class="line"><span style="color:#24292E;">            String packageName </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> elementUtils</span></span>
<span class="line"><span style="color:#24292E;">                    .</span><span style="color:#6F42C1;">getPackageOf</span><span style="color:#24292E;">(interfaceMethods</span></span>
<span class="line"><span style="color:#24292E;">                            .</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">)).</span><span style="color:#6F42C1;">toString</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">            writer.</span><span style="color:#6F42C1;">write</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#032F62;">&quot;package &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> packageName </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;;</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">            writer.</span><span style="color:#6F42C1;">write</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;public interface &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span></span>
<span class="line"><span style="color:#24292E;">                    interfaceName </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot; {</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">for</span><span style="color:#24292E;">(Element elem </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> interfaceMethods) {</span></span>
<span class="line"><span style="color:#24292E;">                ExecutableElement method </span><span style="color:#D73A49;">=</span></span>
<span class="line"><span style="color:#24292E;">                        (ExecutableElement)elem;</span></span>
<span class="line"><span style="color:#24292E;">                String signature </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot; public &quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">                signature </span><span style="color:#D73A49;">+=</span><span style="color:#24292E;"> method.</span><span style="color:#6F42C1;">getReturnType</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot; &quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">                signature </span><span style="color:#D73A49;">+=</span><span style="color:#24292E;"> method.</span><span style="color:#6F42C1;">getSimpleName</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">                signature </span><span style="color:#D73A49;">+=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">createArgList</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">                        method.</span><span style="color:#6F42C1;">getParameters</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">                System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(signature);</span></span>
<span class="line"><span style="color:#24292E;">                writer.</span><span style="color:#6F42C1;">write</span><span style="color:#24292E;">(signature </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;;</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">            writer.</span><span style="color:#6F42C1;">write</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;}&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;">(Exception </span><span style="color:#E36209;">e</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">RuntimeException</span><span style="color:#24292E;">(e);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> String </span><span style="color:#6F42C1;">createArgList</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">            List&lt;</span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">VariableElement</span><span style="color:#24292E;">&gt; </span><span style="color:#E36209;">parameters</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        String args </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> parameters.</span><span style="color:#6F42C1;">stream</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">                .</span><span style="color:#6F42C1;">map</span><span style="color:#24292E;">(p </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> p.</span><span style="color:#6F42C1;">asType</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot; &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> p.</span><span style="color:#6F42C1;">getSimpleName</span><span style="color:#24292E;">())</span></span>
<span class="line"><span style="color:#24292E;">                .</span><span style="color:#6F42C1;">collect</span><span style="color:#24292E;">(Collectors.</span><span style="color:#6F42C1;">joining</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;, &quot;</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;(&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> args </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;)&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p><strong>Elements</strong> 对象实例 <strong>elementUtils</strong> 是一组静态方法的工具；我们用它来寻找 <strong>writeInterfaceFile()</strong> 中含有的包名。</p><p><code>getEnclosedElements()</code>方法会通过指定的元素生成所有的“闭包”元素。在这里，这个类闭包了它的所有元素。通过使用 <code>getKind()</code> 我们会找到所有的 <strong>public</strong> 和 <strong>static</strong> 方法，并将其添加到 <strong>interfaceMethods</strong> 列表中。接下来 <code>writeInterfaceFile()</code> 使用 <strong>interfaceMethods</strong> 列表里面的值生成新的接口定义。注意，在 <code>writeInterfaceFile()</code> 使用了向下转型到 <strong>ExecutableElement</strong>，这使得我们可以获取所有的方法信息。<strong>createArgList()</strong> 是一个帮助方法，用于生成参数列表。</p><p><strong>Filer</strong>是 <code>getFiler()</code> 生成的，并且是 <strong>PrintWriter</strong> 的一种实例，可以用于创建新文件。我们使用 <strong>Filer</strong> 对象，而不是原生的 <strong>PrintWriter</strong> 原因是，这个对象可以运行 <strong>javac</strong> 追踪你创建的新文件，这使得它可以在新一轮中检查新文件中的注解并编译文件。</p><p>如下是一个命令行，可以在编译的时候使用处理器：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">javac</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-processor</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">annotations.ifx.IfaceExtractorProcessor</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">Multiplier.java</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">javac</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-processor</span><span style="color:#24292E;"> </span><span style="color:#032F62;">annotations.ifx.IfaceExtractorProcessor</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Multiplier.java</span></span></code></pre></div><p>新生成的 <strong>IMultiplier.java</strong> 的文件，正如你通过查看上面处理器的 <code>println()</code> 语句所猜测的那样，如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">package</span><span style="color:#E1E4E8;"> annotations.ifx;</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">IMultiplier</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">multiply</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">x</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">y</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">fortySeven</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">double</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">timesTen</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">double</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">arg</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">package</span><span style="color:#24292E;"> annotations.ifx;</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">IMultiplier</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">multiply</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">x</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">y</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">fortySeven</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">double</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">timesTen</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">double</span><span style="color:#24292E;"> </span><span style="color:#E36209;">arg</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>这个类同样会被 <strong>javac</strong> 编译（在某一轮中），所以你会在同一个目录中看到 <strong>IMultiplier.class</strong> 文件。</p><h2 id="基于注解的单元测试" tabindex="-1">基于注解的单元测试 <a class="header-anchor" href="#基于注解的单元测试" aria-label="Permalink to &quot;基于注解的单元测试&quot;">​</a></h2><p>单元测试是对类中每个方法提供一个或者多个测试的一种事件，其目的是为了有规律的测试一个类中每个部分是否具备正确的行为。在 Java 中，最著名的单元测试工具就是 <strong>JUnit</strong>。<strong>JUnit</strong> 4 版本已经包含了注解。在注解版本之前的 JUnit 一个最主要的问题是，为了启动和运行 <strong>JUnit</strong> 测试，有大量的“仪式”需要标注。这种负担已经减轻了一些，<strong>但是</strong>注解使得测试更接近“可以工作的最简单的测试系统”。</p><p>在注解版本之前的 JUnit，你必须创建一个单独的文件来保存单元测试。通过注解，我们可以将单元测试集成在需要被测试的类中，从而将单元测试的时间和麻烦降到了最低。这种方式有额外的好处，就是使得测试私有方法和公有方法变的一样容易。</p><p>这个基于注解的测试框架叫做 <strong>@Unit</strong>。其最基本的测试形式，可能也是你使用的最多的一个注解是 <strong>@Test</strong>，我们使用 <strong>@Test</strong> 来标记测试方法。测试方法不带参数，并返回 <strong>boolean</strong> 结果来说明测试方法成功或者失败。你可以任意命名它的测试方法。同时 <strong>@Unit</strong> 测试方法可以是任意你喜欢的访问修饰方法，包括 <strong>private</strong>。</p><p>要使用 <strong>@Unit</strong>，你必须导入 <strong>onjava.atunit</strong> 包，并且使用 <strong>@Unit</strong> 的测试标记为合适的方法和字段打上标签（在接下来的例子中你会学到），然后让你的构建系统对编译后的类运行 <strong>@Unit</strong>，下面是一个简单的例子：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// annotations/AtUnitExample1.java</span></span>
<span class="line"><span style="color:#6A737D;">// {java onjava.atunit.AtUnit</span></span>
<span class="line"><span style="color:#6A737D;">// build/classes/main/annotations/AtUnitExample1.class}</span></span>
<span class="line"><span style="color:#F97583;">package</span><span style="color:#E1E4E8;"> annotations;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> onjava.atunit.</span><span style="color:#79B8FF;">*</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> onjava.</span><span style="color:#79B8FF;">*</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">AtUnitExample1</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> String </span><span style="color:#B392F0;">methodOne</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;This is methodOne&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">methodTwo</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;This is methodTwo&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Test</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">methodOneTest</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">methodOne</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">equals</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;This is methodOne&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Test</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">m2</span><span style="color:#E1E4E8;">() { </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">methodTwo</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">; }</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Test</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">m3</span><span style="color:#E1E4E8;">() { </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">; }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// Shows output for failure:</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Test</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">failureTest</span><span style="color:#E1E4E8;">() { </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">; }</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Test</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">anotherDisappointment</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// annotations/AtUnitExample1.java</span></span>
<span class="line"><span style="color:#6A737D;">// {java onjava.atunit.AtUnit</span></span>
<span class="line"><span style="color:#6A737D;">// build/classes/main/annotations/AtUnitExample1.class}</span></span>
<span class="line"><span style="color:#D73A49;">package</span><span style="color:#24292E;"> annotations;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> onjava.atunit.</span><span style="color:#005CC5;">*</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> onjava.</span><span style="color:#005CC5;">*</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">AtUnitExample1</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> String </span><span style="color:#6F42C1;">methodOne</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;This is methodOne&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">methodTwo</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;This is methodTwo&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Test</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">methodOneTest</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">methodOne</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">equals</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;This is methodOne&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Test</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">m2</span><span style="color:#24292E;">() { </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">methodTwo</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">; }</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Test</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">m3</span><span style="color:#24292E;">() { </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">; }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// Shows output for failure:</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Test</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">failureTest</span><span style="color:#24292E;">() { </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">; }</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Test</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">anotherDisappointment</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>输出为：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">annotations.AtUnitExample1</span></span>
<span class="line"><span style="color:#E1E4E8;">. m3</span></span>
<span class="line"><span style="color:#E1E4E8;">. methodOneTest</span></span>
<span class="line"><span style="color:#E1E4E8;">. m2 This is methodTwo</span></span>
<span class="line"><span style="color:#E1E4E8;">. </span><span style="color:#B392F0;">failureTest</span><span style="color:#E1E4E8;"> (failed)</span></span>
<span class="line"><span style="color:#E1E4E8;">. </span><span style="color:#B392F0;">anotherDisappointment</span><span style="color:#E1E4E8;"> (failed)</span></span>
<span class="line"><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;"> tests)</span></span>
<span class="line"><span style="color:#F97583;">&gt;&gt;&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;"> FAILURES </span><span style="color:#F97583;">&lt;&lt;&lt;</span></span>
<span class="line"><span style="color:#E1E4E8;">annotations.AtUnitExample1</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> failureTest</span></span>
<span class="line"><span style="color:#E1E4E8;">annotations.AtUnitExample1</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> anotherDisappointment</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">annotations.AtUnitExample1</span></span>
<span class="line"><span style="color:#24292E;">. m3</span></span>
<span class="line"><span style="color:#24292E;">. methodOneTest</span></span>
<span class="line"><span style="color:#24292E;">. m2 This is methodTwo</span></span>
<span class="line"><span style="color:#24292E;">. </span><span style="color:#6F42C1;">failureTest</span><span style="color:#24292E;"> (failed)</span></span>
<span class="line"><span style="color:#24292E;">. </span><span style="color:#6F42C1;">anotherDisappointment</span><span style="color:#24292E;"> (failed)</span></span>
<span class="line"><span style="color:#24292E;">(</span><span style="color:#005CC5;">5</span><span style="color:#24292E;"> tests)</span></span>
<span class="line"><span style="color:#D73A49;">&gt;&gt;&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;"> FAILURES </span><span style="color:#D73A49;">&lt;&lt;&lt;</span></span>
<span class="line"><span style="color:#24292E;">annotations.AtUnitExample1</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> failureTest</span></span>
<span class="line"><span style="color:#24292E;">annotations.AtUnitExample1</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> anotherDisappointment</span></span></code></pre></div><p>使用 <strong>@Unit</strong> 进行测试的类必须定义在某个包中（即必须包括 <strong>package</strong> 声明）。</p><p><strong>@Test</strong> 注解被置于 <code>methodOneTest()</code>、 <code>m2()</code>、<code>m3()</code>、<code>failureTest()</code> 以及 a<code>notherDisappointment()</code> 方法之前，它们告诉 <strong>@Unit</strong> 方法作为单元测试来运行。同时 <strong>@Test</strong> 确保这些方法没有任何参数并且返回值为 <strong>boolean</strong> 或者 <strong>void</strong>。当你填写单元测试时，唯一需要做的就是决定测试是成功还是失败，（对于返回值为 <strong>boolean</strong> 的方法）应该返回 <strong>ture</strong> 还是 <strong>false</strong>。</p><p>如果你熟悉 <strong>JUnit</strong>，你还将注意到 <strong>@Unit</strong> 输出的信息更多。你会看到现在正在运行的测试的输出更有用，最后它会告诉你导致失败的类和测试。</p><p>你并非必须将测试方法嵌入到原来的类中，有时候这种事情根本做不到。要生产一个非嵌入式的测试，最简单的方式就是继承：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// annotations/AUExternalTest.java</span></span>
<span class="line"><span style="color:#6A737D;">// Creating non-embedded tests</span></span>
<span class="line"><span style="color:#6A737D;">// {java onjava.atunit.AtUnit</span></span>
<span class="line"><span style="color:#6A737D;">// build/classes/main/annotations/AUExternalTest.class}</span></span>
<span class="line"><span style="color:#F97583;">package</span><span style="color:#E1E4E8;"> annotations;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> onjava.atunit.</span><span style="color:#79B8FF;">*</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> onjava.</span><span style="color:#79B8FF;">*</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">AUExternalTest</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">AtUnitExample1</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Test</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">_MethodOne</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">methodOne</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">equals</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;This is methodOne&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Test</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">_MethodTwo</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">methodTwo</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// annotations/AUExternalTest.java</span></span>
<span class="line"><span style="color:#6A737D;">// Creating non-embedded tests</span></span>
<span class="line"><span style="color:#6A737D;">// {java onjava.atunit.AtUnit</span></span>
<span class="line"><span style="color:#6A737D;">// build/classes/main/annotations/AUExternalTest.class}</span></span>
<span class="line"><span style="color:#D73A49;">package</span><span style="color:#24292E;"> annotations;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> onjava.atunit.</span><span style="color:#005CC5;">*</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> onjava.</span><span style="color:#005CC5;">*</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">AUExternalTest</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">AtUnitExample1</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Test</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">_MethodOne</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">methodOne</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">equals</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;This is methodOne&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Test</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">_MethodTwo</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">methodTwo</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>输出为：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">annotations.AUExternalTest</span></span>
<span class="line"><span style="color:#E1E4E8;">. tMethodOne</span></span>
<span class="line"><span style="color:#E1E4E8;">. tMethodTwo This is methodTwo</span></span>
<span class="line"><span style="color:#B392F0;">OK</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;"> tests)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">annotations.AUExternalTest</span></span>
<span class="line"><span style="color:#24292E;">. tMethodOne</span></span>
<span class="line"><span style="color:#24292E;">. tMethodTwo This is methodTwo</span></span>
<span class="line"><span style="color:#6F42C1;">OK</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">2</span><span style="color:#24292E;"> tests)</span></span></code></pre></div><p>这个示例还表现出灵活命名的价值。在这里，<strong>@Test</strong> 方法被命名为下划线前缀加上要测试的方法名称（我并不认为这是一种理想的命名形式，这只是表现一种可能性罢了）。</p><p>你也可以使用组合来创建非嵌入式的测试：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// annotations/AUComposition.java</span></span>
<span class="line"><span style="color:#6A737D;">// Creating non-embedded tests</span></span>
<span class="line"><span style="color:#6A737D;">// {java onjava.atunit.AtUnit</span></span>
<span class="line"><span style="color:#6A737D;">// build/classes/main/annotations/AUComposition.class}</span></span>
<span class="line"><span style="color:#F97583;">package</span><span style="color:#E1E4E8;"> annotations;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> onjava.atunit.</span><span style="color:#79B8FF;">*</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> onjava.</span><span style="color:#79B8FF;">*</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">AUComposition</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    AtUnitExample1 testObject </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">AtUnitExample1</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Test</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">tMethodOne</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> testObject.</span><span style="color:#B392F0;">methodOne</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">                .</span><span style="color:#B392F0;">equals</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;This is methodOne&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Test</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">tMethodTwo</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> testObject.</span><span style="color:#B392F0;">methodTwo</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// annotations/AUComposition.java</span></span>
<span class="line"><span style="color:#6A737D;">// Creating non-embedded tests</span></span>
<span class="line"><span style="color:#6A737D;">// {java onjava.atunit.AtUnit</span></span>
<span class="line"><span style="color:#6A737D;">// build/classes/main/annotations/AUComposition.class}</span></span>
<span class="line"><span style="color:#D73A49;">package</span><span style="color:#24292E;"> annotations;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> onjava.atunit.</span><span style="color:#005CC5;">*</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> onjava.</span><span style="color:#005CC5;">*</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">AUComposition</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    AtUnitExample1 testObject </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">AtUnitExample1</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Test</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">tMethodOne</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> testObject.</span><span style="color:#6F42C1;">methodOne</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">                .</span><span style="color:#6F42C1;">equals</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;This is methodOne&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Test</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">tMethodTwo</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> testObject.</span><span style="color:#6F42C1;">methodTwo</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>输出为：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">annotations.AUComposition</span></span>
<span class="line"><span style="color:#E1E4E8;">. tMethodTwo This is methodTwo</span></span>
<span class="line"><span style="color:#E1E4E8;">. tMethodOne</span></span>
<span class="line"><span style="color:#B392F0;">OK</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;"> tests)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">annotations.AUComposition</span></span>
<span class="line"><span style="color:#24292E;">. tMethodTwo This is methodTwo</span></span>
<span class="line"><span style="color:#24292E;">. tMethodOne</span></span>
<span class="line"><span style="color:#6F42C1;">OK</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">2</span><span style="color:#24292E;"> tests)</span></span></code></pre></div><p>因为在每一个测试里面都会创建 <strong>AUComposition</strong> 对象，所以创建新的成员变量 <strong>testObject</strong> 用于以后的每一个测试方法。</p><p>因为 <strong>@Unit</strong> 中没有 <strong>JUnit</strong> 中特殊的 <strong>assert</strong> 方法，不过另一种形式的 <strong>@Test</strong> 方法仍然允许返回值为 <strong>void</strong>（如果你还想使用 <strong>true</strong> 或者 <strong>false</strong> 的话，也可以使用 <strong>boolean</strong> 作为方法返回值类型）。为了表示测试成功，可以使用 Java 的 <strong>assert</strong> 语句。Java 断言机制需要你在 java 命令行行加上 <strong>-ea</strong> 标志来开启，但是 <strong>@Unit</strong> 已经自动开启了该功能。要表示测试失败的话，你甚至可以使用异常。<strong>@Unit</strong> 的设计目标之一就是尽可能减少添加额外的语法，而 Java 的 <strong>assert</strong> 和异常对于报告错误而言，即已经足够了。一个失败的 <strong>assert</strong> 或者从方法从抛出的异常都被视为测试失败，但是 <strong>@Unit</strong> 不会在这个失败的测试上卡住，它会继续运行，直到所有测试完毕，下面是一个示例程序：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// annotations/AtUnitExample2.java</span></span>
<span class="line"><span style="color:#6A737D;">// Assertions and exceptions can be used in @Tests</span></span>
<span class="line"><span style="color:#6A737D;">// {java onjava.atunit.AtUnit</span></span>
<span class="line"><span style="color:#6A737D;">// build/classes/main/annotations/AtUnitExample2.class}</span></span>
<span class="line"><span style="color:#F97583;">package</span><span style="color:#E1E4E8;"> annotations;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> java.io.</span><span style="color:#79B8FF;">*</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> onjava.atunit.</span><span style="color:#79B8FF;">*</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> onjava.</span><span style="color:#79B8FF;">*</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">AtUnitExample2</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> String </span><span style="color:#B392F0;">methodOne</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;This is methodOne&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">methodTwo</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;This is methodTwo&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Test</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">assertExample</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">assert</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">methodOne</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">equals</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;This is methodOne&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Test</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">assertFailureExample</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">assert</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;What a surprise!&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Test</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">exceptionExample</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> IOException {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;">(FileInputStream fis </span><span style="color:#F97583;">=</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">FileInputStream</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;nofile.txt&quot;</span><span style="color:#E1E4E8;">)) {} </span><span style="color:#6A737D;">// Throws</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Test</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">assertAndReturn</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// Assertion with message:</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">assert</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">methodTwo</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;methodTwo must equal 2&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">methodOne</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">equals</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;This is methodOne&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// annotations/AtUnitExample2.java</span></span>
<span class="line"><span style="color:#6A737D;">// Assertions and exceptions can be used in @Tests</span></span>
<span class="line"><span style="color:#6A737D;">// {java onjava.atunit.AtUnit</span></span>
<span class="line"><span style="color:#6A737D;">// build/classes/main/annotations/AtUnitExample2.class}</span></span>
<span class="line"><span style="color:#D73A49;">package</span><span style="color:#24292E;"> annotations;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> java.io.</span><span style="color:#005CC5;">*</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> onjava.atunit.</span><span style="color:#005CC5;">*</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> onjava.</span><span style="color:#005CC5;">*</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">AtUnitExample2</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> String </span><span style="color:#6F42C1;">methodOne</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;This is methodOne&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">methodTwo</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;This is methodTwo&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Test</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">assertExample</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">assert</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">methodOne</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">equals</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;This is methodOne&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Test</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">assertFailureExample</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">assert</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;What a surprise!&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Test</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">exceptionExample</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> IOException {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">try</span><span style="color:#24292E;">(FileInputStream fis </span><span style="color:#D73A49;">=</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">FileInputStream</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;nofile.txt&quot;</span><span style="color:#24292E;">)) {} </span><span style="color:#6A737D;">// Throws</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Test</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">assertAndReturn</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// Assertion with message:</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">assert</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">methodTwo</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;methodTwo must equal 2&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">methodOne</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">equals</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;This is methodOne&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>输出为：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">annotations.AtUnitExample2</span></span>
<span class="line"><span style="color:#E1E4E8;">. exceptionExample java.io.FileNotFoundException</span><span style="color:#F97583;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">nofile.</span><span style="color:#B392F0;">txt</span><span style="color:#E1E4E8;"> (The system cannot find the file specified)</span></span>
<span class="line"><span style="color:#E1E4E8;">(failed)</span></span>
<span class="line"><span style="color:#E1E4E8;">. assertExample</span></span>
<span class="line"><span style="color:#E1E4E8;">. assertAndReturn This is methodTwo</span></span>
<span class="line"><span style="color:#E1E4E8;">. assertFailureExample java.lang.AssertionError</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> What</span></span>
<span class="line"><span style="color:#E1E4E8;">a surprise</span><span style="color:#F97583;">!</span></span>
<span class="line"><span style="color:#E1E4E8;">(failed)</span></span>
<span class="line"><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;"> tests)</span></span>
<span class="line"><span style="color:#F97583;">&gt;&gt;&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;"> FAILURES </span><span style="color:#F97583;">&lt;&lt;&lt;</span></span>
<span class="line"><span style="color:#E1E4E8;">annotations.AtUnitExample2</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> exceptionExample</span></span>
<span class="line"><span style="color:#E1E4E8;">annotations.AtUnitExample2</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> assertFailureExample</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">annotations.AtUnitExample2</span></span>
<span class="line"><span style="color:#24292E;">. exceptionExample java.io.FileNotFoundException</span><span style="color:#D73A49;">:</span></span>
<span class="line"><span style="color:#24292E;">nofile.</span><span style="color:#6F42C1;">txt</span><span style="color:#24292E;"> (The system cannot find the file specified)</span></span>
<span class="line"><span style="color:#24292E;">(failed)</span></span>
<span class="line"><span style="color:#24292E;">. assertExample</span></span>
<span class="line"><span style="color:#24292E;">. assertAndReturn This is methodTwo</span></span>
<span class="line"><span style="color:#24292E;">. assertFailureExample java.lang.AssertionError</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> What</span></span>
<span class="line"><span style="color:#24292E;">a surprise</span><span style="color:#D73A49;">!</span></span>
<span class="line"><span style="color:#24292E;">(failed)</span></span>
<span class="line"><span style="color:#24292E;">(</span><span style="color:#005CC5;">4</span><span style="color:#24292E;"> tests)</span></span>
<span class="line"><span style="color:#D73A49;">&gt;&gt;&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;"> FAILURES </span><span style="color:#D73A49;">&lt;&lt;&lt;</span></span>
<span class="line"><span style="color:#24292E;">annotations.AtUnitExample2</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> exceptionExample</span></span>
<span class="line"><span style="color:#24292E;">annotations.AtUnitExample2</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> assertFailureExample</span></span></code></pre></div><p>如下是一个使用非嵌入式测试的例子，并且使用了断言，它将会对 <strong>java.util.HashSet</strong> 进行一些简单的测试：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// annotations/HashSetTest.java</span></span>
<span class="line"><span style="color:#6A737D;">// {java onjava.atunit.AtUnit</span></span>
<span class="line"><span style="color:#6A737D;">// build/classes/main/annotations/HashSetTest.class}</span></span>
<span class="line"><span style="color:#F97583;">package</span><span style="color:#E1E4E8;"> annotations;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> java.util.</span><span style="color:#79B8FF;">*</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> onjava.atunit.</span><span style="color:#79B8FF;">*</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> onjava.</span><span style="color:#79B8FF;">*</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">HashSetTest</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    HashSet&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; testObject </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> HashSet&lt;&gt;();</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Test</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">initialization</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">assert</span><span style="color:#E1E4E8;"> testObject.</span><span style="color:#B392F0;">isEmpty</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Test</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">_Contains</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        testObject.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;one&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">assert</span><span style="color:#E1E4E8;"> testObject.</span><span style="color:#B392F0;">contains</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;one&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Test</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">_Remove</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        testObject.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;one&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        testObject.</span><span style="color:#B392F0;">remove</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;one&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">assert</span><span style="color:#E1E4E8;"> testObject.</span><span style="color:#B392F0;">isEmpty</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// annotations/HashSetTest.java</span></span>
<span class="line"><span style="color:#6A737D;">// {java onjava.atunit.AtUnit</span></span>
<span class="line"><span style="color:#6A737D;">// build/classes/main/annotations/HashSetTest.class}</span></span>
<span class="line"><span style="color:#D73A49;">package</span><span style="color:#24292E;"> annotations;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> java.util.</span><span style="color:#005CC5;">*</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> onjava.atunit.</span><span style="color:#005CC5;">*</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> onjava.</span><span style="color:#005CC5;">*</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">HashSetTest</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    HashSet&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; testObject </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> HashSet&lt;&gt;();</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Test</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">initialization</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">assert</span><span style="color:#24292E;"> testObject.</span><span style="color:#6F42C1;">isEmpty</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Test</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">_Contains</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        testObject.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;one&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">assert</span><span style="color:#24292E;"> testObject.</span><span style="color:#6F42C1;">contains</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;one&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Test</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">_Remove</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        testObject.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;one&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        testObject.</span><span style="color:#6F42C1;">remove</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;one&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">assert</span><span style="color:#24292E;"> testObject.</span><span style="color:#6F42C1;">isEmpty</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>采用继承的方式可能会更简单，也没有一些其他的约束。</p><p>对每一个单元测试而言，<strong>@Unit</strong> 都会使用默认的无参构造器，为该测试类所属的类创建出一个新的实例。并在此新创建的对象上运行测试，然后丢弃该对象，以免对其他测试产生副作用。如此创建对象导致我们依赖于类的默认构造器。如果你的类没有默认构造器，或者对象需要复杂的构造过程，那么你可以创建一个 <strong>static</strong> 方法专门负责构造对象，然后使用 <strong>@TestObjectCreate</strong> 注解标记该方法，例子如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// annotations/AtUnitExample3.java</span></span>
<span class="line"><span style="color:#6A737D;">// {java onjava.atunit.AtUnit</span></span>
<span class="line"><span style="color:#6A737D;">// build/classes/main/annotations/AtUnitExample3.class}</span></span>
<span class="line"><span style="color:#F97583;">package</span><span style="color:#E1E4E8;"> annotations;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> onjava.atunit.</span><span style="color:#79B8FF;">*</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> onjava.</span><span style="color:#79B8FF;">*</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">AtUnitExample3</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> n;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">AtUnitExample3</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">n</span><span style="color:#E1E4E8;">) { </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.n </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> n; }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getN</span><span style="color:#E1E4E8;">() { </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> n; }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> String </span><span style="color:#B392F0;">methodOne</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;This is methodOne&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">methodTwo</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;This is methodTwo&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">TestObjectCreate</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> AtUnitExample3 </span><span style="color:#B392F0;">create</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">AtUnitExample3</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">47</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Test</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">initialization</span><span style="color:#E1E4E8;">() { </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> n </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">47</span><span style="color:#E1E4E8;">; }</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Test</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">methodOneTest</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">methodOne</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">equals</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;This is methodOne&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Test</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">m2</span><span style="color:#E1E4E8;">() { </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">methodTwo</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">; }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// annotations/AtUnitExample3.java</span></span>
<span class="line"><span style="color:#6A737D;">// {java onjava.atunit.AtUnit</span></span>
<span class="line"><span style="color:#6A737D;">// build/classes/main/annotations/AtUnitExample3.class}</span></span>
<span class="line"><span style="color:#D73A49;">package</span><span style="color:#24292E;"> annotations;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> onjava.atunit.</span><span style="color:#005CC5;">*</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> onjava.</span><span style="color:#005CC5;">*</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">AtUnitExample3</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> n;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">AtUnitExample3</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">n</span><span style="color:#24292E;">) { </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.n </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> n; }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getN</span><span style="color:#24292E;">() { </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> n; }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> String </span><span style="color:#6F42C1;">methodOne</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;This is methodOne&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">methodTwo</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;This is methodTwo&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">TestObjectCreate</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> AtUnitExample3 </span><span style="color:#6F42C1;">create</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">AtUnitExample3</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">47</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Test</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">initialization</span><span style="color:#24292E;">() { </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> n </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">47</span><span style="color:#24292E;">; }</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Test</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">methodOneTest</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">methodOne</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">equals</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;This is methodOne&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Test</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">m2</span><span style="color:#24292E;">() { </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">methodTwo</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">; }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>输出为：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">annotations.AtUnitExample3</span></span>
<span class="line"><span style="color:#E1E4E8;">. initialization</span></span>
<span class="line"><span style="color:#E1E4E8;">. m2 This is methodTwo</span></span>
<span class="line"><span style="color:#E1E4E8;">. methodOneTest</span></span>
<span class="line"><span style="color:#B392F0;">OK</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;"> tests)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">annotations.AtUnitExample3</span></span>
<span class="line"><span style="color:#24292E;">. initialization</span></span>
<span class="line"><span style="color:#24292E;">. m2 This is methodTwo</span></span>
<span class="line"><span style="color:#24292E;">. methodOneTest</span></span>
<span class="line"><span style="color:#6F42C1;">OK</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">3</span><span style="color:#24292E;"> tests)</span></span></code></pre></div><p><strong>@TestObjectCreate</strong> 修饰的方法必须声明为 <strong>static</strong> ，且必须返回一个你正在测试的类型对象，这一切都由 <strong>@Unit</strong> 负责确保成立。</p><p>有的时候，你需要向单元测试中增加一些字段。这时候可以使用 <strong>@TestProperty</strong> 注解，由它注解的字段表示只在单元测试中使用（因此，在你将产品发布给客户之前，他们应该被删除）。在下面的例子中，一个 <strong>String</strong> 通过 <code>String.split()</code> 方法进行分割，从其中读取一个值，这个值将会被生成测试对象：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// annotations/AtUnitExample4.java</span></span>
<span class="line"><span style="color:#6A737D;">// {java onjava.atunit.AtUnit</span></span>
<span class="line"><span style="color:#6A737D;">// build/classes/main/annotations/AtUnitExample4.class}</span></span>
<span class="line"><span style="color:#6A737D;">// {VisuallyInspectOutput}</span></span>
<span class="line"><span style="color:#F97583;">package</span><span style="color:#E1E4E8;"> annotations;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> java.util.</span><span style="color:#79B8FF;">*</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> onjava.atunit.</span><span style="color:#79B8FF;">*</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> onjava.</span><span style="color:#79B8FF;">*</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">AtUnitExample4</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> String theory </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;All brontosauruses &quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#9ECBFF;">&quot;are thin at one end, much MUCH thicker in the &quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#9ECBFF;">&quot;middle, and then thin again at the far end.&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> String word;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> Random rand </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Random</span><span style="color:#E1E4E8;">(); </span><span style="color:#6A737D;">// Time-based seed</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">AtUnitExample4</span><span style="color:#E1E4E8;">(String </span><span style="color:#FFAB70;">word</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.word </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> word;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> String </span><span style="color:#B392F0;">getWord</span><span style="color:#E1E4E8;">() { </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> word; }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> String </span><span style="color:#B392F0;">scrambleWord</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        List&lt;</span><span style="color:#F97583;">Character</span><span style="color:#E1E4E8;">&gt; chars </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Arrays.</span><span style="color:#B392F0;">asList</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">                ConvertTo.</span><span style="color:#B392F0;">boxed</span><span style="color:#E1E4E8;">(word.</span><span style="color:#B392F0;">toCharArray</span><span style="color:#E1E4E8;">()));</span></span>
<span class="line"><span style="color:#E1E4E8;">        Collections.</span><span style="color:#B392F0;">shuffle</span><span style="color:#E1E4E8;">(chars, rand);</span></span>
<span class="line"><span style="color:#E1E4E8;">        StringBuilder result </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">StringBuilder</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">char</span><span style="color:#E1E4E8;"> ch </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> chars)</span></span>
<span class="line"><span style="color:#E1E4E8;">            result.</span><span style="color:#B392F0;">append</span><span style="color:#E1E4E8;">(ch);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> result.</span><span style="color:#B392F0;">toString</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">TestProperty</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> List&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; input </span><span style="color:#F97583;">=</span></span>
<span class="line"><span style="color:#E1E4E8;">            Arrays.</span><span style="color:#B392F0;">asList</span><span style="color:#E1E4E8;">(theory.</span><span style="color:#B392F0;">split</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot; &quot;</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">TestProperty</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> Iterator&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; words </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> input.</span><span style="color:#B392F0;">iterator</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">TestObjectCreate</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> AtUnitExample4 </span><span style="color:#B392F0;">create</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(words.</span><span style="color:#B392F0;">hasNext</span><span style="color:#E1E4E8;">())</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">AtUnitExample4</span><span style="color:#E1E4E8;">(words.</span><span style="color:#B392F0;">next</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">else</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Test</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">words</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;&#39;&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getWord</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;&#39;&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getWord</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">equals</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;are&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Test</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">scramble1</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#6A737D;">// Use specific seed to get verifiable results:</span></span>
<span class="line"><span style="color:#E1E4E8;">        rand </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Random</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">47</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;&#39;&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getWord</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;&#39;&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        String scrambled </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">scrambleWord</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(scrambled);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> scrambled.</span><span style="color:#B392F0;">equals</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;lAl&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Test</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">scramble2</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        rand </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Random</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">74</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;&#39;&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getWord</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;&#39;&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        String scrambled </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">scrambleWord</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(scrambled);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> scrambled.</span><span style="color:#B392F0;">equals</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;tsaeborornussu&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// annotations/AtUnitExample4.java</span></span>
<span class="line"><span style="color:#6A737D;">// {java onjava.atunit.AtUnit</span></span>
<span class="line"><span style="color:#6A737D;">// build/classes/main/annotations/AtUnitExample4.class}</span></span>
<span class="line"><span style="color:#6A737D;">// {VisuallyInspectOutput}</span></span>
<span class="line"><span style="color:#D73A49;">package</span><span style="color:#24292E;"> annotations;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> java.util.</span><span style="color:#005CC5;">*</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> onjava.atunit.</span><span style="color:#005CC5;">*</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> onjava.</span><span style="color:#005CC5;">*</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">AtUnitExample4</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> String theory </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;All brontosauruses &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#032F62;">&quot;are thin at one end, much MUCH thicker in the &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#032F62;">&quot;middle, and then thin again at the far end.&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> String word;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> Random rand </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Random</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// Time-based seed</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">AtUnitExample4</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">word</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.word </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> word;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> String </span><span style="color:#6F42C1;">getWord</span><span style="color:#24292E;">() { </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> word; }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> String </span><span style="color:#6F42C1;">scrambleWord</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        List&lt;</span><span style="color:#D73A49;">Character</span><span style="color:#24292E;">&gt; chars </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Arrays.</span><span style="color:#6F42C1;">asList</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">                ConvertTo.</span><span style="color:#6F42C1;">boxed</span><span style="color:#24292E;">(word.</span><span style="color:#6F42C1;">toCharArray</span><span style="color:#24292E;">()));</span></span>
<span class="line"><span style="color:#24292E;">        Collections.</span><span style="color:#6F42C1;">shuffle</span><span style="color:#24292E;">(chars, rand);</span></span>
<span class="line"><span style="color:#24292E;">        StringBuilder result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">StringBuilder</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">for</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">char</span><span style="color:#24292E;"> ch </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> chars)</span></span>
<span class="line"><span style="color:#24292E;">            result.</span><span style="color:#6F42C1;">append</span><span style="color:#24292E;">(ch);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> result.</span><span style="color:#6F42C1;">toString</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">TestProperty</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> List&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; input </span><span style="color:#D73A49;">=</span></span>
<span class="line"><span style="color:#24292E;">            Arrays.</span><span style="color:#6F42C1;">asList</span><span style="color:#24292E;">(theory.</span><span style="color:#6F42C1;">split</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot; &quot;</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">TestProperty</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> Iterator&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; words </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> input.</span><span style="color:#6F42C1;">iterator</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">TestObjectCreate</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> AtUnitExample4 </span><span style="color:#6F42C1;">create</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(words.</span><span style="color:#6F42C1;">hasNext</span><span style="color:#24292E;">())</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">AtUnitExample4</span><span style="color:#24292E;">(words.</span><span style="color:#6F42C1;">next</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">else</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Test</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">words</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;&#39;&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getWord</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;&#39;&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getWord</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">equals</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;are&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Test</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">scramble1</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#6A737D;">// Use specific seed to get verifiable results:</span></span>
<span class="line"><span style="color:#24292E;">        rand </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Random</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">47</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;&#39;&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getWord</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;&#39;&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        String scrambled </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">scrambleWord</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(scrambled);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> scrambled.</span><span style="color:#6F42C1;">equals</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;lAl&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Test</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">scramble2</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        rand </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Random</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">74</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;&#39;&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getWord</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;&#39;&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        String scrambled </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">scrambleWord</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(scrambled);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> scrambled.</span><span style="color:#6F42C1;">equals</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;tsaeborornussu&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>输出为：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">annotations.AtUnitExample4</span></span>
<span class="line"><span style="color:#E1E4E8;">. words </span><span style="color:#9ECBFF;">&#39;All&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">(failed)</span></span>
<span class="line"><span style="color:#E1E4E8;">. scramble1 </span><span style="color:#9ECBFF;">&#39;brontosauruses&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">ntsaueorosurbs</span></span>
<span class="line"><span style="color:#E1E4E8;">(failed)</span></span>
<span class="line"><span style="color:#E1E4E8;">. scramble2 </span><span style="color:#9ECBFF;">&#39;are&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">are</span></span>
<span class="line"><span style="color:#E1E4E8;">(failed)</span></span>
<span class="line"><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;"> tests)</span></span>
<span class="line"><span style="color:#F97583;">&gt;&gt;&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;"> FAILURES </span><span style="color:#F97583;">&lt;&lt;&lt;</span></span>
<span class="line"><span style="color:#E1E4E8;">annotations.AtUnitExample4</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> words</span></span>
<span class="line"><span style="color:#E1E4E8;">annotations.AtUnitExample4</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> scramble1</span></span>
<span class="line"><span style="color:#E1E4E8;">annotations.AtUnitExample4</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> scramble2</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">annotations.AtUnitExample4</span></span>
<span class="line"><span style="color:#24292E;">. words </span><span style="color:#032F62;">&#39;All&#39;</span></span>
<span class="line"><span style="color:#24292E;">(failed)</span></span>
<span class="line"><span style="color:#24292E;">. scramble1 </span><span style="color:#032F62;">&#39;brontosauruses&#39;</span></span>
<span class="line"><span style="color:#24292E;">ntsaueorosurbs</span></span>
<span class="line"><span style="color:#24292E;">(failed)</span></span>
<span class="line"><span style="color:#24292E;">. scramble2 </span><span style="color:#032F62;">&#39;are&#39;</span></span>
<span class="line"><span style="color:#24292E;">are</span></span>
<span class="line"><span style="color:#24292E;">(failed)</span></span>
<span class="line"><span style="color:#24292E;">(</span><span style="color:#005CC5;">3</span><span style="color:#24292E;"> tests)</span></span>
<span class="line"><span style="color:#D73A49;">&gt;&gt;&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3</span><span style="color:#24292E;"> FAILURES </span><span style="color:#D73A49;">&lt;&lt;&lt;</span></span>
<span class="line"><span style="color:#24292E;">annotations.AtUnitExample4</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> words</span></span>
<span class="line"><span style="color:#24292E;">annotations.AtUnitExample4</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> scramble1</span></span>
<span class="line"><span style="color:#24292E;">annotations.AtUnitExample4</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> scramble2</span></span></code></pre></div><p><strong>@TestProperty</strong> 也可以用来标记那些只在测试中使用的方法，但是它们本身不是测试方法。</p><p>如果你的测试对象需要执行某些初始化工作，并且使用完成之后还需要执行清理工作，那么可以选择使用 <strong>static</strong> 的 <strong>@TestObjectCleanup</strong> 方法，当测试对象使用结束之后，该方法会为你执行清理工作。在下面的示例中，<strong>@TestObjectCleanup</strong> 为每一个测试对象都打开了一个文件，因此必须在丢弃测试的时候关闭该文件：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// annotations/AtUnitExample5.java</span></span>
<span class="line"><span style="color:#6A737D;">// {java onjava.atunit.AtUnit</span></span>
<span class="line"><span style="color:#6A737D;">// build/classes/main/annotations/AtUnitExample5.class}</span></span>
<span class="line"><span style="color:#F97583;">package</span><span style="color:#E1E4E8;"> annotations;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> java.io.</span><span style="color:#79B8FF;">*</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> onjava.atunit.</span><span style="color:#79B8FF;">*</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> onjava.</span><span style="color:#79B8FF;">*</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">AtUnitExample5</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> String text;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">AtUnitExample5</span><span style="color:#E1E4E8;">(String </span><span style="color:#FFAB70;">text</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.text </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> text;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> String </span><span style="color:#B392F0;">toString</span><span style="color:#E1E4E8;">() { </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> text; }</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">TestProperty</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> PrintWriter output;</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">TestProperty</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> counter;</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">TestObjectCreate</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> AtUnitExample5 </span><span style="color:#B392F0;">create</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        String id </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Integer.</span><span style="color:#B392F0;">toString</span><span style="color:#E1E4E8;">(counter</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            output </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">PrintWriter</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Test&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> id </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;.txt&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;">(IOException </span><span style="color:#FFAB70;">e</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">RuntimeException</span><span style="color:#E1E4E8;">(e);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">AtUnitExample5</span><span style="color:#E1E4E8;">(id);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">TestObjectCleanup</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">cleanup</span><span style="color:#E1E4E8;">(AtUnitExample5 </span><span style="color:#FFAB70;">tobj</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Running cleanup&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        output.</span><span style="color:#B392F0;">close</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Test</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">test1</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        output.</span><span style="color:#B392F0;">print</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;test1&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Test</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">test2</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        output.</span><span style="color:#B392F0;">print</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;test2&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Test</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">test3</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        output.</span><span style="color:#B392F0;">print</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;test3&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// annotations/AtUnitExample5.java</span></span>
<span class="line"><span style="color:#6A737D;">// {java onjava.atunit.AtUnit</span></span>
<span class="line"><span style="color:#6A737D;">// build/classes/main/annotations/AtUnitExample5.class}</span></span>
<span class="line"><span style="color:#D73A49;">package</span><span style="color:#24292E;"> annotations;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> java.io.</span><span style="color:#005CC5;">*</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> onjava.atunit.</span><span style="color:#005CC5;">*</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> onjava.</span><span style="color:#005CC5;">*</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">AtUnitExample5</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> String text;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">AtUnitExample5</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">text</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.text </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> text;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> String </span><span style="color:#6F42C1;">toString</span><span style="color:#24292E;">() { </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> text; }</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">TestProperty</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> PrintWriter output;</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">TestProperty</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> counter;</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">TestObjectCreate</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> AtUnitExample5 </span><span style="color:#6F42C1;">create</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        String id </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Integer.</span><span style="color:#6F42C1;">toString</span><span style="color:#24292E;">(counter</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            output </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">PrintWriter</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Test&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> id </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;.txt&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;">(IOException </span><span style="color:#E36209;">e</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">RuntimeException</span><span style="color:#24292E;">(e);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">AtUnitExample5</span><span style="color:#24292E;">(id);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">TestObjectCleanup</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">cleanup</span><span style="color:#24292E;">(AtUnitExample5 </span><span style="color:#E36209;">tobj</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Running cleanup&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        output.</span><span style="color:#6F42C1;">close</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Test</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">test1</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        output.</span><span style="color:#6F42C1;">print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;test1&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Test</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">test2</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        output.</span><span style="color:#6F42C1;">print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;test2&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Test</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">test3</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        output.</span><span style="color:#6F42C1;">print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;test3&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>输出为：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">annotations.AtUnitExample5</span></span>
<span class="line"><span style="color:#E1E4E8;">. test1</span></span>
<span class="line"><span style="color:#E1E4E8;">Running cleanup</span></span>
<span class="line"><span style="color:#E1E4E8;">. test3</span></span>
<span class="line"><span style="color:#E1E4E8;">Running cleanup</span></span>
<span class="line"><span style="color:#E1E4E8;">. test2</span></span>
<span class="line"><span style="color:#E1E4E8;">Running cleanup</span></span>
<span class="line"><span style="color:#B392F0;">OK</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;"> tests)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">annotations.AtUnitExample5</span></span>
<span class="line"><span style="color:#24292E;">. test1</span></span>
<span class="line"><span style="color:#24292E;">Running cleanup</span></span>
<span class="line"><span style="color:#24292E;">. test3</span></span>
<span class="line"><span style="color:#24292E;">Running cleanup</span></span>
<span class="line"><span style="color:#24292E;">. test2</span></span>
<span class="line"><span style="color:#24292E;">Running cleanup</span></span>
<span class="line"><span style="color:#6F42C1;">OK</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">3</span><span style="color:#24292E;"> tests)</span></span></code></pre></div><p>在输出中我们可以看到，清理方法会在每个测试方法结束之后自动运行。</p><h3 id="在-unit-中使用泛型" tabindex="-1">在 @Unit 中使用泛型 <a class="header-anchor" href="#在-unit-中使用泛型" aria-label="Permalink to &quot;在 @Unit 中使用泛型&quot;">​</a></h3><p>泛型为 <strong>@Unit</strong> 出了一个难题，因为我们不可能“通用测试”。我们必须针对某个特定类型的参数或者参数集才能进行测试。解决方法十分简单，让测试类继承自泛型类的一个特定版本即可：</p><p>下面是一个 <strong>stack</strong> 的简单实现：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// annotations/StackL.java</span></span>
<span class="line"><span style="color:#6A737D;">// A stack built on a LinkedList</span></span>
<span class="line"><span style="color:#F97583;">package</span><span style="color:#E1E4E8;"> annotations;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> java.util.</span><span style="color:#79B8FF;">*</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">StackL</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#F97583;">T</span><span style="color:#E1E4E8;">&gt; {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> LinkedList&lt;</span><span style="color:#F97583;">T</span><span style="color:#E1E4E8;">&gt; list </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> LinkedList&lt;&gt;();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">(T </span><span style="color:#FFAB70;">v</span><span style="color:#E1E4E8;">) { list.</span><span style="color:#B392F0;">addFirst</span><span style="color:#E1E4E8;">(v); }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> T </span><span style="color:#B392F0;">top</span><span style="color:#E1E4E8;">() { </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> list.</span><span style="color:#B392F0;">getFirst</span><span style="color:#E1E4E8;">(); }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> T </span><span style="color:#B392F0;">pop</span><span style="color:#E1E4E8;">() { </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> list.</span><span style="color:#B392F0;">removeFirst</span><span style="color:#E1E4E8;">(); }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// annotations/StackL.java</span></span>
<span class="line"><span style="color:#6A737D;">// A stack built on a LinkedList</span></span>
<span class="line"><span style="color:#D73A49;">package</span><span style="color:#24292E;"> annotations;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> java.util.</span><span style="color:#005CC5;">*</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">StackL</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">T</span><span style="color:#24292E;">&gt; {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> LinkedList&lt;</span><span style="color:#D73A49;">T</span><span style="color:#24292E;">&gt; list </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> LinkedList&lt;&gt;();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">(T </span><span style="color:#E36209;">v</span><span style="color:#24292E;">) { list.</span><span style="color:#6F42C1;">addFirst</span><span style="color:#24292E;">(v); }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> T </span><span style="color:#6F42C1;">top</span><span style="color:#24292E;">() { </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> list.</span><span style="color:#6F42C1;">getFirst</span><span style="color:#24292E;">(); }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> T </span><span style="color:#6F42C1;">pop</span><span style="color:#24292E;">() { </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> list.</span><span style="color:#6F42C1;">removeFirst</span><span style="color:#24292E;">(); }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>为了测试 String 版本，我们直接让测试类继承一个 Stack&lt;String&gt; ：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// annotations/StackLStringTst.java</span></span>
<span class="line"><span style="color:#6A737D;">// Applying @Unit to generics</span></span>
<span class="line"><span style="color:#6A737D;">// {java onjava.atunit.AtUnit</span></span>
<span class="line"><span style="color:#6A737D;">// build/classes/main/annotations/StackLStringTst.class}</span></span>
<span class="line"><span style="color:#F97583;">package</span><span style="color:#E1E4E8;"> annotations;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> onjava.atunit.</span><span style="color:#79B8FF;">*</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> onjava.</span><span style="color:#79B8FF;">*</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> class</span></span>
<span class="line"><span style="color:#E1E4E8;">StackLStringTst extends StackL</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">String</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Test</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">tPush</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;one&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">assert</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">top</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">equals</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;one&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;two&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">assert</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">top</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">equals</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;two&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Test</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">tPop</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;one&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;two&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">assert</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">pop</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">equals</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;two&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">assert</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">pop</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">equals</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;one&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Test</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">tTop</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;A&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;B&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">assert</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">top</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">equals</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;B&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">assert</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">top</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">equals</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;B&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// annotations/StackLStringTst.java</span></span>
<span class="line"><span style="color:#6A737D;">// Applying @Unit to generics</span></span>
<span class="line"><span style="color:#6A737D;">// {java onjava.atunit.AtUnit</span></span>
<span class="line"><span style="color:#6A737D;">// build/classes/main/annotations/StackLStringTst.class}</span></span>
<span class="line"><span style="color:#D73A49;">package</span><span style="color:#24292E;"> annotations;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> onjava.atunit.</span><span style="color:#005CC5;">*</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> onjava.</span><span style="color:#005CC5;">*</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> class</span></span>
<span class="line"><span style="color:#24292E;">StackLStringTst extends StackL</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">String</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Test</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">tPush</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;one&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">assert</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">top</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">equals</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;one&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;two&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">assert</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">top</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">equals</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;two&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Test</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">tPop</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;one&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;two&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">assert</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">pop</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">equals</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;two&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">assert</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">pop</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">equals</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;one&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Test</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">tTop</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;A&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;B&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">assert</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">top</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">equals</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;B&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">assert</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">top</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">equals</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;B&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>输出为：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">annotations.StackLStringTst</span></span>
<span class="line"><span style="color:#E1E4E8;">. tTop</span></span>
<span class="line"><span style="color:#E1E4E8;">. tPush</span></span>
<span class="line"><span style="color:#E1E4E8;">. tPop</span></span>
<span class="line"><span style="color:#B392F0;">OK</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;"> tests)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">annotations.StackLStringTst</span></span>
<span class="line"><span style="color:#24292E;">. tTop</span></span>
<span class="line"><span style="color:#24292E;">. tPush</span></span>
<span class="line"><span style="color:#24292E;">. tPop</span></span>
<span class="line"><span style="color:#6F42C1;">OK</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">3</span><span style="color:#24292E;"> tests)</span></span></code></pre></div><p>这种方法存在的唯一缺点是，继承使我们失去了访问被测试的类中 <strong>private</strong> 方法的能力。这对你非常重要，那你要么把 private 方法变为 <strong>protected</strong>，要么添加一个非 <strong>private</strong> 的 <strong>@TestProperty</strong> 方法，由它来调用 <strong>private</strong> 方法（稍后我们会看到，<strong>AtUnitRemover</strong> 会删除产品中的 <strong>@TestProperty</strong> 方法）。</p><p><strong>@Unit</strong> 搜索那些包含合适注解的类文件，然后运行 <strong>@Test</strong> 方法。我的主要目标就是让 <strong>@Unit</strong> 测试系统尽可能的透明，使得人们使用它的时候只需要添加 <strong>@Test</strong> 注解，而不需要特殊的编码和知识（现在版本的 <strong>JUnit</strong> 符合这个实践）。不过，如果说编写测试不会遇到任何困难，也不太可能，因此 <strong>@Unit</strong> 会尽量让这些困难变的微不足道，希望通过这种方式，你们会更乐意编写测试。</p><h3 id="实现-unit" tabindex="-1">实现 @Unit <a class="header-anchor" href="#实现-unit" aria-label="Permalink to &quot;实现 @Unit&quot;">​</a></h3><p>首先我们需要定义所有的注解类型。这些都是简单的标签，并且没有任何字段。@Test 标签在本章开头已经定义过了，这里是其他所需要的注解：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// onjava/atunit/TestObjectCreate.java</span></span>
<span class="line"><span style="color:#6A737D;">// The @Unit @TestObjectCreate tag</span></span>
<span class="line"><span style="color:#F97583;">package</span><span style="color:#E1E4E8;"> onjava.atunit;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> java.lang.annotation.</span><span style="color:#79B8FF;">*</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Target</span><span style="color:#E1E4E8;">(ElementType.METHOD)</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Retention</span><span style="color:#E1E4E8;">(RetentionPolicy.RUNTIME)</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> @</span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">TestObjectCreate</span><span style="color:#E1E4E8;"> {}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// onjava/atunit/TestObjectCreate.java</span></span>
<span class="line"><span style="color:#6A737D;">// The @Unit @TestObjectCreate tag</span></span>
<span class="line"><span style="color:#D73A49;">package</span><span style="color:#24292E;"> onjava.atunit;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> java.lang.annotation.</span><span style="color:#005CC5;">*</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Target</span><span style="color:#24292E;">(ElementType.METHOD)</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Retention</span><span style="color:#24292E;">(RetentionPolicy.RUNTIME)</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> @</span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">TestObjectCreate</span><span style="color:#24292E;"> {}</span></span></code></pre></div><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// onjava/atunit/TestObjectCleanup.java</span></span>
<span class="line"><span style="color:#6A737D;">// The @Unit @TestObjectCleanup tag</span></span>
<span class="line"><span style="color:#F97583;">package</span><span style="color:#E1E4E8;"> onjava.atunit;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> java.lang.annotation.</span><span style="color:#79B8FF;">*</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Target</span><span style="color:#E1E4E8;">(ElementType.METHOD)</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Retention</span><span style="color:#E1E4E8;">(RetentionPolicy.RUNTIME)</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> @</span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">TestObjectCleanup</span><span style="color:#E1E4E8;"> {}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// onjava/atunit/TestObjectCleanup.java</span></span>
<span class="line"><span style="color:#6A737D;">// The @Unit @TestObjectCleanup tag</span></span>
<span class="line"><span style="color:#D73A49;">package</span><span style="color:#24292E;"> onjava.atunit;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> java.lang.annotation.</span><span style="color:#005CC5;">*</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Target</span><span style="color:#24292E;">(ElementType.METHOD)</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Retention</span><span style="color:#24292E;">(RetentionPolicy.RUNTIME)</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> @</span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">TestObjectCleanup</span><span style="color:#24292E;"> {}</span></span></code></pre></div><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// onjava/atunit/TestProperty.java</span></span>
<span class="line"><span style="color:#6A737D;">// The @Unit @TestProperty tag</span></span>
<span class="line"><span style="color:#F97583;">package</span><span style="color:#E1E4E8;"> onjava.atunit;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> java.lang.annotation.</span><span style="color:#79B8FF;">*</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#6A737D;">// Both fields and methods can be tagged as properties:</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Target</span><span style="color:#E1E4E8;">({ElementType.FIELD, ElementType.METHOD})</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Retention</span><span style="color:#E1E4E8;">(RetentionPolicy.RUNTIME)</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> @</span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">TestProperty</span><span style="color:#E1E4E8;"> {}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// onjava/atunit/TestProperty.java</span></span>
<span class="line"><span style="color:#6A737D;">// The @Unit @TestProperty tag</span></span>
<span class="line"><span style="color:#D73A49;">package</span><span style="color:#24292E;"> onjava.atunit;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> java.lang.annotation.</span><span style="color:#005CC5;">*</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#6A737D;">// Both fields and methods can be tagged as properties:</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Target</span><span style="color:#24292E;">({ElementType.FIELD, ElementType.METHOD})</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Retention</span><span style="color:#24292E;">(RetentionPolicy.RUNTIME)</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> @</span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">TestProperty</span><span style="color:#24292E;"> {}</span></span></code></pre></div><p>所有测试的保留属性都为 <strong>RUNTIME</strong>，这是因为 <strong>@Unit</strong> 必须在编译后的代码中发现这些注解。</p><p>要实现系统并运行测试，我们还需要反射机制来提取注解。下面这个程序通过注解中的信息，决定如何构造测试对象，并在测试对象上运行测试。正是由于注解帮助，这个程序才会如此短小而直接：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// onjava/atunit/AtUnit.java</span></span>
<span class="line"><span style="color:#6A737D;">// An annotation-based unit-test framework</span></span>
<span class="line"><span style="color:#6A737D;">// {java onjava.atunit.AtUnit}</span></span>
<span class="line"><span style="color:#F97583;">package</span><span style="color:#E1E4E8;"> onjava.atunit;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> java.lang.reflect.</span><span style="color:#79B8FF;">*</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> java.io.</span><span style="color:#79B8FF;">*</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> java.util.</span><span style="color:#79B8FF;">*</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> java.nio.file.</span><span style="color:#79B8FF;">*</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> java.util.stream.</span><span style="color:#79B8FF;">*</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> onjava.</span><span style="color:#79B8FF;">*</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">AtUnit</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">implements</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ProcessFiles.Strategy</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> Class&lt;</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">&gt; testClass;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> List&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; failedTests</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> ArrayList&lt;&gt;();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">long</span><span style="color:#E1E4E8;"> testsRun </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">long</span><span style="color:#E1E4E8;"> failures </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] </span><span style="color:#FFAB70;">args</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> Exception {</span></span>
<span class="line"><span style="color:#E1E4E8;">        ClassLoader.</span><span style="color:#B392F0;">getSystemClassLoader</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">                .</span><span style="color:#B392F0;">setDefaultAssertionStatus</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// Enable assert</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ProcessFiles</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">AtUnit</span><span style="color:#E1E4E8;">(), </span><span style="color:#9ECBFF;">&quot;class&quot;</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">start</span><span style="color:#E1E4E8;">(args);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(failures </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">            System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;OK (&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> testsRun </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot; tests)&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;(&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> testsRun </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot; tests)&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">            System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#9ECBFF;">&quot;</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">&gt;&gt;&gt; &quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> failures </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot; FAILURE&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span></span>
<span class="line"><span style="color:#E1E4E8;">                            (failures </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;S&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;&quot;</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot; &lt;&lt;&lt;&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;">(String failed </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> failedTests)</span></span>
<span class="line"><span style="color:#E1E4E8;">                System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot; &quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> failed);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">process</span><span style="color:#E1E4E8;">(File </span><span style="color:#FFAB70;">cFile</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            String cName </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ClassNameFinder.</span><span style="color:#B392F0;">thisClass</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">                    Files.</span><span style="color:#B392F0;">readAllBytes</span><span style="color:#E1E4E8;">(cFile.</span><span style="color:#B392F0;">toPath</span><span style="color:#E1E4E8;">()));</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">cName.</span><span style="color:#B392F0;">startsWith</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;public:&quot;</span><span style="color:#E1E4E8;">))</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">            cName </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> cName.</span><span style="color:#B392F0;">split</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;:&quot;</span><span style="color:#E1E4E8;">)[</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">];</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">cName.</span><span style="color:#B392F0;">contains</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;.&quot;</span><span style="color:#E1E4E8;">))</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;">; </span><span style="color:#6A737D;">// Ignore unpackaged classes</span></span>
<span class="line"><span style="color:#E1E4E8;">            testClass </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Class.</span><span style="color:#B392F0;">forName</span><span style="color:#E1E4E8;">(cName);</span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;">(IOException | ClassNotFoundException </span><span style="color:#FFAB70;">e</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">RuntimeException</span><span style="color:#E1E4E8;">(e);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        TestMethods testMethods </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">TestMethods</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        Method creator </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        Method cleanup </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;">(Method m </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> testClass.</span><span style="color:#B392F0;">getDeclaredMethods</span><span style="color:#E1E4E8;">()) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            testMethods.</span><span style="color:#B392F0;">addIfTestMethod</span><span style="color:#E1E4E8;">(m);</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(creator </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">                creator </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">checkForCreatorMethod</span><span style="color:#E1E4E8;">(m);</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(cleanup </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">                cleanup </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">checkForCleanupMethod</span><span style="color:#E1E4E8;">(m);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(testMethods.</span><span style="color:#B392F0;">size</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(creator </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">Modifier.</span><span style="color:#B392F0;">isPublic</span><span style="color:#E1E4E8;">(testClass</span></span>
<span class="line"><span style="color:#E1E4E8;">                            .</span><span style="color:#B392F0;">getDeclaredConstructor</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">                            .</span><span style="color:#B392F0;">getModifiers</span><span style="color:#E1E4E8;">())) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Error: &quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> testClass </span><span style="color:#F97583;">+</span></span>
<span class="line"><span style="color:#E1E4E8;">                                </span><span style="color:#9ECBFF;">&quot; no-arg constructor must be public&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">                        System.</span><span style="color:#B392F0;">exit</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">                    }</span></span>
<span class="line"><span style="color:#E1E4E8;">                } </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;">(NoSuchMethodException </span><span style="color:#FFAB70;">e</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#6A737D;">// Synthesized no-arg constructor; OK</span></span>
<span class="line"><span style="color:#E1E4E8;">                }</span></span>
<span class="line"><span style="color:#E1E4E8;">            System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(testClass.</span><span style="color:#B392F0;">getName</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;">(Method m </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> testMethods) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            System.out.</span><span style="color:#B392F0;">print</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot; . &quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> m.</span><span style="color:#B392F0;">getName</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot; &quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">                Object testObject </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">createTestObject</span><span style="color:#E1E4E8;">(creator);</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> success </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(m.</span><span style="color:#B392F0;">getReturnType</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">equals</span><span style="color:#E1E4E8;">(boolean.class))</span></span>
<span class="line"><span style="color:#E1E4E8;">                        success </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (Boolean)m.</span><span style="color:#B392F0;">invoke</span><span style="color:#E1E4E8;">(testObject);</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">                        m.</span><span style="color:#B392F0;">invoke</span><span style="color:#E1E4E8;">(testObject);</span></span>
<span class="line"><span style="color:#E1E4E8;">                        success </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">; </span><span style="color:#6A737D;">// If no assert fails</span></span>
<span class="line"><span style="color:#E1E4E8;">                    }</span></span>
<span class="line"><span style="color:#E1E4E8;">                } </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;">(InvocationTargetException </span><span style="color:#FFAB70;">e</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#6A737D;">// Actual exception is inside e:</span></span>
<span class="line"><span style="color:#E1E4E8;">                    System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(e.</span><span style="color:#B392F0;">getCause</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">                }</span></span>
<span class="line"><span style="color:#E1E4E8;">                System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(success </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;(failed)&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">                testsRun</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">success) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                    failures</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">                    failedTests.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(testClass.</span><span style="color:#B392F0;">getName</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">+</span></span>
<span class="line"><span style="color:#E1E4E8;">                            </span><span style="color:#9ECBFF;">&quot;: &quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> m.</span><span style="color:#B392F0;">getName</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">                }</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(cleanup </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">                    cleanup.</span><span style="color:#B392F0;">invoke</span><span style="color:#E1E4E8;">(testObject, testObject);</span></span>
<span class="line"><span style="color:#E1E4E8;">            } </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;">(IllegalAccessException |</span></span>
<span class="line"><span style="color:#E1E4E8;">                    IllegalArgumentException |</span></span>
<span class="line"><span style="color:#E1E4E8;">                    InvocationTargetException </span><span style="color:#FFAB70;">e</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">RuntimeException</span><span style="color:#E1E4E8;">(e);</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">TestMethods</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ArrayList</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#F97583;">Method</span><span style="color:#E1E4E8;">&gt; {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">addIfTestMethod</span><span style="color:#E1E4E8;">(Method </span><span style="color:#FFAB70;">m</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(m.</span><span style="color:#B392F0;">getAnnotation</span><span style="color:#E1E4E8;">(Test.class) </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">(m.</span><span style="color:#B392F0;">getReturnType</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">equals</span><span style="color:#E1E4E8;">(boolean.class) </span><span style="color:#F97583;">||</span></span>
<span class="line"><span style="color:#E1E4E8;">                    m.</span><span style="color:#B392F0;">getReturnType</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">equals</span><span style="color:#E1E4E8;">(void.class)))</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">RuntimeException</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;@Test method&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span></span>
<span class="line"><span style="color:#E1E4E8;">                        </span><span style="color:#9ECBFF;">&quot; must return boolean or void&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">            m.</span><span style="color:#B392F0;">setAccessible</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// If it&#39;s private, etc.</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(m);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span></span>
<span class="line"><span style="color:#E1E4E8;">    Method </span><span style="color:#B392F0;">checkForCreatorMethod</span><span style="color:#E1E4E8;">(Method </span><span style="color:#FFAB70;">m</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(m.</span><span style="color:#B392F0;">getAnnotation</span><span style="color:#E1E4E8;">(TestObjectCreate.class) </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">m.</span><span style="color:#B392F0;">getReturnType</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">equals</span><span style="color:#E1E4E8;">(testClass))</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">RuntimeException</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;@TestObjectCreate &quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#9ECBFF;">&quot;must return instance of Class to be tested&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">((m.</span><span style="color:#B392F0;">getModifiers</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">&amp;</span></span>
<span class="line"><span style="color:#E1E4E8;">                java.lang.reflect.Modifier.STATIC) </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">RuntimeException</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;@TestObjectCreate &quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#9ECBFF;">&quot;must be static.&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        m.</span><span style="color:#B392F0;">setAccessible</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> m;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span></span>
<span class="line"><span style="color:#E1E4E8;">    Method </span><span style="color:#B392F0;">checkForCleanupMethod</span><span style="color:#E1E4E8;">(Method </span><span style="color:#FFAB70;">m</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(m.</span><span style="color:#B392F0;">getAnnotation</span><span style="color:#E1E4E8;">(TestObjectCleanup.class) </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">m.</span><span style="color:#B392F0;">getReturnType</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">equals</span><span style="color:#E1E4E8;">(void.class))</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">RuntimeException</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;@TestObjectCleanup &quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#9ECBFF;">&quot;must return void&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">((m.</span><span style="color:#B392F0;">getModifiers</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">&amp;</span></span>
<span class="line"><span style="color:#E1E4E8;">                java.lang.reflect.Modifier.STATIC) </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">RuntimeException</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;@TestObjectCleanup &quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#9ECBFF;">&quot;must be static.&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(m.</span><span style="color:#B392F0;">getParameterTypes</span><span style="color:#E1E4E8;">().length </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">||</span></span>
<span class="line"><span style="color:#E1E4E8;">                m.</span><span style="color:#B392F0;">getParameterTypes</span><span style="color:#E1E4E8;">()[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> testClass)</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">RuntimeException</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;@TestObjectCleanup &quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#9ECBFF;">&quot;must take an argument of the tested type.&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        m.</span><span style="color:#B392F0;">setAccessible</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> m;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> Object</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">createTestObject</span><span style="color:#E1E4E8;">(Method </span><span style="color:#FFAB70;">creator</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(creator </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> creator.</span><span style="color:#B392F0;">invoke</span><span style="color:#E1E4E8;">(testClass);</span></span>
<span class="line"><span style="color:#E1E4E8;">            } </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;">(IllegalAccessException |</span></span>
<span class="line"><span style="color:#E1E4E8;">                    IllegalArgumentException |</span></span>
<span class="line"><span style="color:#E1E4E8;">                    InvocationTargetException </span><span style="color:#FFAB70;">e</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">RuntimeException</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Couldn&#39;t run &quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span></span>
<span class="line"><span style="color:#E1E4E8;">                        </span><span style="color:#9ECBFF;">&quot;@TestObject (creator) method.&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> { </span><span style="color:#6A737D;">// Use the no-arg constructor:</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> testClass.</span><span style="color:#B392F0;">newInstance</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">            } </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;">(InstantiationException |</span></span>
<span class="line"><span style="color:#E1E4E8;">                    IllegalAccessException </span><span style="color:#FFAB70;">e</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">RuntimeException</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">                        </span><span style="color:#9ECBFF;">&quot;Couldn&#39;t create a test object. &quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span></span>
<span class="line"><span style="color:#E1E4E8;">                                </span><span style="color:#9ECBFF;">&quot;Try using a @TestObject method.&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// onjava/atunit/AtUnit.java</span></span>
<span class="line"><span style="color:#6A737D;">// An annotation-based unit-test framework</span></span>
<span class="line"><span style="color:#6A737D;">// {java onjava.atunit.AtUnit}</span></span>
<span class="line"><span style="color:#D73A49;">package</span><span style="color:#24292E;"> onjava.atunit;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> java.lang.reflect.</span><span style="color:#005CC5;">*</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> java.io.</span><span style="color:#005CC5;">*</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> java.util.</span><span style="color:#005CC5;">*</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> java.nio.file.</span><span style="color:#005CC5;">*</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> java.util.stream.</span><span style="color:#005CC5;">*</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> onjava.</span><span style="color:#005CC5;">*</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">AtUnit</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ProcessFiles.Strategy</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> Class&lt;</span><span style="color:#D73A49;">?</span><span style="color:#24292E;">&gt; testClass;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> List&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; failedTests</span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> ArrayList&lt;&gt;();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">long</span><span style="color:#24292E;"> testsRun </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">long</span><span style="color:#24292E;"> failures </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> Exception {</span></span>
<span class="line"><span style="color:#24292E;">        ClassLoader.</span><span style="color:#6F42C1;">getSystemClassLoader</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">                .</span><span style="color:#6F42C1;">setDefaultAssertionStatus</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">true</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// Enable assert</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ProcessFiles</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">AtUnit</span><span style="color:#24292E;">(), </span><span style="color:#032F62;">&quot;class&quot;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">start</span><span style="color:#24292E;">(args);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(failures </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">            System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;OK (&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> testsRun </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot; tests)&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;(&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> testsRun </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot; tests)&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">            System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#032F62;">&quot;</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">&gt;&gt;&gt; &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> failures </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot; FAILURE&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span></span>
<span class="line"><span style="color:#24292E;">                            (failures </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;S&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;&quot;</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot; &lt;&lt;&lt;&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">for</span><span style="color:#24292E;">(String failed </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> failedTests)</span></span>
<span class="line"><span style="color:#24292E;">                System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot; &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> failed);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">process</span><span style="color:#24292E;">(File </span><span style="color:#E36209;">cFile</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            String cName </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ClassNameFinder.</span><span style="color:#6F42C1;">thisClass</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">                    Files.</span><span style="color:#6F42C1;">readAllBytes</span><span style="color:#24292E;">(cFile.</span><span style="color:#6F42C1;">toPath</span><span style="color:#24292E;">()));</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">cName.</span><span style="color:#6F42C1;">startsWith</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;public:&quot;</span><span style="color:#24292E;">))</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">return</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">            cName </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> cName.</span><span style="color:#6F42C1;">split</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;:&quot;</span><span style="color:#24292E;">)[</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">cName.</span><span style="color:#6F42C1;">contains</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;.&quot;</span><span style="color:#24292E;">))</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">return</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// Ignore unpackaged classes</span></span>
<span class="line"><span style="color:#24292E;">            testClass </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Class.</span><span style="color:#6F42C1;">forName</span><span style="color:#24292E;">(cName);</span></span>
<span class="line"><span style="color:#24292E;">        } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;">(IOException | ClassNotFoundException </span><span style="color:#E36209;">e</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">RuntimeException</span><span style="color:#24292E;">(e);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        TestMethods testMethods </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TestMethods</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        Method creator </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        Method cleanup </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">for</span><span style="color:#24292E;">(Method m </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> testClass.</span><span style="color:#6F42C1;">getDeclaredMethods</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">            testMethods.</span><span style="color:#6F42C1;">addIfTestMethod</span><span style="color:#24292E;">(m);</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(creator </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">                creator </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">checkForCreatorMethod</span><span style="color:#24292E;">(m);</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(cleanup </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">                cleanup </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">checkForCleanupMethod</span><span style="color:#24292E;">(m);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(testMethods.</span><span style="color:#6F42C1;">size</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(creator </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">Modifier.</span><span style="color:#6F42C1;">isPublic</span><span style="color:#24292E;">(testClass</span></span>
<span class="line"><span style="color:#24292E;">                            .</span><span style="color:#6F42C1;">getDeclaredConstructor</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">                            .</span><span style="color:#6F42C1;">getModifiers</span><span style="color:#24292E;">())) {</span></span>
<span class="line"><span style="color:#24292E;">                        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Error: &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> testClass </span><span style="color:#D73A49;">+</span></span>
<span class="line"><span style="color:#24292E;">                                </span><span style="color:#032F62;">&quot; no-arg constructor must be public&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">                        System.</span><span style="color:#6F42C1;">exit</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">                    }</span></span>
<span class="line"><span style="color:#24292E;">                } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;">(NoSuchMethodException </span><span style="color:#E36209;">e</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#6A737D;">// Synthesized no-arg constructor; OK</span></span>
<span class="line"><span style="color:#24292E;">                }</span></span>
<span class="line"><span style="color:#24292E;">            System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(testClass.</span><span style="color:#6F42C1;">getName</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">for</span><span style="color:#24292E;">(Method m </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> testMethods) {</span></span>
<span class="line"><span style="color:#24292E;">            System.out.</span><span style="color:#6F42C1;">print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot; . &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> m.</span><span style="color:#6F42C1;">getName</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot; &quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">                Object testObject </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">createTestObject</span><span style="color:#24292E;">(creator);</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> success </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(m.</span><span style="color:#6F42C1;">getReturnType</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">equals</span><span style="color:#24292E;">(boolean.class))</span></span>
<span class="line"><span style="color:#24292E;">                        success </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (Boolean)m.</span><span style="color:#6F42C1;">invoke</span><span style="color:#24292E;">(testObject);</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">                        m.</span><span style="color:#6F42C1;">invoke</span><span style="color:#24292E;">(testObject);</span></span>
<span class="line"><span style="color:#24292E;">                        success </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// If no assert fails</span></span>
<span class="line"><span style="color:#24292E;">                    }</span></span>
<span class="line"><span style="color:#24292E;">                } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;">(InvocationTargetException </span><span style="color:#E36209;">e</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#6A737D;">// Actual exception is inside e:</span></span>
<span class="line"><span style="color:#24292E;">                    System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(e.</span><span style="color:#6F42C1;">getCause</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">                }</span></span>
<span class="line"><span style="color:#24292E;">                System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(success </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;(failed)&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">                testsRun</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">success) {</span></span>
<span class="line"><span style="color:#24292E;">                    failures</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">                    failedTests.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(testClass.</span><span style="color:#6F42C1;">getName</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">+</span></span>
<span class="line"><span style="color:#24292E;">                            </span><span style="color:#032F62;">&quot;: &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> m.</span><span style="color:#6F42C1;">getName</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">                }</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(cleanup </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">                    cleanup.</span><span style="color:#6F42C1;">invoke</span><span style="color:#24292E;">(testObject, testObject);</span></span>
<span class="line"><span style="color:#24292E;">            } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;">(IllegalAccessException |</span></span>
<span class="line"><span style="color:#24292E;">                    IllegalArgumentException |</span></span>
<span class="line"><span style="color:#24292E;">                    InvocationTargetException </span><span style="color:#E36209;">e</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">RuntimeException</span><span style="color:#24292E;">(e);</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TestMethods</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ArrayList</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">Method</span><span style="color:#24292E;">&gt; {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">addIfTestMethod</span><span style="color:#24292E;">(Method </span><span style="color:#E36209;">m</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(m.</span><span style="color:#6F42C1;">getAnnotation</span><span style="color:#24292E;">(Test.class) </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">return</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">(m.</span><span style="color:#6F42C1;">getReturnType</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">equals</span><span style="color:#24292E;">(boolean.class) </span><span style="color:#D73A49;">||</span></span>
<span class="line"><span style="color:#24292E;">                    m.</span><span style="color:#6F42C1;">getReturnType</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">equals</span><span style="color:#24292E;">(void.class)))</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">RuntimeException</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;@Test method&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span></span>
<span class="line"><span style="color:#24292E;">                        </span><span style="color:#032F62;">&quot; must return boolean or void&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">            m.</span><span style="color:#6F42C1;">setAccessible</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">true</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// If it&#39;s private, etc.</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(m);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span></span>
<span class="line"><span style="color:#24292E;">    Method </span><span style="color:#6F42C1;">checkForCreatorMethod</span><span style="color:#24292E;">(Method </span><span style="color:#E36209;">m</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(m.</span><span style="color:#6F42C1;">getAnnotation</span><span style="color:#24292E;">(TestObjectCreate.class) </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">m.</span><span style="color:#6F42C1;">getReturnType</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">equals</span><span style="color:#24292E;">(testClass))</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">RuntimeException</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;@TestObjectCreate &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#032F62;">&quot;must return instance of Class to be tested&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">((m.</span><span style="color:#6F42C1;">getModifiers</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">&amp;</span></span>
<span class="line"><span style="color:#24292E;">                java.lang.reflect.Modifier.STATIC) </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">RuntimeException</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;@TestObjectCreate &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#032F62;">&quot;must be static.&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        m.</span><span style="color:#6F42C1;">setAccessible</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">true</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> m;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span></span>
<span class="line"><span style="color:#24292E;">    Method </span><span style="color:#6F42C1;">checkForCleanupMethod</span><span style="color:#24292E;">(Method </span><span style="color:#E36209;">m</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(m.</span><span style="color:#6F42C1;">getAnnotation</span><span style="color:#24292E;">(TestObjectCleanup.class) </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">m.</span><span style="color:#6F42C1;">getReturnType</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">equals</span><span style="color:#24292E;">(void.class))</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">RuntimeException</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;@TestObjectCleanup &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#032F62;">&quot;must return void&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">((m.</span><span style="color:#6F42C1;">getModifiers</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">&amp;</span></span>
<span class="line"><span style="color:#24292E;">                java.lang.reflect.Modifier.STATIC) </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">RuntimeException</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;@TestObjectCleanup &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#032F62;">&quot;must be static.&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(m.</span><span style="color:#6F42C1;">getParameterTypes</span><span style="color:#24292E;">().length </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">||</span></span>
<span class="line"><span style="color:#24292E;">                m.</span><span style="color:#6F42C1;">getParameterTypes</span><span style="color:#24292E;">()[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> testClass)</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">RuntimeException</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;@TestObjectCleanup &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#032F62;">&quot;must take an argument of the tested type.&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        m.</span><span style="color:#6F42C1;">setAccessible</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">true</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> m;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> Object</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">createTestObject</span><span style="color:#24292E;">(Method </span><span style="color:#E36209;">creator</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(creator </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> creator.</span><span style="color:#6F42C1;">invoke</span><span style="color:#24292E;">(testClass);</span></span>
<span class="line"><span style="color:#24292E;">            } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;">(IllegalAccessException |</span></span>
<span class="line"><span style="color:#24292E;">                    IllegalArgumentException |</span></span>
<span class="line"><span style="color:#24292E;">                    InvocationTargetException </span><span style="color:#E36209;">e</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">RuntimeException</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Couldn&#39;t run &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span></span>
<span class="line"><span style="color:#24292E;">                        </span><span style="color:#032F62;">&quot;@TestObject (creator) method.&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">        } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> { </span><span style="color:#6A737D;">// Use the no-arg constructor:</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> testClass.</span><span style="color:#6F42C1;">newInstance</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">            } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;">(InstantiationException |</span></span>
<span class="line"><span style="color:#24292E;">                    IllegalAccessException </span><span style="color:#E36209;">e</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">RuntimeException</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">                        </span><span style="color:#032F62;">&quot;Couldn&#39;t create a test object. &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span></span>
<span class="line"><span style="color:#24292E;">                                </span><span style="color:#032F62;">&quot;Try using a @TestObject method.&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>虽然它可能是“过早的重构”（因为它只在书中使用过一次），<strong>AtUnit.java</strong> 使用了 <strong>ProcessFiles</strong> 工具逐步判断命令行中的参数，决定它是一个目录还是文件，并采取相应的行为。这可以应用于不同的解决方法，是因为它包含了一个 可用于自定义的 <strong>Strategy</strong> 接口：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// onjava/ProcessFiles.java</span></span>
<span class="line"><span style="color:#F97583;">package</span><span style="color:#E1E4E8;"> onjava;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> java.io.</span><span style="color:#79B8FF;">*</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> java.nio.file.</span><span style="color:#79B8FF;">*</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ProcessFiles</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Strategy</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">process</span><span style="color:#E1E4E8;">(File </span><span style="color:#FFAB70;">file</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> Strategy strategy;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> String ext;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ProcessFiles</span><span style="color:#E1E4E8;">(Strategy </span><span style="color:#FFAB70;">strategy</span><span style="color:#E1E4E8;">, String </span><span style="color:#FFAB70;">ext</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.strategy </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> strategy;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.ext </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ext;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">start</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] </span><span style="color:#FFAB70;">args</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(args.length </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#B392F0;">processDirectoryTree</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">File</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;.&quot;</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">else</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;">(String arg </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> args) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                    File fileArg </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">File</span><span style="color:#E1E4E8;">(arg);</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(fileArg.</span><span style="color:#B392F0;">isDirectory</span><span style="color:#E1E4E8;">())</span></span>
<span class="line"><span style="color:#E1E4E8;">                        </span><span style="color:#B392F0;">processDirectoryTree</span><span style="color:#E1E4E8;">(fileArg);</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#6A737D;">// Allow user to leave off extension:</span></span>
<span class="line"><span style="color:#E1E4E8;">                        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">arg.</span><span style="color:#B392F0;">endsWith</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;.&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> ext))</span></span>
<span class="line"><span style="color:#E1E4E8;">                            arg </span><span style="color:#F97583;">+=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;.&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> ext;</span></span>
<span class="line"><span style="color:#E1E4E8;">                        strategy.</span><span style="color:#B392F0;">process</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">                                </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">File</span><span style="color:#E1E4E8;">(arg).</span><span style="color:#B392F0;">getCanonicalFile</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">                    }</span></span>
<span class="line"><span style="color:#E1E4E8;">                }</span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;">(IOException </span><span style="color:#FFAB70;">e</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">RuntimeException</span><span style="color:#E1E4E8;">(e);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">processDirectoryTree</span><span style="color:#E1E4E8;">(File </span><span style="color:#FFAB70;">root</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> IOException {</span></span>
<span class="line"><span style="color:#E1E4E8;">        PathMatcher matcher </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> FileSystems.</span><span style="color:#B392F0;">getDefault</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">                .</span><span style="color:#B392F0;">getPathMatcher</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;glob:**/*.{&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> ext </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;}&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        Files.</span><span style="color:#B392F0;">walk</span><span style="color:#E1E4E8;">(root.</span><span style="color:#B392F0;">toPath</span><span style="color:#E1E4E8;">())</span></span>
<span class="line"><span style="color:#E1E4E8;">                .</span><span style="color:#B392F0;">filter</span><span style="color:#E1E4E8;">(matcher</span><span style="color:#F97583;">::</span><span style="color:#E1E4E8;">matches)</span></span>
<span class="line"><span style="color:#E1E4E8;">                .</span><span style="color:#B392F0;">forEach</span><span style="color:#E1E4E8;">(p </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> strategy.</span><span style="color:#B392F0;">process</span><span style="color:#E1E4E8;">(p.</span><span style="color:#B392F0;">toFile</span><span style="color:#E1E4E8;">()));</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// onjava/ProcessFiles.java</span></span>
<span class="line"><span style="color:#D73A49;">package</span><span style="color:#24292E;"> onjava;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> java.io.</span><span style="color:#005CC5;">*</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> java.nio.file.</span><span style="color:#005CC5;">*</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ProcessFiles</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Strategy</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">process</span><span style="color:#24292E;">(File </span><span style="color:#E36209;">file</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> Strategy strategy;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> String ext;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ProcessFiles</span><span style="color:#24292E;">(Strategy </span><span style="color:#E36209;">strategy</span><span style="color:#24292E;">, String </span><span style="color:#E36209;">ext</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.strategy </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> strategy;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.ext </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ext;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">start</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(args.length </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6F42C1;">processDirectoryTree</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">File</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;.&quot;</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">else</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">for</span><span style="color:#24292E;">(String arg </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> args) {</span></span>
<span class="line"><span style="color:#24292E;">                    File fileArg </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">File</span><span style="color:#24292E;">(arg);</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(fileArg.</span><span style="color:#6F42C1;">isDirectory</span><span style="color:#24292E;">())</span></span>
<span class="line"><span style="color:#24292E;">                        </span><span style="color:#6F42C1;">processDirectoryTree</span><span style="color:#24292E;">(fileArg);</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#6A737D;">// Allow user to leave off extension:</span></span>
<span class="line"><span style="color:#24292E;">                        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">arg.</span><span style="color:#6F42C1;">endsWith</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;.&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> ext))</span></span>
<span class="line"><span style="color:#24292E;">                            arg </span><span style="color:#D73A49;">+=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;.&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> ext;</span></span>
<span class="line"><span style="color:#24292E;">                        strategy.</span><span style="color:#6F42C1;">process</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">                                </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">File</span><span style="color:#24292E;">(arg).</span><span style="color:#6F42C1;">getCanonicalFile</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">                    }</span></span>
<span class="line"><span style="color:#24292E;">                }</span></span>
<span class="line"><span style="color:#24292E;">        } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;">(IOException </span><span style="color:#E36209;">e</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">RuntimeException</span><span style="color:#24292E;">(e);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">processDirectoryTree</span><span style="color:#24292E;">(File </span><span style="color:#E36209;">root</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> IOException {</span></span>
<span class="line"><span style="color:#24292E;">        PathMatcher matcher </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> FileSystems.</span><span style="color:#6F42C1;">getDefault</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">                .</span><span style="color:#6F42C1;">getPathMatcher</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;glob:**/*.{&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> ext </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;}&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        Files.</span><span style="color:#6F42C1;">walk</span><span style="color:#24292E;">(root.</span><span style="color:#6F42C1;">toPath</span><span style="color:#24292E;">())</span></span>
<span class="line"><span style="color:#24292E;">                .</span><span style="color:#6F42C1;">filter</span><span style="color:#24292E;">(matcher</span><span style="color:#D73A49;">::</span><span style="color:#24292E;">matches)</span></span>
<span class="line"><span style="color:#24292E;">                .</span><span style="color:#6F42C1;">forEach</span><span style="color:#24292E;">(p </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> strategy.</span><span style="color:#6F42C1;">process</span><span style="color:#24292E;">(p.</span><span style="color:#6F42C1;">toFile</span><span style="color:#24292E;">()));</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p><strong>AtUnit</strong> 类实现了 <strong>ProcessFiles.Strategy</strong>，其包含了一个 <code>process()</code> 方法。在这种方式下，<strong>AtUnit</strong> 实例可以作为参数传递给 <strong>ProcessFiles</strong> 构造器。第二个构造器的参数告诉 <strong>ProcessFiles</strong> 如寻找所有包含 “class” 拓展名的文件。</p><p>如下是一个简单的使用示例：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// annotations/DemoProcessFiles.java</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> onjava.ProcessFiles;</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">DemoProcessFiles</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] </span><span style="color:#FFAB70;">args</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ProcessFiles</span><span style="color:#E1E4E8;">(file </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(file),</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#9ECBFF;">&quot;java&quot;</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">start</span><span style="color:#E1E4E8;">(args);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// annotations/DemoProcessFiles.java</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> onjava.ProcessFiles;</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">DemoProcessFiles</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ProcessFiles</span><span style="color:#24292E;">(file </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(file),</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#032F62;">&quot;java&quot;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">start</span><span style="color:#24292E;">(args);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>输出为：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">.\\AtUnitExample1.java</span></span>
<span class="line"><span style="color:#E1E4E8;">.\\AtUnitExample2.java</span></span>
<span class="line"><span style="color:#E1E4E8;">.\\AtUnitExample3.java</span></span>
<span class="line"><span style="color:#E1E4E8;">.\\AtUnitExample4.java</span></span>
<span class="line"><span style="color:#E1E4E8;">.\\AtUnitExample5.java</span></span>
<span class="line"><span style="color:#E1E4E8;">.\\AUComposition.java</span></span>
<span class="line"><span style="color:#E1E4E8;">.\\AUExternalTest.java</span></span>
<span class="line"><span style="color:#E1E4E8;">.\\database\\Constraints.java</span></span>
<span class="line"><span style="color:#E1E4E8;">.\\database\\DBTable.java</span></span>
<span class="line"><span style="color:#E1E4E8;">.\\database\\Member.java</span></span>
<span class="line"><span style="color:#E1E4E8;">.\\database\\SQLInteger.java</span></span>
<span class="line"><span style="color:#E1E4E8;">.\\database\\SQLString.java</span></span>
<span class="line"><span style="color:#E1E4E8;">.\\database\\TableCreator.java</span></span>
<span class="line"><span style="color:#E1E4E8;">.\\database\\Uniqueness.java</span></span>
<span class="line"><span style="color:#E1E4E8;">.\\DemoProcessFiles.java</span></span>
<span class="line"><span style="color:#E1E4E8;">.\\HashSetTest.java</span></span>
<span class="line"><span style="color:#E1E4E8;">.\\ifx\\ExtractInterface.java</span></span>
<span class="line"><span style="color:#E1E4E8;">.\\ifx\\IfaceExtractorProcessor.java</span></span>
<span class="line"><span style="color:#E1E4E8;">.\\ifx\\Multiplier.java</span></span>
<span class="line"><span style="color:#E1E4E8;">.\\PasswordUtils.java</span></span>
<span class="line"><span style="color:#E1E4E8;">.\\simplest\\Simple.java</span></span>
<span class="line"><span style="color:#E1E4E8;">.\\simplest\\SimpleProcessor.java</span></span>
<span class="line"><span style="color:#E1E4E8;">.\\simplest\\SimpleTest.java</span></span>
<span class="line"><span style="color:#E1E4E8;">.\\SimulatingNull.java</span></span>
<span class="line"><span style="color:#E1E4E8;">.\\StackL.java</span></span>
<span class="line"><span style="color:#E1E4E8;">.\\StackLStringTst.java</span></span>
<span class="line"><span style="color:#E1E4E8;">.\\Testable.java</span></span>
<span class="line"><span style="color:#E1E4E8;">.\\UseCase.java</span></span>
<span class="line"><span style="color:#E1E4E8;">.\\UseCaseTracker.java</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">.\\AtUnitExample1.java</span></span>
<span class="line"><span style="color:#24292E;">.\\AtUnitExample2.java</span></span>
<span class="line"><span style="color:#24292E;">.\\AtUnitExample3.java</span></span>
<span class="line"><span style="color:#24292E;">.\\AtUnitExample4.java</span></span>
<span class="line"><span style="color:#24292E;">.\\AtUnitExample5.java</span></span>
<span class="line"><span style="color:#24292E;">.\\AUComposition.java</span></span>
<span class="line"><span style="color:#24292E;">.\\AUExternalTest.java</span></span>
<span class="line"><span style="color:#24292E;">.\\database\\Constraints.java</span></span>
<span class="line"><span style="color:#24292E;">.\\database\\DBTable.java</span></span>
<span class="line"><span style="color:#24292E;">.\\database\\Member.java</span></span>
<span class="line"><span style="color:#24292E;">.\\database\\SQLInteger.java</span></span>
<span class="line"><span style="color:#24292E;">.\\database\\SQLString.java</span></span>
<span class="line"><span style="color:#24292E;">.\\database\\TableCreator.java</span></span>
<span class="line"><span style="color:#24292E;">.\\database\\Uniqueness.java</span></span>
<span class="line"><span style="color:#24292E;">.\\DemoProcessFiles.java</span></span>
<span class="line"><span style="color:#24292E;">.\\HashSetTest.java</span></span>
<span class="line"><span style="color:#24292E;">.\\ifx\\ExtractInterface.java</span></span>
<span class="line"><span style="color:#24292E;">.\\ifx\\IfaceExtractorProcessor.java</span></span>
<span class="line"><span style="color:#24292E;">.\\ifx\\Multiplier.java</span></span>
<span class="line"><span style="color:#24292E;">.\\PasswordUtils.java</span></span>
<span class="line"><span style="color:#24292E;">.\\simplest\\Simple.java</span></span>
<span class="line"><span style="color:#24292E;">.\\simplest\\SimpleProcessor.java</span></span>
<span class="line"><span style="color:#24292E;">.\\simplest\\SimpleTest.java</span></span>
<span class="line"><span style="color:#24292E;">.\\SimulatingNull.java</span></span>
<span class="line"><span style="color:#24292E;">.\\StackL.java</span></span>
<span class="line"><span style="color:#24292E;">.\\StackLStringTst.java</span></span>
<span class="line"><span style="color:#24292E;">.\\Testable.java</span></span>
<span class="line"><span style="color:#24292E;">.\\UseCase.java</span></span>
<span class="line"><span style="color:#24292E;">.\\UseCaseTracker.java</span></span></code></pre></div><p>如果没有命令行参数，这个程序会遍历当前的目录树。你还可以提供多个参数，这些参数可以是类文件（带或不带.class扩展名）或目录。</p><p>回到我们对 <strong>AtUnit.java</strong> 的讨论，因为 <strong>@Unit</strong> 会自动找到可测试的类和方法，所以不需要“套件”机制。</p><p><strong>AtUnit.java</strong> 中存在的一个我们必须要解决的问题是，当它发现类文件时，类文件名中的限定类名（包括包）不明显。为了发现这个信息，必须解析类文件 - 这不是微不足道的，但也不是不可能的。 找到 .class 文件时，会打开它并读取其二进制数据并将其传递给 <code>ClassNameFinder.thisClass()</code>。 在这里，我们正在进入“字节码工程”领域，因为我们实际上正在分析类文件的内容：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// onjava/atunit/ClassNameFinder.java</span></span>
<span class="line"><span style="color:#6A737D;">// {java onjava.atunit.ClassNameFinder}</span></span>
<span class="line"><span style="color:#F97583;">package</span><span style="color:#E1E4E8;"> onjava.atunit;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> java.io.</span><span style="color:#79B8FF;">*</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> java.nio.file.</span><span style="color:#79B8FF;">*</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> java.util.</span><span style="color:#79B8FF;">*</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> onjava.</span><span style="color:#79B8FF;">*</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ClassNameFinder</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> String </span><span style="color:#B392F0;">thisClass</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">byte</span><span style="color:#E1E4E8;">[] </span><span style="color:#FFAB70;">classBytes</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        Map&lt;</span><span style="color:#F97583;">Integer</span><span style="color:#E1E4E8;">,</span><span style="color:#F97583;">Integer</span><span style="color:#E1E4E8;">&gt; offsetTable </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> HashMap&lt;&gt;();</span></span>
<span class="line"><span style="color:#E1E4E8;">        Map&lt;</span><span style="color:#F97583;">Integer</span><span style="color:#E1E4E8;">,</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; classNameTable </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> HashMap&lt;&gt;();</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            DataInputStream data </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">DataInputStream</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ByteArrayInputStream</span><span style="color:#E1E4E8;">(classBytes));</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> magic </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> data.</span><span style="color:#B392F0;">readInt</span><span style="color:#E1E4E8;">(); </span><span style="color:#6A737D;">// 0xcafebabe</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> minorVersion </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> data.</span><span style="color:#B392F0;">readShort</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> majorVersion </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> data.</span><span style="color:#B392F0;">readShort</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> constantPoolCount </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> data.</span><span style="color:#B392F0;">readShort</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">[] constantPool </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">[constantPoolCount];</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> constantPoolCount; i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> tag </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> data.</span><span style="color:#B392F0;">read</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#6A737D;">// int tableSize;</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">switch</span><span style="color:#E1E4E8;">(tag) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// UTF</span></span>
<span class="line"><span style="color:#E1E4E8;">                        </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> length </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> data.</span><span style="color:#B392F0;">readShort</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">                        </span><span style="color:#F97583;">char</span><span style="color:#E1E4E8;">[] bytes </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">char</span><span style="color:#E1E4E8;">[length];</span></span>
<span class="line"><span style="color:#E1E4E8;">                        </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> k </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; k </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> bytes.length; k</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">                            bytes[k] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">char</span><span style="color:#E1E4E8;">)data.</span><span style="color:#B392F0;">read</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">                        String className </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">String</span><span style="color:#E1E4E8;">(bytes);</span></span>
<span class="line"><span style="color:#E1E4E8;">                        classNameTable.</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(i, className);</span></span>
<span class="line"><span style="color:#E1E4E8;">                        </span><span style="color:#F97583;">break</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">5</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// LONG</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">6</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// DOUBLE</span></span>
<span class="line"><span style="color:#E1E4E8;">                        data.</span><span style="color:#B392F0;">readLong</span><span style="color:#E1E4E8;">(); </span><span style="color:#6A737D;">// discard 8 bytes</span></span>
<span class="line"><span style="color:#E1E4E8;">                        i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">; </span><span style="color:#6A737D;">// Special skip necessary</span></span>
<span class="line"><span style="color:#E1E4E8;">                        </span><span style="color:#F97583;">break</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">7</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// CLASS</span></span>
<span class="line"><span style="color:#E1E4E8;">                        </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> offset </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> data.</span><span style="color:#B392F0;">readShort</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">                        offsetTable.</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(i, offset);</span></span>
<span class="line"><span style="color:#E1E4E8;">                        </span><span style="color:#F97583;">break</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">8</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// STRING</span></span>
<span class="line"><span style="color:#E1E4E8;">                        data.</span><span style="color:#B392F0;">readShort</span><span style="color:#E1E4E8;">(); </span><span style="color:#6A737D;">// discard 2 bytes</span></span>
<span class="line"><span style="color:#E1E4E8;">                        </span><span style="color:#F97583;">break</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">3</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// INTEGER</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">4</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// FLOAT</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">9</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// FIELD_REF</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">10</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// METHOD_REF</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">11</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// INTERFACE_METHOD_REF</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">12</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// NAME_AND_TYPE</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">18</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// Invoke Dynamic</span></span>
<span class="line"><span style="color:#E1E4E8;">                        data.</span><span style="color:#B392F0;">readInt</span><span style="color:#E1E4E8;">(); </span><span style="color:#6A737D;">// discard 4 bytes</span></span>
<span class="line"><span style="color:#E1E4E8;">                        </span><span style="color:#F97583;">break</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">15</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// Method Handle</span></span>
<span class="line"><span style="color:#E1E4E8;">                        data.</span><span style="color:#B392F0;">readByte</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">                        data.</span><span style="color:#B392F0;">readShort</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">                        </span><span style="color:#F97583;">break</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">16</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// Method Type</span></span>
<span class="line"><span style="color:#E1E4E8;">                        data.</span><span style="color:#B392F0;">readShort</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">                        </span><span style="color:#F97583;">break</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#F97583;">default:</span></span>
<span class="line"><span style="color:#E1E4E8;">                        </span><span style="color:#F97583;">throw</span></span>
<span class="line"><span style="color:#E1E4E8;">                                </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">RuntimeException</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Bad tag &quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> tag);</span></span>
<span class="line"><span style="color:#E1E4E8;">                }</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">short</span><span style="color:#E1E4E8;"> accessFlags </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> data.</span><span style="color:#B392F0;">readShort</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">            String access </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (accessFlags </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0x0001</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">?</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#9ECBFF;">&quot;nonpublic:&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;public:&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> thisClass </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> data.</span><span style="color:#B392F0;">readShort</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> superClass </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> data.</span><span style="color:#B392F0;">readShort</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> access </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> classNameTable.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">                    offsetTable.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(thisClass)).</span><span style="color:#B392F0;">replace</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;/&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;.&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;">(IOException | RuntimeException </span><span style="color:#FFAB70;">e</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">RuntimeException</span><span style="color:#E1E4E8;">(e);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// Demonstration:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] </span><span style="color:#FFAB70;">args</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> Exception {</span></span>
<span class="line"><span style="color:#E1E4E8;">        PathMatcher matcher </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> FileSystems.</span><span style="color:#B392F0;">getDefault</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">                .</span><span style="color:#B392F0;">getPathMatcher</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;glob:**/*.class&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#6A737D;">// Walk the entire tree:</span></span>
<span class="line"><span style="color:#E1E4E8;">        Files.</span><span style="color:#B392F0;">walk</span><span style="color:#E1E4E8;">(Paths.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;.&quot;</span><span style="color:#E1E4E8;">))</span></span>
<span class="line"><span style="color:#E1E4E8;">                .</span><span style="color:#B392F0;">filter</span><span style="color:#E1E4E8;">(matcher</span><span style="color:#F97583;">::</span><span style="color:#E1E4E8;">matches)</span></span>
<span class="line"><span style="color:#E1E4E8;">                .</span><span style="color:#B392F0;">map</span><span style="color:#E1E4E8;">(p </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">                        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">thisClass</span><span style="color:#E1E4E8;">(Files.</span><span style="color:#B392F0;">readAllBytes</span><span style="color:#E1E4E8;">(p));</span></span>
<span class="line"><span style="color:#E1E4E8;">                    } </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;">(Exception </span><span style="color:#FFAB70;">e</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                        </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">RuntimeException</span><span style="color:#E1E4E8;">(e);</span></span>
<span class="line"><span style="color:#E1E4E8;">                    }</span></span>
<span class="line"><span style="color:#E1E4E8;">                })</span></span>
<span class="line"><span style="color:#E1E4E8;">                .</span><span style="color:#B392F0;">filter</span><span style="color:#E1E4E8;">(s </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> s.</span><span style="color:#B392F0;">startsWith</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;public:&quot;</span><span style="color:#E1E4E8;">))</span></span>
<span class="line"><span style="color:#6A737D;">// .filter(s -&gt; s.indexOf(&#39;$&#39;) &gt;= 0)</span></span>
<span class="line"><span style="color:#E1E4E8;">                .</span><span style="color:#B392F0;">map</span><span style="color:#E1E4E8;">(s </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> s.</span><span style="color:#B392F0;">split</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;:&quot;</span><span style="color:#E1E4E8;">)[</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">])</span></span>
<span class="line"><span style="color:#E1E4E8;">                .</span><span style="color:#B392F0;">filter</span><span style="color:#E1E4E8;">(s </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">s.</span><span style="color:#B392F0;">startsWith</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;enums.&quot;</span><span style="color:#E1E4E8;">))</span></span>
<span class="line"><span style="color:#E1E4E8;">                .</span><span style="color:#B392F0;">filter</span><span style="color:#E1E4E8;">(s </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> s.</span><span style="color:#B392F0;">contains</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;.&quot;</span><span style="color:#E1E4E8;">))</span></span>
<span class="line"><span style="color:#E1E4E8;">                .</span><span style="color:#B392F0;">forEach</span><span style="color:#E1E4E8;">(System.out</span><span style="color:#F97583;">::</span><span style="color:#E1E4E8;">println);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// onjava/atunit/ClassNameFinder.java</span></span>
<span class="line"><span style="color:#6A737D;">// {java onjava.atunit.ClassNameFinder}</span></span>
<span class="line"><span style="color:#D73A49;">package</span><span style="color:#24292E;"> onjava.atunit;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> java.io.</span><span style="color:#005CC5;">*</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> java.nio.file.</span><span style="color:#005CC5;">*</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> java.util.</span><span style="color:#005CC5;">*</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> onjava.</span><span style="color:#005CC5;">*</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ClassNameFinder</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> String </span><span style="color:#6F42C1;">thisClass</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">byte</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">classBytes</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        Map&lt;</span><span style="color:#D73A49;">Integer</span><span style="color:#24292E;">,</span><span style="color:#D73A49;">Integer</span><span style="color:#24292E;">&gt; offsetTable </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> HashMap&lt;&gt;();</span></span>
<span class="line"><span style="color:#24292E;">        Map&lt;</span><span style="color:#D73A49;">Integer</span><span style="color:#24292E;">,</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; classNameTable </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> HashMap&lt;&gt;();</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            DataInputStream data </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">DataInputStream</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ByteArrayInputStream</span><span style="color:#24292E;">(classBytes));</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> magic </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> data.</span><span style="color:#6F42C1;">readInt</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// 0xcafebabe</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> minorVersion </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> data.</span><span style="color:#6F42C1;">readShort</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> majorVersion </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> data.</span><span style="color:#6F42C1;">readShort</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> constantPoolCount </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> data.</span><span style="color:#6F42C1;">readShort</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">int</span><span style="color:#24292E;">[] constantPool </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;">[constantPoolCount];</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">for</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> constantPoolCount; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> tag </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> data.</span><span style="color:#6F42C1;">read</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;">// int tableSize;</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">switch</span><span style="color:#24292E;">(tag) {</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">// UTF</span></span>
<span class="line"><span style="color:#24292E;">                        </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> length </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> data.</span><span style="color:#6F42C1;">readShort</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">                        </span><span style="color:#D73A49;">char</span><span style="color:#24292E;">[] bytes </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">char</span><span style="color:#24292E;">[length];</span></span>
<span class="line"><span style="color:#24292E;">                        </span><span style="color:#D73A49;">for</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> k </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; k </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> bytes.length; k</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">                            bytes[k] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">char</span><span style="color:#24292E;">)data.</span><span style="color:#6F42C1;">read</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">                        String className </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">String</span><span style="color:#24292E;">(bytes);</span></span>
<span class="line"><span style="color:#24292E;">                        classNameTable.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(i, className);</span></span>
<span class="line"><span style="color:#24292E;">                        </span><span style="color:#D73A49;">break</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">5</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">// LONG</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">6</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">// DOUBLE</span></span>
<span class="line"><span style="color:#24292E;">                        data.</span><span style="color:#6F42C1;">readLong</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// discard 8 bytes</span></span>
<span class="line"><span style="color:#24292E;">                        i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// Special skip necessary</span></span>
<span class="line"><span style="color:#24292E;">                        </span><span style="color:#D73A49;">break</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">7</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">// CLASS</span></span>
<span class="line"><span style="color:#24292E;">                        </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> offset </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> data.</span><span style="color:#6F42C1;">readShort</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">                        offsetTable.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(i, offset);</span></span>
<span class="line"><span style="color:#24292E;">                        </span><span style="color:#D73A49;">break</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">8</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">// STRING</span></span>
<span class="line"><span style="color:#24292E;">                        data.</span><span style="color:#6F42C1;">readShort</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// discard 2 bytes</span></span>
<span class="line"><span style="color:#24292E;">                        </span><span style="color:#D73A49;">break</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">// INTEGER</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">4</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">// FLOAT</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">9</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">// FIELD_REF</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">10</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">// METHOD_REF</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">11</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">// INTERFACE_METHOD_REF</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">12</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">// NAME_AND_TYPE</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">18</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">// Invoke Dynamic</span></span>
<span class="line"><span style="color:#24292E;">                        data.</span><span style="color:#6F42C1;">readInt</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// discard 4 bytes</span></span>
<span class="line"><span style="color:#24292E;">                        </span><span style="color:#D73A49;">break</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">15</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">// Method Handle</span></span>
<span class="line"><span style="color:#24292E;">                        data.</span><span style="color:#6F42C1;">readByte</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">                        data.</span><span style="color:#6F42C1;">readShort</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">                        </span><span style="color:#D73A49;">break</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">16</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">// Method Type</span></span>
<span class="line"><span style="color:#24292E;">                        data.</span><span style="color:#6F42C1;">readShort</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">                        </span><span style="color:#D73A49;">break</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#D73A49;">default:</span></span>
<span class="line"><span style="color:#24292E;">                        </span><span style="color:#D73A49;">throw</span></span>
<span class="line"><span style="color:#24292E;">                                </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">RuntimeException</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Bad tag &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> tag);</span></span>
<span class="line"><span style="color:#24292E;">                }</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">short</span><span style="color:#24292E;"> accessFlags </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> data.</span><span style="color:#6F42C1;">readShort</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">            String access </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (accessFlags </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0x0001</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">?</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#032F62;">&quot;nonpublic:&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;public:&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> thisClass </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> data.</span><span style="color:#6F42C1;">readShort</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> superClass </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> data.</span><span style="color:#6F42C1;">readShort</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> access </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> classNameTable.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">                    offsetTable.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(thisClass)).</span><span style="color:#6F42C1;">replace</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;/&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;.&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;">(IOException | RuntimeException </span><span style="color:#E36209;">e</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">RuntimeException</span><span style="color:#24292E;">(e);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// Demonstration:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> Exception {</span></span>
<span class="line"><span style="color:#24292E;">        PathMatcher matcher </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> FileSystems.</span><span style="color:#6F42C1;">getDefault</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">                .</span><span style="color:#6F42C1;">getPathMatcher</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;glob:**/*.class&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6A737D;">// Walk the entire tree:</span></span>
<span class="line"><span style="color:#24292E;">        Files.</span><span style="color:#6F42C1;">walk</span><span style="color:#24292E;">(Paths.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;.&quot;</span><span style="color:#24292E;">))</span></span>
<span class="line"><span style="color:#24292E;">                .</span><span style="color:#6F42C1;">filter</span><span style="color:#24292E;">(matcher</span><span style="color:#D73A49;">::</span><span style="color:#24292E;">matches)</span></span>
<span class="line"><span style="color:#24292E;">                .</span><span style="color:#6F42C1;">map</span><span style="color:#24292E;">(p </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">                        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">thisClass</span><span style="color:#24292E;">(Files.</span><span style="color:#6F42C1;">readAllBytes</span><span style="color:#24292E;">(p));</span></span>
<span class="line"><span style="color:#24292E;">                    } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;">(Exception </span><span style="color:#E36209;">e</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">                        </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">RuntimeException</span><span style="color:#24292E;">(e);</span></span>
<span class="line"><span style="color:#24292E;">                    }</span></span>
<span class="line"><span style="color:#24292E;">                })</span></span>
<span class="line"><span style="color:#24292E;">                .</span><span style="color:#6F42C1;">filter</span><span style="color:#24292E;">(s </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> s.</span><span style="color:#6F42C1;">startsWith</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;public:&quot;</span><span style="color:#24292E;">))</span></span>
<span class="line"><span style="color:#6A737D;">// .filter(s -&gt; s.indexOf(&#39;$&#39;) &gt;= 0)</span></span>
<span class="line"><span style="color:#24292E;">                .</span><span style="color:#6F42C1;">map</span><span style="color:#24292E;">(s </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> s.</span><span style="color:#6F42C1;">split</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;:&quot;</span><span style="color:#24292E;">)[</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">])</span></span>
<span class="line"><span style="color:#24292E;">                .</span><span style="color:#6F42C1;">filter</span><span style="color:#24292E;">(s </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">!</span><span style="color:#24292E;">s.</span><span style="color:#6F42C1;">startsWith</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;enums.&quot;</span><span style="color:#24292E;">))</span></span>
<span class="line"><span style="color:#24292E;">                .</span><span style="color:#6F42C1;">filter</span><span style="color:#24292E;">(s </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> s.</span><span style="color:#6F42C1;">contains</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;.&quot;</span><span style="color:#24292E;">))</span></span>
<span class="line"><span style="color:#24292E;">                .</span><span style="color:#6F42C1;">forEach</span><span style="color:#24292E;">(System.out</span><span style="color:#D73A49;">::</span><span style="color:#24292E;">println);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>输出为：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">onjava.ArrayShow</span></span>
<span class="line"><span style="color:#E1E4E8;">onjava.atunit.AtUnit$TestMethods</span></span>
<span class="line"><span style="color:#E1E4E8;">onjava.atunit.AtUnit</span></span>
<span class="line"><span style="color:#E1E4E8;">onjava.atunit.ClassNameFinder</span></span>
<span class="line"><span style="color:#E1E4E8;">onjava.atunit.Test</span></span>
<span class="line"><span style="color:#E1E4E8;">onjava.atunit.TestObjectCleanup</span></span>
<span class="line"><span style="color:#E1E4E8;">onjava.atunit.TestObjectCreate</span></span>
<span class="line"><span style="color:#E1E4E8;">onjava.atunit.TestProperty</span></span>
<span class="line"><span style="color:#E1E4E8;">onjava.BasicSupplier</span></span>
<span class="line"><span style="color:#E1E4E8;">onjava.CollectionMethodDifferences</span></span>
<span class="line"><span style="color:#E1E4E8;">onjava.ConvertTo</span></span>
<span class="line"><span style="color:#E1E4E8;">onjava.Count$Boolean</span></span>
<span class="line"><span style="color:#E1E4E8;">onjava.Count$Byte</span></span>
<span class="line"><span style="color:#E1E4E8;">onjava.Count$Character</span></span>
<span class="line"><span style="color:#E1E4E8;">onjava.Count$Double</span></span>
<span class="line"><span style="color:#E1E4E8;">onjava.Count$Float</span></span>
<span class="line"><span style="color:#E1E4E8;">onjava.Count$Integer</span></span>
<span class="line"><span style="color:#E1E4E8;">onjava.Count$Long</span></span>
<span class="line"><span style="color:#E1E4E8;">onjava.Count$Pboolean</span></span>
<span class="line"><span style="color:#E1E4E8;">onjava.Count$Pbyte</span></span>
<span class="line"><span style="color:#E1E4E8;">onjava.Count$Pchar</span></span>
<span class="line"><span style="color:#E1E4E8;">onjava.Count$Pdouble</span></span>
<span class="line"><span style="color:#E1E4E8;">onjava.Count$Pfloat</span></span>
<span class="line"><span style="color:#E1E4E8;">onjava.Count$Pint</span></span>
<span class="line"><span style="color:#E1E4E8;">onjava.Count$Plong</span></span>
<span class="line"><span style="color:#E1E4E8;">onjava.Count$Pshort</span></span>
<span class="line"><span style="color:#E1E4E8;">onjava.Count$Short</span></span>
<span class="line"><span style="color:#E1E4E8;">onjava.Count</span></span>
<span class="line"><span style="color:#E1E4E8;">onjava.CountingIntegerList</span></span>
<span class="line"><span style="color:#E1E4E8;">onjava.CountMap</span></span>
<span class="line"><span style="color:#E1E4E8;">onjava.Countries</span></span>
<span class="line"><span style="color:#E1E4E8;">onjava.Enums</span></span>
<span class="line"><span style="color:#E1E4E8;">onjava.FillMap</span></span>
<span class="line"><span style="color:#E1E4E8;">onjava.HTMLColors</span></span>
<span class="line"><span style="color:#E1E4E8;">onjava.MouseClick</span></span>
<span class="line"><span style="color:#E1E4E8;">onjava.Nap</span></span>
<span class="line"><span style="color:#E1E4E8;">onjava.Null</span></span>
<span class="line"><span style="color:#E1E4E8;">onjava.Operations</span></span>
<span class="line"><span style="color:#E1E4E8;">onjava.OSExecute</span></span>
<span class="line"><span style="color:#E1E4E8;">onjava.OSExecuteException</span></span>
<span class="line"><span style="color:#E1E4E8;">onjava.Pair</span></span>
<span class="line"><span style="color:#E1E4E8;">onjava.ProcessFiles$Strategy</span></span>
<span class="line"><span style="color:#E1E4E8;">onjava.ProcessFiles</span></span>
<span class="line"><span style="color:#E1E4E8;">onjava.Rand$Boolean</span></span>
<span class="line"><span style="color:#E1E4E8;">onjava.Rand$Byte</span></span>
<span class="line"><span style="color:#E1E4E8;">onjava.Rand$Character</span></span>
<span class="line"><span style="color:#E1E4E8;">onjava.Rand$Double</span></span>
<span class="line"><span style="color:#E1E4E8;">onjava.Rand$Float</span></span>
<span class="line"><span style="color:#E1E4E8;">onjava.Rand$Integer</span></span>
<span class="line"><span style="color:#E1E4E8;">onjava.Rand$Long</span></span>
<span class="line"><span style="color:#E1E4E8;">onjava.Rand$Pboolean</span></span>
<span class="line"><span style="color:#E1E4E8;">onjava.Rand$Pbyte</span></span>
<span class="line"><span style="color:#E1E4E8;">onjava.Rand$Pchar</span></span>
<span class="line"><span style="color:#E1E4E8;">onjava.Rand$Pdouble</span></span>
<span class="line"><span style="color:#E1E4E8;">onjava.Rand$Pfloat</span></span>
<span class="line"><span style="color:#E1E4E8;">onjava.Rand$Pint</span></span>
<span class="line"><span style="color:#E1E4E8;">onjava.Rand$Plong</span></span>
<span class="line"><span style="color:#E1E4E8;">onjava.Rand$Pshort</span></span>
<span class="line"><span style="color:#E1E4E8;">onjava.Rand$Short</span></span>
<span class="line"><span style="color:#E1E4E8;">onjava.Rand$String</span></span>
<span class="line"><span style="color:#E1E4E8;">onjava.Rand</span></span>
<span class="line"><span style="color:#E1E4E8;">onjava.Range</span></span>
<span class="line"><span style="color:#E1E4E8;">onjava.Repeat</span></span>
<span class="line"><span style="color:#E1E4E8;">onjava.RmDir</span></span>
<span class="line"><span style="color:#E1E4E8;">onjava.Sets</span></span>
<span class="line"><span style="color:#E1E4E8;">onjava.Stack</span></span>
<span class="line"><span style="color:#E1E4E8;">onjava.Suppliers</span></span>
<span class="line"><span style="color:#E1E4E8;">onjava.TimedAbort</span></span>
<span class="line"><span style="color:#E1E4E8;">onjava.Timer</span></span>
<span class="line"><span style="color:#E1E4E8;">onjava.Tuple</span></span>
<span class="line"><span style="color:#E1E4E8;">onjava.Tuple2</span></span>
<span class="line"><span style="color:#E1E4E8;">onjava.Tuple3</span></span>
<span class="line"><span style="color:#E1E4E8;">onjava.Tuple4</span></span>
<span class="line"><span style="color:#E1E4E8;">onjava.Tuple5</span></span>
<span class="line"><span style="color:#E1E4E8;">onjava.TypeCounter</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">onjava.ArrayShow</span></span>
<span class="line"><span style="color:#24292E;">onjava.atunit.AtUnit$TestMethods</span></span>
<span class="line"><span style="color:#24292E;">onjava.atunit.AtUnit</span></span>
<span class="line"><span style="color:#24292E;">onjava.atunit.ClassNameFinder</span></span>
<span class="line"><span style="color:#24292E;">onjava.atunit.Test</span></span>
<span class="line"><span style="color:#24292E;">onjava.atunit.TestObjectCleanup</span></span>
<span class="line"><span style="color:#24292E;">onjava.atunit.TestObjectCreate</span></span>
<span class="line"><span style="color:#24292E;">onjava.atunit.TestProperty</span></span>
<span class="line"><span style="color:#24292E;">onjava.BasicSupplier</span></span>
<span class="line"><span style="color:#24292E;">onjava.CollectionMethodDifferences</span></span>
<span class="line"><span style="color:#24292E;">onjava.ConvertTo</span></span>
<span class="line"><span style="color:#24292E;">onjava.Count$Boolean</span></span>
<span class="line"><span style="color:#24292E;">onjava.Count$Byte</span></span>
<span class="line"><span style="color:#24292E;">onjava.Count$Character</span></span>
<span class="line"><span style="color:#24292E;">onjava.Count$Double</span></span>
<span class="line"><span style="color:#24292E;">onjava.Count$Float</span></span>
<span class="line"><span style="color:#24292E;">onjava.Count$Integer</span></span>
<span class="line"><span style="color:#24292E;">onjava.Count$Long</span></span>
<span class="line"><span style="color:#24292E;">onjava.Count$Pboolean</span></span>
<span class="line"><span style="color:#24292E;">onjava.Count$Pbyte</span></span>
<span class="line"><span style="color:#24292E;">onjava.Count$Pchar</span></span>
<span class="line"><span style="color:#24292E;">onjava.Count$Pdouble</span></span>
<span class="line"><span style="color:#24292E;">onjava.Count$Pfloat</span></span>
<span class="line"><span style="color:#24292E;">onjava.Count$Pint</span></span>
<span class="line"><span style="color:#24292E;">onjava.Count$Plong</span></span>
<span class="line"><span style="color:#24292E;">onjava.Count$Pshort</span></span>
<span class="line"><span style="color:#24292E;">onjava.Count$Short</span></span>
<span class="line"><span style="color:#24292E;">onjava.Count</span></span>
<span class="line"><span style="color:#24292E;">onjava.CountingIntegerList</span></span>
<span class="line"><span style="color:#24292E;">onjava.CountMap</span></span>
<span class="line"><span style="color:#24292E;">onjava.Countries</span></span>
<span class="line"><span style="color:#24292E;">onjava.Enums</span></span>
<span class="line"><span style="color:#24292E;">onjava.FillMap</span></span>
<span class="line"><span style="color:#24292E;">onjava.HTMLColors</span></span>
<span class="line"><span style="color:#24292E;">onjava.MouseClick</span></span>
<span class="line"><span style="color:#24292E;">onjava.Nap</span></span>
<span class="line"><span style="color:#24292E;">onjava.Null</span></span>
<span class="line"><span style="color:#24292E;">onjava.Operations</span></span>
<span class="line"><span style="color:#24292E;">onjava.OSExecute</span></span>
<span class="line"><span style="color:#24292E;">onjava.OSExecuteException</span></span>
<span class="line"><span style="color:#24292E;">onjava.Pair</span></span>
<span class="line"><span style="color:#24292E;">onjava.ProcessFiles$Strategy</span></span>
<span class="line"><span style="color:#24292E;">onjava.ProcessFiles</span></span>
<span class="line"><span style="color:#24292E;">onjava.Rand$Boolean</span></span>
<span class="line"><span style="color:#24292E;">onjava.Rand$Byte</span></span>
<span class="line"><span style="color:#24292E;">onjava.Rand$Character</span></span>
<span class="line"><span style="color:#24292E;">onjava.Rand$Double</span></span>
<span class="line"><span style="color:#24292E;">onjava.Rand$Float</span></span>
<span class="line"><span style="color:#24292E;">onjava.Rand$Integer</span></span>
<span class="line"><span style="color:#24292E;">onjava.Rand$Long</span></span>
<span class="line"><span style="color:#24292E;">onjava.Rand$Pboolean</span></span>
<span class="line"><span style="color:#24292E;">onjava.Rand$Pbyte</span></span>
<span class="line"><span style="color:#24292E;">onjava.Rand$Pchar</span></span>
<span class="line"><span style="color:#24292E;">onjava.Rand$Pdouble</span></span>
<span class="line"><span style="color:#24292E;">onjava.Rand$Pfloat</span></span>
<span class="line"><span style="color:#24292E;">onjava.Rand$Pint</span></span>
<span class="line"><span style="color:#24292E;">onjava.Rand$Plong</span></span>
<span class="line"><span style="color:#24292E;">onjava.Rand$Pshort</span></span>
<span class="line"><span style="color:#24292E;">onjava.Rand$Short</span></span>
<span class="line"><span style="color:#24292E;">onjava.Rand$String</span></span>
<span class="line"><span style="color:#24292E;">onjava.Rand</span></span>
<span class="line"><span style="color:#24292E;">onjava.Range</span></span>
<span class="line"><span style="color:#24292E;">onjava.Repeat</span></span>
<span class="line"><span style="color:#24292E;">onjava.RmDir</span></span>
<span class="line"><span style="color:#24292E;">onjava.Sets</span></span>
<span class="line"><span style="color:#24292E;">onjava.Stack</span></span>
<span class="line"><span style="color:#24292E;">onjava.Suppliers</span></span>
<span class="line"><span style="color:#24292E;">onjava.TimedAbort</span></span>
<span class="line"><span style="color:#24292E;">onjava.Timer</span></span>
<span class="line"><span style="color:#24292E;">onjava.Tuple</span></span>
<span class="line"><span style="color:#24292E;">onjava.Tuple2</span></span>
<span class="line"><span style="color:#24292E;">onjava.Tuple3</span></span>
<span class="line"><span style="color:#24292E;">onjava.Tuple4</span></span>
<span class="line"><span style="color:#24292E;">onjava.Tuple5</span></span>
<span class="line"><span style="color:#24292E;">onjava.TypeCounter</span></span></code></pre></div><p>虽然无法在这里介绍其中所有的细节，但是每个类文件都必须遵循一定的格式，而我已经尽力用有意义的字段来表示这些从 <strong>ByteArrayInputStream</strong> 中提取出来的数据片段。通过施加在输入流上的读操作，你能看出每个信息片的大小。例如每一个类的头 32 个 bit 总是一个 “神秘数字” <strong>0xcafebabe</strong>，而接下来的两个 <strong>short</strong> 值是版本信息。常量池包含了程序的常量，所以这是一个可变的值。接下来的 <strong>short</strong> 告诉我们这个常量池有多大，然后我们为其创建一个尺寸合适的数组。常量池中的每一个元素，其长度可能是固定式，也可能是可变的值，因此我们必须检查每一个常量的起始标记，然后才能知道该怎么做，这就是 switch 语句的工作。我们并不打算精确的分析类中所有的数据，仅仅是从文件的起始一步一步的走，直到取得我们所需的信息，因此你会发现，在这个过程中我们丢弃了大量的数据。关于类的信息都保存在 <strong>classNameTable</strong> 和 <strong>offsetTable</strong> 中。在读取常量池之后，就找到了 <strong>this_class</strong> 信息，这是 <strong>offsetTable</strong> 的一个坐标，通过它可以找到进入 <strong>classNameTable</strong> 的坐标，然后就可以得到我们所需的类的名字了。</p><p>现在让我们回到 <strong>AtUtil.java</strong> 中，process() 方法中拥有了类的名字，然后检查它是否包含“.”，如果有就表示该类定义于一个包中。没有包的类会被忽略。如果一个类在包中，那么我们就可以使用标准的类加载器通过 <code>Class.forName()</code> 将其加载进来。现在我们可以对这个类进行 <strong>@Unit</strong> 注解的分析工作了。</p><p>我们只需要关注三件事：首先是 <strong>@Test</strong> 方法，它们被保存在 <strong>TestMehtods</strong> 列表中，然后检查其是否具有 @TestObjectCreate 和 <strong>@TestObjectCleanup</strong>**** 方法。从代码中可以看到，我们通过调用相应的方法来查询注解从而找到这些方法。</p><p>每找到一个 @Test 方法，就打印出来当前类的名字，于是观察者立刻就可以知道发生了什么。接下来开始执行测试，也就是打印出方法名，然后调用 createTestObject() （如果存在一个加了 @TestObjectCreate 注解的方法），或者调用默认构造器。一旦创建出来测试对象，如果调用其上的测试方法。如果测试的返回值为 boolean，就捕获该结果。如果测试方法没有返回值，那么就没有异常发生，我们就假设测试成功，反之，如果当 assert 失败或者有任何异常抛出的时候，就说明测试失败，这时将异常信息打印出来以显示错误的原因。如果有失败的测试发生，那么还要统计失败的次数，并将失败所属的类和方法加入到 failedTests 中，以便最后报告给用户。</p><h2 id="本章小结" tabindex="-1">本章小结 <a class="header-anchor" href="#本章小结" aria-label="Permalink to &quot;本章小结&quot;">​</a></h2><p>注解是 Java 引入的一项非常受欢迎的补充，它提供了一种结构化，并且具有类型检查能力的新途径，从而使得你能够为代码中加入元数据，而且不会导致代码杂乱并难以阅读。使用注解能够帮助我们避免编写累赘的部署描述性文件，以及其他的生成文件。而 Javadoc 中的 @deprecated 被 @Deprecated 注解所替代的事实也说明，与注释性文字相比，注解绝对更适用于描述类相关的信息。</p><p>Java 提供了很少的内置注解。这意味着如果你在别处找不到可用的类库，那么就只能自己创建新的注解以及相应的处理器。通过将注解处理器链接到 javac，你可以一步完成编译新生成的文件，简化了构造过程。</p><p>API 的提供方和框架将会将注解作为他们工具的一部分。通过 @Unit 系统，我们可以想象，注解会极大的改变我们的 Java 编程体验。</p><p>[^3 ]: The Java designers coyly suggest that a mirror is where you find a reflection.</p>`,211),e=[o];function t(c,r,E,y,i,F){return n(),a("div",null,e)}const A=s(p,[["render",t]]);export{d as __pageData,A as default};
